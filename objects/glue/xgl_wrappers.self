" This information was generated by the primitive maker (primitiveMaker.self).
Please do not change it manually. -- dmu 12/91  "

" Copyright 1992-2012 AUTHORS.  "

" See the LICENSE file for license information.  "

traits xgl raw systemState _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  open = (

       openIfFail: [|:e| ^error: 'open failed: ', e] ).

  openIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_open_no_args_Open_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl systemState deadCopy IfFail: fb ).


  openWithAttribute: t0 AttrValue: t1 Zero: t2  = (

       openWithAttribute: t0 AttrValue: t1 Zero: t2 IfFail: 
        [|:e| ^error: 'openWithAttribute:AttrValue:Zero: failed: ', e] ).

  openWithAttribute: t0 AttrValue: t1 Zero: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_open_OpenWithAttribute_AttrValue_Zero__glue' 
        ArgCoercions: ' i ii ' ResultType: 'arg4' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: 0 With: t1 With: 0 With: t2 With: 
        xgl systemState deadCopy IfFail: fb ).


  close = (

       closeIfFail: [|:e| ^error: 'close failed: ', e] ).

  closeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_close_Close_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" inquiry message  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  inquireHardware: t0  = (

       inquireHardware: t0 IfFail: 
        [|:e| ^error: 'inquireHardware: failed: ', e] ).

  inquireHardware: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_inquire_InquireHardware__glue' ArgCoercions: 
        'pp ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl inquire deadCopy IfFail: fb ).


" other object creation messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  createXglObject: t0 ObjectDesc: t1 Zero: t2  = (

       createXglObject: t0 ObjectDesc: t1 Zero: t2 IfFail: 
        [|:e| ^error: 'createXglObject:ObjectDesc:Zero: failed: ', e] ).

  createXglObject: t0 ObjectDesc: t1 Zero: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_object_create_CreateXglObject_ObjectDesc_Zero__glue' 
        ArgCoercions: 'p ipi ' ResultType: 'arg5' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 With: t2 With: 
        xgl genericObject deadCopy IfFail: fb ).


  createXglObject: t0 ObjectDesc: t1 WithAttribute: t2 
    AttrValue: t3 Zero: t4  = (

       createXglObject: t0 ObjectDesc: t1 WithAttribute: t2 
        AttrValue: t3 Zero: t4 IfFail: 
        [|:e| ^error: 'createXglObject:ObjectDesc:WithAttribute:AttrValue:Zero: failed: ', e] ).

  createXglObject: t0 ObjectDesc: t1 WithAttribute: t2 
    AttrValue: t3 Zero: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_object_create_CreateXglObject_ObjectDesc_WithAttribute_AttrValue_Zero__glue' 
        ArgCoercions: 'p ip i ii ' ResultType: 'arg7' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 With: t2 With: 0 With: 
        t3 With: 0 With: t4 With: 
        xgl genericObject deadCopy IfFail: fb ).


	}
| )

traits xgl raw genericObject _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation/deletion message  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  newAsVector: t0  = (

       newAsVector: t0 IfFail: 
        [|:e| ^error: 'newAsVector: failed: ', e] ).

  newAsVector: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_object_new_NewAsVector__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With:  xgl genericObject deadCopy IfFail: fb ).


  deleteVector: t0  = (

       deleteVector: t0 IfFail: 
        [|:e| ^error: 'deleteVector: failed: ', e] ).

  deleteVector: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_object_delete_DeleteVector__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_object_destroy_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_object_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl genericObject deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_object_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" get and set attributes of this object  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  setAttribute: t0 AttrValue: t1 Zero: t2  = (

       setAttribute: t0 AttrValue: t1 Zero: t2 IfFail: 
        [|:e| ^error: 'setAttribute:AttrValue:Zero: failed: ', e] ).

  setAttribute: t0 AttrValue: t1 Zero: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_object_set_SetAttribute_AttrValue_Zero__glue' 
        ArgCoercions: 'p i ii' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 With: 0 With: t2 
        IfFail: fb .
    self).


  getAttribute: t0 AttrValue: t1  = (

       getAttribute: t0 AttrValue: t1 IfFail: 
        [|:e| ^error: 'getAttribute:AttrValue: failed: ', e] ).

  getAttribute: t0 AttrValue: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_object_get_GetAttribute_AttrValue__glue' 
        ArgCoercions: 'p i i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 With: 0 IfFail: fb .
    self).


" ctx operations  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  ctxNewFrame = (

       ctxNewFrameIfFail: [|:e| ^error: 'ctxNewFrame failed: ', e] ).

  ctxNewFrameIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_context_new_frame_CtxNewFrame_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


  ctxPost: t0  = (

       ctxPost: t0 IfFail: [|:e| ^error: 'ctxPost: failed: ', e] ).

  ctxPost: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_context_post_CtxPost__glue' ArgCoercions: 
        'p ' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  ctxCopyRaster: t0 Pos: t1 SrcRaster: t2  = (

       ctxCopyRaster: t0 Pos: t1 SrcRaster: t2 IfFail: 
        [|:e| ^error: 'ctxCopyRaster:Pos:SrcRaster: failed: ', e] ).

  ctxCopyRaster: t0 Pos: t1 SrcRaster: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_context_copy_raster_CtxCopyRaster_Pos_SrcRaster__glue' 
        ArgCoercions: 'pppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


  ctxCopyBuffer: t0 Pos: t1 SrcRaster: t2  = (

       ctxCopyBuffer: t0 Pos: t1 SrcRaster: t2 IfFail: 
        [|:e| ^error: 'ctxCopyBuffer:Pos:SrcRaster: failed: ', e] ).

  ctxCopyBuffer: t0 Pos: t1 SrcRaster: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_context_copy_buffer_CtxCopyBuffer_Pos_SrcRaster__glue' 
        ArgCoercions: 'pppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


  ctxAccumulate: t0 Pos: t1 SrcWeight: t2 AccumWeight: t3 
    Buffer: t4  = (

       ctxAccumulate: t0 Pos: t1 SrcWeight: t2 AccumWeight: t3 
        Buffer: t4 IfFail: 
        [|:e| ^error: 'ctxAccumulate:Pos:SrcWeight:AccumWeight:Buffer: failed: ', e] ).

  ctxAccumulate: t0 Pos: t1 SrcWeight: t2 AccumWeight: t3 
    Buffer: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_context_accumulate_CtxAccumulate_Pos_SrcWeight_AccumWeight_Buffer__glue' 
        ArgCoercions: 'pppff i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: 0 IfFail: fb .
    self).


  ctxClearAccumulation: t0  = (

       ctxClearAccumulation: t0 IfFail: 
        [|:e| ^error: 'ctxClearAccumulation: failed: ', e] ).

  ctxClearAccumulation: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_context_clear_accumulation_CtxClearAccumulation__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  ctxDisplayGcache: t0 Test: t1 Display: t2  = (

       ctxDisplayGcache: t0 Test: t1 Display: t2 IfFail: 
        [|:e| ^error: 'ctxDisplayGcache:Test:Display: failed: ', e] ).

  ctxDisplayGcache: t0 Test: t1 Display: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_context_display_gcache_CtxDisplayGcache_Test_Display__glue' 
        ArgCoercions: 'pp  ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb ).


  ctxGetPixel: t0 ResultColor: t1  = (

       ctxGetPixel: t0 ResultColor: t1 IfFail: 
        [|:e| ^error: 'ctxGetPixel:ResultColor: failed: ', e] ).

  ctxGetPixel: t0 ResultColor: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_context_get_pixel_CtxGetPixel_ResultColor__glue' 
        ArgCoercions: 'ppp' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb ).


  ctxPop = (

       ctxPopIfFail: [|:e| ^error: 'ctxPop failed: ', e] ).

  ctxPopIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_context_pop_CtxPop_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


  ctxPush: t0  = (

       ctxPush: t0 IfFail: [|:e| ^error: 'ctxPush: failed: ', e] ).

  ctxPush: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_context_push_CtxPush__glue' ArgCoercions: 
        'p i' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  ctxSetMultiPixel: t0 Positions: t1 Colors: t2  = (

       ctxSetMultiPixel: t0 Positions: t1 Colors: t2 IfFail: 
        [|:e| ^error: 'ctxSetMultiPixel:Positions:Colors: failed: ', e] ).

  ctxSetMultiPixel: t0 Positions: t1 Colors: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_context_set_multi_pixel_CtxSetMultiPixel_Positions_Colors__glue' 
        ArgCoercions: 'pipp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


  ctxSetPixel: t0 Color: t1  = (

       ctxSetPixel: t0 Color: t1 IfFail: 
        [|:e| ^error: 'ctxSetPixel:Color: failed: ', e] ).

  ctxSetPixel: t0 Color: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_context_set_pixel_CtxSetPixel_Color__glue' 
        ArgCoercions: 'ppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


  ctxSetPixelRow: t0 Row: t1 Count: t2 Color: t3  = (

       ctxSetPixelRow: t0 Row: t1 Count: t2 Color: t3 IfFail: 
        [|:e| ^error: 'ctxSetPixelRow:Row:Count:Color: failed: ', e] ).

  ctxSetPixelRow: t0 Row: t1 Count: t2 Color: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_context_set_pixel_row_CtxSetPixelRow_Row_Count_Color__glue' 
        ArgCoercions: 'piiip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


  ctxUpdateModelTransform: t0  = (

       ctxUpdateModelTransform: t0 IfFail: 
        [|:e| ^error: 'ctxUpdateModelTransform: failed: ', e] ).

  ctxUpdateModelTransform: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_context_update_model_trans_CtxUpdateModelTransform__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  ctxCheckBoundingBox: t0 BoundingBox: t1 GeomStatus: t2  = (

       ctxCheckBoundingBox: t0 BoundingBox: t1 GeomStatus: t2 
        IfFail: 
        [|:e| ^error: 'ctxCheckBoundingBox:BoundingBox:GeomStatus: failed: ', e] ).

  ctxCheckBoundingBox: t0 BoundingBox: t1 GeomStatus: t2 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_context_check_bbox_CtxCheckBoundingBox_BoundingBox_GeomStatus__glue' 
        ArgCoercions: 'p ip i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 With: t2 With: 0 
        IfFail: fb .
    self).


  ctxFlush: t0  = (

       ctxFlush: t0 IfFail: [|:e| ^error: 'ctxFlush: failed: ', e] ).

  ctxFlush: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_context_flush_CtxFlush__glue' ArgCoercions: 
        'p i' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  ctxPickClear = (

       ctxPickClearIfFail: 
        [|:e| ^error: 'ctxPickClear failed: ', e] ).

  ctxPickClearIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pick_clear_CtxPickClear_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


  ctxPickGetIdentifiers: t0 PickInfo: t1  = (

       ctxPickGetIdentifiers: t0 PickInfo: t1 IfFail: 
        [|:e| ^error: 'ctxPickGetIdentifiers:PickInfo: failed: ', e] ).

  ctxPickGetIdentifiers: t0 PickInfo: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pick_get_identifiers_CtxPickGetIdentifiers_PickInfo__glue' 
        ArgCoercions: 'p ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 IfFail: fb .
    self).


" ctx primitive drawing operations  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  multiPolyline: t0 Count: t1 Points: t2  = (

       multiPolyline: t0 Count: t1 Points: t2 IfFail: 
        [|:e| ^error: 'multiPolyline:Count:Points: failed: ', e] ).

  multiPolyline: t0 Count: t1 Points: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_multipolyline_MultiPolyline_Count_Points__glue' 
        ArgCoercions: 'ppip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


  strokeText: t0 Pos: t1 Dir: t2  = (

       strokeText: t0 Pos: t1 Dir: t2 IfFail: 
        [|:e| ^error: 'strokeText:Pos:Dir: failed: ', e] ).

  strokeText: t0 Pos: t1 Dir: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_stroke_text_StrokeText_Pos_Dir__glue' 
        ArgCoercions: 'p ipp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 With: t2 IfFail: fb .
    self).


  polygon: t0 Facet: t1 BoundingBox: t2 NumPointLists: t3 
    PointLists: t4  = (

       polygon: t0 Facet: t1 BoundingBox: t2 NumPointLists: t3 
        PointLists: t4 IfFail: 
        [|:e| ^error: 'polygon:Facet:BoundingBox:NumPointLists:PointLists: failed: ', e] ).

  polygon: t0 Facet: t1 BoundingBox: t2 NumPointLists: t3 
    PointLists: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_polygon_Polygon_Facet_BoundingBox_NumPointLists_PointLists__glue' 
        ArgCoercions: 'p ippip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 With: t2 With: t3 
        With: t4 IfFail: fb .
    self).


  multiSimplePolygon: t0 Facets: t1 BoundingBox: t2 
    NumPointLists: t3 PointLists: t4  = (

       multiSimplePolygon: t0 Facets: t1 BoundingBox: t2 
        NumPointLists: t3 PointLists: t4 IfFail: 
        [|:e| ^error: 'multiSimplePolygon:Facets:BoundingBox:NumPointLists:PointLists: failed: ', e] ).

  multiSimplePolygon: t0 Facets: t1 BoundingBox: t2 
    NumPointLists: t3 PointLists: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_multi_simple_polygon_MultiSimplePolygon_Facets_BoundingBox_NumPointLists_PointLists__glue' 
        ArgCoercions: 'p ippip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 With: t2 With: t3 
        With: t4 IfFail: fb .
    self).


  multiMarker: t0  = (

       multiMarker: t0 IfFail: 
        [|:e| ^error: 'multiMarker: failed: ', e] ).

  multiMarker: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_multimarker_MultiMarker__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  triangleStrip: t0 Points: t1  = (

       triangleStrip: t0 Points: t1 IfFail: 
        [|:e| ^error: 'triangleStrip:Points: failed: ', e] ).

  triangleStrip: t0 Points: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_triangle_strip_TriangleStrip_Points__glue' 
        ArgCoercions: 'ppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


  triangleList: t0 Points: t1 Flags: t2  = (

       triangleList: t0 Points: t1 Flags: t2 IfFail: 
        [|:e| ^error: 'triangleList:Points:Flags: failed: ', e] ).

  triangleList: t0 Points: t1 Flags: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_triangle_list_TriangleList_Points_Flags__glue' 
        ArgCoercions: 'ppp i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: 0 IfFail: fb .
    self).


  quadrilateralMesh: t0 Columns: t1 Facets: t2 Points: t3  = (

       quadrilateralMesh: t0 Columns: t1 Facets: t2 Points: t3 
        IfFail: 
        [|:e| ^error: 'quadrilateralMesh:Columns:Facets:Points: failed: ', e] ).

  quadrilateralMesh: t0 Columns: t1 Facets: t2 Points: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_quadrilateral_mesh_QuadrilateralMesh_Columns_Facets_Points__glue' 
        ArgCoercions: 'piipp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


  multiRectangle: t0  = (

       multiRectangle: t0 IfFail: 
        [|:e| ^error: 'multiRectangle: failed: ', e] ).

  multiRectangle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_multirectangle_MultiRectangle__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  multiCircle: t0  = (

       multiCircle: t0 IfFail: 
        [|:e| ^error: 'multiCircle: failed: ', e] ).

  multiCircle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_multicircle_MultiCircle__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  annotationText: t0 Pos: t1 Dir: t2  = (

       annotationText: t0 Pos: t1 Dir: t2 IfFail: 
        [|:e| ^error: 'annotationText:Pos:Dir: failed: ', e] ).

  annotationText: t0 Pos: t1 Dir: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_annotation_text_AnnotationText_Pos_Dir__glue' 
        ArgCoercions: 'p ipp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 With: t2 IfFail: fb .
    self).


  imageAtPos: t0 Bounds: t1 SrcRaster: t2  = (

       imageAtPos: t0 Bounds: t1 SrcRaster: t2 IfFail: 
        [|:e| ^error: 'imageAtPos:Bounds:SrcRaster: failed: ', e] ).

  imageAtPos: t0 Bounds: t1 SrcRaster: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_image_ImageAtPos_Bounds_SrcRaster__glue' 
        ArgCoercions: 'pppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


  multiEllipticalArc: t0  = (

       multiEllipticalArc: t0 IfFail: 
        [|:e| ^error: 'multiEllipticalArc: failed: ', e] ).

  multiEllipticalArc: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_multi_elliptical_arc_MultiEllipticalArc__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  multiArc: t0  = (

       multiArc: t0 IfFail: [|:e| ^error: 'multiArc: failed: ', e] ).

  multiArc: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_multiarc_MultiArc__glue' ArgCoercions: 'pp' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  nubSplineCurve: t0  = (

       nubSplineCurve: t0 IfFail: 
        [|:e| ^error: 'nubSplineCurve: failed: ', e] ).

  nubSplineCurve: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nu_bspline_curve_NubSplineCurve__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  strokeTextExtent: t0 Bounds: t1 Point: t2  = (

       strokeTextExtent: t0 Bounds: t1 Point: t2 IfFail: 
        [|:e| ^error: 'strokeTextExtent:Bounds:Point: failed: ', e] ).

  strokeTextExtent: t0 Bounds: t1 Point: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_stroke_text_extent_StrokeTextExtent_Bounds_Point__glue' 
        ArgCoercions: 'pppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


  nurbSplineCurve: t0 Range: t1 ColorSpline: t2  = (

       nurbSplineCurve: t0 Range: t1 ColorSpline: t2 IfFail: 
        [|:e| ^error: 'nurbSplineCurve:Range:ColorSpline: failed: ', e] ).

  nurbSplineCurve: t0 Range: t1 ColorSpline: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_curve_NurbSplineCurve_Range_ColorSpline__glue' 
        ArgCoercions: 'pppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


  nurbSplineSurface: t0 Trimming: t1 GeomHints: t2 
    ColorSpline: t3 DataSplines: t4  = (

       nurbSplineSurface: t0 Trimming: t1 GeomHints: t2 
        ColorSpline: t3 DataSplines: t4 IfFail: 
        [|:e| ^error: 'nurbSplineSurface:Trimming:GeomHints:ColorSpline:DataSplines: failed: ', e] ).

  nurbSplineSurface: t0 Trimming: t1 GeomHints: t2 
    ColorSpline: t3 DataSplines: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surface_NurbSplineSurface_Trimming_GeomHints_ColorSpline_DataSplines__glue' 
        ArgCoercions: 'pppppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


" window raster operators  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  winRasResize = (

       winRasResizeIfFail: 
        [|:e| ^error: 'winRasResize failed: ', e] ).

  winRasResizeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_window_raster_resize_WinRasResize_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" transform operations  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  transformCopy: t0  = (

       transformCopy: t0 IfFail: 
        [|:e| ^error: 'transformCopy: failed: ', e] ).

  transformCopy: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_transform_copy_TransformCopy__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  transformIdentity = (

       transformIdentityIfFail: 
        [|:e| ^error: 'transformIdentity failed: ', e] ).

  transformIdentityIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_transform_identity_TransformIdentity_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


  transformInvert: t0  = (

       transformInvert: t0 IfFail: 
        [|:e| ^error: 'transformInvert: failed: ', e] ).

  transformInvert: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_transform_invert_TransformInvert__glue' 
        ArgCoercions: 'pp ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl genericObject deadCopy 
        IfFail: fb ).


  transformMultiply: t0 By: t1  = (

       transformMultiply: t0 By: t1 IfFail: 
        [|:e| ^error: 'transformMultiply:By: failed: ', e] ).

  transformMultiply: t0 By: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_transform_multiply_TransformMultiply_By__glue' 
        ArgCoercions: 'ppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


  transformPoint: t0  = (

       transformPoint: t0 IfFail: 
        [|:e| ^error: 'transformPoint: failed: ', e] ).

  transformPoint: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_transform_point_TransformPoint__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  transformPointList: t0 Dest: t1  = (

       transformPointList: t0 Dest: t1 IfFail: 
        [|:e| ^error: 'transformPointList:Dest: failed: ', e] ).

  transformPointList: t0 Dest: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_transform_point_list_TransformPointList_Dest__glue' 
        ArgCoercions: 'ppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


  transformRead: t0  = (

       transformRead: t0 IfFail: 
        [|:e| ^error: 'transformRead: failed: ', e] ).

  transformRead: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_transform_read_TransformRead__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  transformRotate: t0 Axis: t1 Update: t2  = (

       transformRotate: t0 Axis: t1 Update: t2 IfFail: 
        [|:e| ^error: 'transformRotate:Axis:Update: failed: ', e] ).

  transformRotate: t0 Axis: t1 Update: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_transform_rotate_TransformRotate_Axis_Update__glue' 
        ArgCoercions: 'pf i i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 With: t2 With: 0 
        IfFail: fb .
    self).


  transformScale: t0 Update: t1  = (

       transformScale: t0 Update: t1 IfFail: 
        [|:e| ^error: 'transformScale:Update: failed: ', e] ).

  transformScale: t0 Update: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_transform_scale_TransformScale_Update__glue' 
        ArgCoercions: 'pp i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 IfFail: fb .
    self).


  transformTranslate: t0 Update: t1  = (

       transformTranslate: t0 Update: t1 IfFail: 
        [|:e| ^error: 'transformTranslate:Update: failed: ', e] ).

  transformTranslate: t0 Update: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_transform_translate_TransformTranslate_Update__glue' 
        ArgCoercions: 'pp i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 IfFail: fb .
    self).


  transformTranspose: t0  = (

       transformTranspose: t0 IfFail: 
        [|:e| ^error: 'transformTranspose: failed: ', e] ).

  transformTranspose: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_transform_transpose_TransformTranspose__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  transformWrite: t0  = (

       transformWrite: t0 IfFail: 
        [|:e| ^error: 'transformWrite: failed: ', e] ).

  transformWrite: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_transform_write_TransformWrite__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  transformWriteSpecific: t0 Member: t1  = (

       transformWriteSpecific: t0 Member: t1 IfFail: 
        [|:e| ^error: 'transformWriteSpecific:Member: failed: ', e] ).

  transformWriteSpecific: t0 Member: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_transform_write_specific_TransformWriteSpecific_Member__glue' 
        ArgCoercions: 'pp i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 IfFail: fb .
    self).


" light operations  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  lightCopy: t0  = (

       lightCopy: t0 IfFail: 
        [|:e| ^error: 'lightCopy: failed: ', e] ).

  lightCopy: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_light_copy_LightCopy__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" gcache operations  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  gcacheMultiEllipticalArc: t0 Arcs: t1  = (

       gcacheMultiEllipticalArc: t0 Arcs: t1 IfFail: 
        [|:e| ^error: 'gcacheMultiEllipticalArc:Arcs: failed: ', e] ).

  gcacheMultiEllipticalArc: t0 Arcs: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_gcache_multi_elliptical_arc_GcacheMultiEllipticalArc_Arcs__glue' 
        ArgCoercions: 'ppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


  gcacheMultiSimplePolygon: t0 FacetFlags: t1 Facets: t2 
    BoundingBox: t3 NumPointLists: t4 PointLists: t5  = (

       gcacheMultiSimplePolygon: t0 FacetFlags: t1 Facets: t2 
        BoundingBox: t3 NumPointLists: t4 PointLists: t5 
        IfFail: 
        [|:e| ^error: 'gcacheMultiSimplePolygon:FacetFlags:Facets:BoundingBox:NumPointLists:PointLists: failed: ', e] ).

  gcacheMultiSimplePolygon: t0 FacetFlags: t1 Facets: t2 
    BoundingBox: t3 NumPointLists: t4 PointLists: t5 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_gcache_multi_simple_polygon_GcacheMultiSimplePolygon_FacetFlags_Facets_BoundingBox_NumPointLists_PointLists__glue' 
        ArgCoercions: 'pp ippip' ResultType: 'integer' 
        Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 With: t2 With: t3 
        With: t4 With: t5 IfFail: fb .
    self).


  gcacheMultimarker: t0 Points: t1  = (

       gcacheMultimarker: t0 Points: t1 IfFail: 
        [|:e| ^error: 'gcacheMultimarker:Points: failed: ', e] ).

  gcacheMultimarker: t0 Points: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_gcache_multimarker_GcacheMultimarker_Points__glue' 
        ArgCoercions: 'ppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


  gcacheMultipolyline: t0 BoundingBox: t1 NumPointLists: t2 
    PointLists: t3  = (

       gcacheMultipolyline: t0 BoundingBox: t1 NumPointLists: t2 
        PointLists: t3 IfFail: 
        [|:e| ^error: 'gcacheMultipolyline:BoundingBox:NumPointLists:PointLists: failed: ', e] ).

  gcacheMultipolyline: t0 BoundingBox: t1 NumPointLists: t2 
    PointLists: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_gcache_multipolyline_GcacheMultipolyline_BoundingBox_NumPointLists_PointLists__glue' 
        ArgCoercions: 'pppip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


  gcacheNUBSplineCurve: t0 Curve: t1  = (

       gcacheNUBSplineCurve: t0 Curve: t1 IfFail: 
        [|:e| ^error: 'gcacheNUBSplineCurve:Curve: failed: ', e] ).

  gcacheNUBSplineCurve: t0 Curve: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_gcache_nu_bspline_curve_GcacheNUBSplineCurve_Curve__glue' 
        ArgCoercions: 'ppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


  gcacheNurbsCurve: t0 Curve: t1 Range: t2 ColorSpline: t3  = (

       gcacheNurbsCurve: t0 Curve: t1 Range: t2 ColorSpline: t3 
        IfFail: 
        [|:e| ^error: 'gcacheNurbsCurve:Curve:Range:ColorSpline: failed: ', e] ).

  gcacheNurbsCurve: t0 Curve: t1 Range: t2 ColorSpline: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_gcache_nurbs_curve_GcacheNurbsCurve_Curve_Range_ColorSpline__glue' 
        ArgCoercions: 'ppppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


  gcacheNurbsSurface: t0 Surface: t1 Trimming: t2 Hints: t3 
    ColorSpline: t4 DataSplines: t5  = (

       gcacheNurbsSurface: t0 Surface: t1 Trimming: t2 Hints: t3 
        ColorSpline: t4 DataSplines: t5 IfFail: 
        [|:e| ^error: 'gcacheNurbsSurface:Surface:Trimming:Hints:ColorSpline:DataSplines: failed: ', e] ).

  gcacheNurbsSurface: t0 Surface: t1 Trimming: t2 Hints: t3 
    ColorSpline: t4 DataSplines: t5 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_gcache_nurbs_surface_GcacheNurbsSurface_Surface_Trimming_Hints_ColorSpline_DataSplines__glue' 
        ArgCoercions: 'ppppppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


  gcachePolygon: t0 FacetType: t1 Facets: t2 BoundingBox: t3 
    NumPointLists: t4 PointLists: t5  = (

       gcachePolygon: t0 FacetType: t1 Facets: t2 BoundingBox: t3 
        NumPointLists: t4 PointLists: t5 IfFail: 
        [|:e| ^error: 'gcachePolygon:FacetType:Facets:BoundingBox:NumPointLists:PointLists: failed: ', e] ).

  gcachePolygon: t0 FacetType: t1 Facets: t2 BoundingBox: t3 
    NumPointLists: t4 PointLists: t5 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_gcache_polygon_GcachePolygon_FacetType_Facets_BoundingBox_NumPointLists_PointLists__glue' 
        ArgCoercions: 'pp ippip' ResultType: 'integer' 
        Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 With: t2 With: t3 
        With: t4 With: t5 IfFail: fb .
    self).


  gcacheStrokeText: t0 String: t1 Pos: t2 Dir: t3  = (

       gcacheStrokeText: t0 String: t1 Pos: t2 Dir: t3 IfFail: 
        [|:e| ^error: 'gcacheStrokeText:String:Pos:Dir: failed: ', e] ).

  gcacheStrokeText: t0 String: t1 Pos: t2 Dir: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_gcache_stroke_text_GcacheStrokeText_String_Pos_Dir__glue' 
        ArgCoercions: 'pp ipp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 With: t2 With: t3 
        IfFail: fb .
    self).


  gcacheTriangleStrip: t0 Facets: t1 Points: t2  = (

       gcacheTriangleStrip: t0 Facets: t1 Points: t2 IfFail: 
        [|:e| ^error: 'gcacheTriangleStrip:Facets:Points: failed: ', e] ).

  gcacheTriangleStrip: t0 Facets: t1 Points: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_gcache_triangle_strip_GcacheTriangleStrip_Facets_Points__glue' 
        ArgCoercions: 'pppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


  gcacheAnnotationText: t0 String: t1 Pos: t2 Dir: t3  = (

       gcacheAnnotationText: t0 String: t1 Pos: t2 Dir: t3 IfFail: 
        [|:e| ^error: 'gcacheAnnotationText:String:Pos:Dir: failed: ', e] ).

  gcacheAnnotationText: t0 String: t1 Pos: t2 Dir: t3 IfFail: 
    fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_gcache_annotation_text_GcacheAnnotationText_String_Pos_Dir__glue' 
        ArgCoercions: 'pp ipp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 With: t2 With: t3 
        IfFail: fb .
    self).


  gcacheMultiarc: t0 Arcs: t1  = (

       gcacheMultiarc: t0 Arcs: t1 IfFail: 
        [|:e| ^error: 'gcacheMultiarc:Arcs: failed: ', e] ).

  gcacheMultiarc: t0 Arcs: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_gcache_multiarc_GcacheMultiarc_Arcs__glue' 
        ArgCoercions: 'ppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


  gcacheMulticircle: t0 Circles: t1  = (

       gcacheMulticircle: t0 Circles: t1 IfFail: 
        [|:e| ^error: 'gcacheMulticircle:Circles: failed: ', e] ).

  gcacheMulticircle: t0 Circles: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_gcache_multicircle_GcacheMulticircle_Circles__glue' 
        ArgCoercions: 'ppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


  gcacheMultirectangle: t0 Rectangles: t1  = (

       gcacheMultirectangle: t0 Rectangles: t1 IfFail: 
        [|:e| ^error: 'gcacheMultirectangle:Rectangles: failed: ', e] ).

  gcacheMultirectangle: t0 Rectangles: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_gcache_multirectangle_GcacheMultirectangle_Rectangles__glue' 
        ArgCoercions: 'ppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


  gcacheQuadrilateralMesh: t0 Rows: t1 Columns: t2 Facets: t3 
    Points: t4  = (

       gcacheQuadrilateralMesh: t0 Rows: t1 Columns: t2 Facets: t3 
        Points: t4 IfFail: 
        [|:e| ^error: 'gcacheQuadrilateralMesh:Rows:Columns:Facets:Points: failed: ', e] ).

  gcacheQuadrilateralMesh: t0 Rows: t1 Columns: t2 Facets: t3 
    Points: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_gcache_quadrilateral_mesh_GcacheQuadrilateralMesh_Rows_Columns_Facets_Points__glue' 
        ArgCoercions: 'ppiipp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  gcacheTriangleList: t0 Facets: t1 Points: t2 Flags: t3  = (

       gcacheTriangleList: t0 Facets: t1 Points: t2 Flags: t3 
        IfFail: 
        [|:e| ^error: 'gcacheTriangleList:Facets:Points:Flags: failed: ', e] ).

  gcacheTriangleList: t0 Facets: t1 Points: t2 Flags: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_gcache_triangle_list_GcacheTriangleList_Facets_Points_Flags__glue' 
        ArgCoercions: 'pppp i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


  gcacheImage: t0 Pos: t1 BoundingBox: t2 SrcRaster: t3  = (

       gcacheImage: t0 Pos: t1 BoundingBox: t2 SrcRaster: t3 
        IfFail: 
        [|:e| ^error: 'gcacheImage:Pos:BoundingBox:SrcRaster: failed: ', e] ).

  gcacheImage: t0 Pos: t1 BoundingBox: t2 SrcRaster: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_gcache_image_GcacheImage_Pos_BoundingBox_SrcRaster__glue' 
        ArgCoercions: 'ppppp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


" texture operators  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  mipmapTextureBuild: t0 Ubounds: t1 Vbounds: t2  = (

       mipmapTextureBuild: t0 Ubounds: t1 Vbounds: t2 IfFail: 
        [|:e| ^error: 'mipmapTextureBuild:Ubounds:Vbounds: failed: ', e] ).

  mipmapTextureBuild: t0 Ubounds: t1 Vbounds: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_mipmap_texture_build_MipmapTextureBuild_Ubounds_Vbounds__glue' 
        ArgCoercions: 'pp i i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 With: t2 With: 0 
        IfFail: fb .
    self).


	}
| )

traits xgl raw xWindow _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_x_window_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl xWindow deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_x_window_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilXWindow = (

       nilXWindowIfFail: [|:e| ^error: 'nilXWindow failed: ', e] ).

  nilXWindowIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilXWindow_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl xWindow deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_x_window_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl xWindow deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_x_window_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  x_display = (

       x_displayIfFail: [|:e| ^error: 'x_display failed: ', e] ).

  x_displayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_X_window_X_display_X_display_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xlib display deadCopy IfFail: fb ).


  x_display: t0  = (

       x_display: t0 IfFail: 
        [|:e| ^error: 'x_display: failed: ', e] ).

  x_display: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_X_window_X_display_X_display__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x_screen = (

       x_screenIfFail: [|:e| ^error: 'x_screen failed: ', e] ).

  x_screenIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_X_window_X_screen_X_screen_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x_screen: t0  = (

       x_screen: t0 IfFail: [|:e| ^error: 'x_screen: failed: ', e] ).

  x_screen: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_X_window_X_screen_X_screen__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x_window = (

       x_windowIfFail: [|:e| ^error: 'x_window failed: ', e] ).

  x_windowIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_X_window_X_window_X_window_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xlib window deadCopy IfFail: fb ).


  x_window: t0  = (

       x_window: t0 IfFail: [|:e| ^error: 'x_window: failed: ', e] ).

  x_window: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_X_window_X_window_X_window__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_X_display: t0 X_screen: t1 X_window: t2  = (

       set_X_display: t0 X_screen: t1 X_window: t2 IfFail: 
        [|:e| ^error: 'set_X_display:X_screen:X_window: failed: ', e] ).

  set_X_display: t0 X_screen: t1 X_window: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_x_window_set_Set_X_display_X_screen_X_window__glue' 
        ArgCoercions: 'ppip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw arcAd3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_ad3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl arcAd3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_ad3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilArcAd3d = (

       nilArcAd3dIfFail: [|:e| ^error: 'nilArcAd3d failed: ', e] ).

  nilArcAd3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilArcAd3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl arcAd3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_ad3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl arcAd3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_ad3d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  center = (

       centerIfFail: [|:e| ^error: 'center failed: ', e] ).

  centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_ad3d_center_Center_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagD3d deadCopy IfFail: fb ).


  center: t0  = (

       center: t0 IfFail: [|:e| ^error: 'center: failed: ', e] ).

  center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_ad3d_center_Center__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  radius = (

       radiusIfFail: [|:e| ^error: 'radius failed: ', e] ).

  radiusIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_ad3d_radius_Radius_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  radius: t0  = (

       radius: t0 IfFail: [|:e| ^error: 'radius: failed: ', e] ).

  radius: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_ad3d_radius_Radius__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  start_angle = (

       start_angleIfFail: [|:e| ^error: 'start_angle failed: ', e] ).

  start_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_ad3d_start_angle_Start_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  start_angle: t0  = (

       start_angle: t0 IfFail: 
        [|:e| ^error: 'start_angle: failed: ', e] ).

  start_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_ad3d_start_angle_Start_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  stop_angle = (

       stop_angleIfFail: [|:e| ^error: 'stop_angle failed: ', e] ).

  stop_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_ad3d_stop_angle_Stop_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  stop_angle: t0  = (

       stop_angle: t0 IfFail: 
        [|:e| ^error: 'stop_angle: failed: ', e] ).

  stop_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_ad3d_stop_angle_Stop_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Center: t0 Radius: t1 Start_angle: t2 Stop_angle: t3  = (

       set_Center: t0 Radius: t1 Start_angle: t2 Stop_angle: t3 
        IfFail: 
        [|:e| ^error: 'set_Center:Radius:Start_angle:Stop_angle: failed: ', e] ).

  set_Center: t0 Radius: t1 Start_angle: t2 Stop_angle: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_arc_ad3d_set_Set_Center_Radius_Start_angle_Stop_angle__glue' 
        ArgCoercions: 'ppfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw arcAf3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_af3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl arcAf3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_af3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilArcAf3d = (

       nilArcAf3dIfFail: [|:e| ^error: 'nilArcAf3d failed: ', e] ).

  nilArcAf3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilArcAf3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl arcAf3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_af3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl arcAf3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_af3d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  center = (

       centerIfFail: [|:e| ^error: 'center failed: ', e] ).

  centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_af3d_center_Center_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagF3d deadCopy IfFail: fb ).


  center: t0  = (

       center: t0 IfFail: [|:e| ^error: 'center: failed: ', e] ).

  center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_af3d_center_Center__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  radius = (

       radiusIfFail: [|:e| ^error: 'radius failed: ', e] ).

  radiusIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_af3d_radius_Radius_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  radius: t0  = (

       radius: t0 IfFail: [|:e| ^error: 'radius: failed: ', e] ).

  radius: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_af3d_radius_Radius__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  start_angle = (

       start_angleIfFail: [|:e| ^error: 'start_angle failed: ', e] ).

  start_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_af3d_start_angle_Start_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  start_angle: t0  = (

       start_angle: t0 IfFail: 
        [|:e| ^error: 'start_angle: failed: ', e] ).

  start_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_af3d_start_angle_Start_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  stop_angle = (

       stop_angleIfFail: [|:e| ^error: 'stop_angle failed: ', e] ).

  stop_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_af3d_stop_angle_Stop_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  stop_angle: t0  = (

       stop_angle: t0 IfFail: 
        [|:e| ^error: 'stop_angle: failed: ', e] ).

  stop_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_af3d_stop_angle_Stop_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Center: t0 Radius: t1 Start_angle: t2 Stop_angle: t3  = (

       set_Center: t0 Radius: t1 Start_angle: t2 Stop_angle: t3 
        IfFail: 
        [|:e| ^error: 'set_Center:Radius:Start_angle:Stop_angle: failed: ', e] ).

  set_Center: t0 Radius: t1 Start_angle: t2 Stop_angle: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_arc_af3d_set_Set_Center_Radius_Start_angle_Stop_angle__glue' 
        ArgCoercions: 'ppfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw arcD2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_d2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl arcD2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_d2d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilArcD2d = (

       nilArcD2dIfFail: [|:e| ^error: 'nilArcD2d failed: ', e] ).

  nilArcD2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilArcD2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl arcD2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_d2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl arcD2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_d2d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  center = (

       centerIfFail: [|:e| ^error: 'center failed: ', e] ).

  centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_d2d_center_Center_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagD2d deadCopy IfFail: fb ).


  center: t0  = (

       center: t0 IfFail: [|:e| ^error: 'center: failed: ', e] ).

  center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_d2d_center_Center__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  radius = (

       radiusIfFail: [|:e| ^error: 'radius failed: ', e] ).

  radiusIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_d2d_radius_Radius_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  radius: t0  = (

       radius: t0 IfFail: [|:e| ^error: 'radius: failed: ', e] ).

  radius: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_d2d_radius_Radius__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  start_angle = (

       start_angleIfFail: [|:e| ^error: 'start_angle failed: ', e] ).

  start_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_d2d_start_angle_Start_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  start_angle: t0  = (

       start_angle: t0 IfFail: 
        [|:e| ^error: 'start_angle: failed: ', e] ).

  start_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_d2d_start_angle_Start_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  stop_angle = (

       stop_angleIfFail: [|:e| ^error: 'stop_angle failed: ', e] ).

  stop_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_d2d_stop_angle_Stop_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  stop_angle: t0  = (

       stop_angle: t0 IfFail: 
        [|:e| ^error: 'stop_angle: failed: ', e] ).

  stop_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_d2d_stop_angle_Stop_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Center: t0 Radius: t1 Start_angle: t2 Stop_angle: t3  = (

       set_Center: t0 Radius: t1 Start_angle: t2 Stop_angle: t3 
        IfFail: 
        [|:e| ^error: 'set_Center:Radius:Start_angle:Stop_angle: failed: ', e] ).

  set_Center: t0 Radius: t1 Start_angle: t2 Stop_angle: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_arc_d2d_set_Set_Center_Radius_Start_angle_Stop_angle__glue' 
        ArgCoercions: 'ppfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw arcD3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_d3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl arcD3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_d3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilArcD3d = (

       nilArcD3dIfFail: [|:e| ^error: 'nilArcD3d failed: ', e] ).

  nilArcD3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilArcD3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl arcD3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_d3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl arcD3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_d3d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  center = (

       centerIfFail: [|:e| ^error: 'center failed: ', e] ).

  centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_d3d_center_Center_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagD3d deadCopy IfFail: fb ).


  center: t0  = (

       center: t0 IfFail: [|:e| ^error: 'center: failed: ', e] ).

  center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_d3d_center_Center__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  dir = (

       dirIfFail: [|:e| ^error: 'dir failed: ', e] ).

  dirIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_d3d_dir_Dir_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptD3d deadCopy IfFail: fb ).


  dir_normal = (

       dir_normalIfFail: [|:e| ^error: 'dir_normal failed: ', e] ).

  dir_normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_d3d_dir_normal_Dir_normal_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  dir_normal: t0  = (

       dir_normal: t0 IfFail: 
        [|:e| ^error: 'dir_normal: failed: ', e] ).

  dir_normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_d3d_dir_normal_Dir_normal__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  dir_normalized = (

       dir_normalizedIfFail: 
        [|:e| ^error: 'dir_normalized failed: ', e] ).

  dir_normalizedIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_d3d_dir_normalized_Dir_normalized_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  dir_normalized: t0  = (

       dir_normalized: t0 IfFail: 
        [|:e| ^error: 'dir_normalized: failed: ', e] ).

  dir_normalized: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_d3d_dir_normalized_Dir_normalized__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  radius = (

       radiusIfFail: [|:e| ^error: 'radius failed: ', e] ).

  radiusIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_d3d_radius_Radius_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  radius: t0  = (

       radius: t0 IfFail: [|:e| ^error: 'radius: failed: ', e] ).

  radius: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_d3d_radius_Radius__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  start_angle = (

       start_angleIfFail: [|:e| ^error: 'start_angle failed: ', e] ).

  start_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_d3d_start_angle_Start_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  start_angle: t0  = (

       start_angle: t0 IfFail: 
        [|:e| ^error: 'start_angle: failed: ', e] ).

  start_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_d3d_start_angle_Start_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  stop_angle = (

       stop_angleIfFail: [|:e| ^error: 'stop_angle failed: ', e] ).

  stop_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_d3d_stop_angle_Stop_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  stop_angle: t0  = (

       stop_angle: t0 IfFail: 
        [|:e| ^error: 'stop_angle: failed: ', e] ).

  stop_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_d3d_stop_angle_Stop_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Center: t0 Dir_normal: t1 Dir_normalized: t2 Radius: t3 
    Start_angle: t4 Stop_angle: t5  = (

       set_Center: t0 Dir_normal: t1 Dir_normalized: t2 Radius: t3 
        Start_angle: t4 Stop_angle: t5 IfFail: 
        [|:e| ^error: 'set_Center:Dir_normal:Dir_normalized:Radius:Start_angle:Stop_angle: failed: ', e] ).

  set_Center: t0 Dir_normal: t1 Dir_normalized: t2 Radius: t3 
    Start_angle: t4 Stop_angle: t5 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_arc_d3d_set_Set_Center_Dir_normal_Dir_normalized_Radius_Start_angle_Stop_angle__glue' 
        ArgCoercions: 'pp  fff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


	}
| )

traits xgl raw arcF2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_f2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl arcF2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_f2d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilArcF2d = (

       nilArcF2dIfFail: [|:e| ^error: 'nilArcF2d failed: ', e] ).

  nilArcF2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilArcF2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl arcF2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_f2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl arcF2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_f2d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  center = (

       centerIfFail: [|:e| ^error: 'center failed: ', e] ).

  centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_f2d_center_Center_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagF2d deadCopy IfFail: fb ).


  center: t0  = (

       center: t0 IfFail: [|:e| ^error: 'center: failed: ', e] ).

  center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_f2d_center_Center__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  radius = (

       radiusIfFail: [|:e| ^error: 'radius failed: ', e] ).

  radiusIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_f2d_radius_Radius_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  radius: t0  = (

       radius: t0 IfFail: [|:e| ^error: 'radius: failed: ', e] ).

  radius: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_f2d_radius_Radius__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  start_angle = (

       start_angleIfFail: [|:e| ^error: 'start_angle failed: ', e] ).

  start_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_f2d_start_angle_Start_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  start_angle: t0  = (

       start_angle: t0 IfFail: 
        [|:e| ^error: 'start_angle: failed: ', e] ).

  start_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_f2d_start_angle_Start_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  stop_angle = (

       stop_angleIfFail: [|:e| ^error: 'stop_angle failed: ', e] ).

  stop_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_f2d_stop_angle_Stop_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  stop_angle: t0  = (

       stop_angle: t0 IfFail: 
        [|:e| ^error: 'stop_angle: failed: ', e] ).

  stop_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_f2d_stop_angle_Stop_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Center: t0 Radius: t1 Start_angle: t2 Stop_angle: t3  = (

       set_Center: t0 Radius: t1 Start_angle: t2 Stop_angle: t3 
        IfFail: 
        [|:e| ^error: 'set_Center:Radius:Start_angle:Stop_angle: failed: ', e] ).

  set_Center: t0 Radius: t1 Start_angle: t2 Stop_angle: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_arc_f2d_set_Set_Center_Radius_Start_angle_Stop_angle__glue' 
        ArgCoercions: 'ppfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw arcF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_f3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl arcF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_f3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilArcF3d = (

       nilArcF3dIfFail: [|:e| ^error: 'nilArcF3d failed: ', e] ).

  nilArcF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilArcF3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl arcF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_f3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl arcF3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_f3d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  center = (

       centerIfFail: [|:e| ^error: 'center failed: ', e] ).

  centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_f3d_center_Center_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagF3d deadCopy IfFail: fb ).


  center: t0  = (

       center: t0 IfFail: [|:e| ^error: 'center: failed: ', e] ).

  center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_f3d_center_Center__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  dir = (

       dirIfFail: [|:e| ^error: 'dir failed: ', e] ).

  dirIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_f3d_dir_Dir_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  dir_normal = (

       dir_normalIfFail: [|:e| ^error: 'dir_normal failed: ', e] ).

  dir_normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_f3d_dir_normal_Dir_normal_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  dir_normal: t0  = (

       dir_normal: t0 IfFail: 
        [|:e| ^error: 'dir_normal: failed: ', e] ).

  dir_normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_f3d_dir_normal_Dir_normal__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  dir_normalized = (

       dir_normalizedIfFail: 
        [|:e| ^error: 'dir_normalized failed: ', e] ).

  dir_normalizedIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_f3d_dir_normalized_Dir_normalized_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  dir_normalized: t0  = (

       dir_normalized: t0 IfFail: 
        [|:e| ^error: 'dir_normalized: failed: ', e] ).

  dir_normalized: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_f3d_dir_normalized_Dir_normalized__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  radius = (

       radiusIfFail: [|:e| ^error: 'radius failed: ', e] ).

  radiusIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_f3d_radius_Radius_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  radius: t0  = (

       radius: t0 IfFail: [|:e| ^error: 'radius: failed: ', e] ).

  radius: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_f3d_radius_Radius__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  start_angle = (

       start_angleIfFail: [|:e| ^error: 'start_angle failed: ', e] ).

  start_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_f3d_start_angle_Start_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  start_angle: t0  = (

       start_angle: t0 IfFail: 
        [|:e| ^error: 'start_angle: failed: ', e] ).

  start_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_f3d_start_angle_Start_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  stop_angle = (

       stop_angleIfFail: [|:e| ^error: 'stop_angle failed: ', e] ).

  stop_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_f3d_stop_angle_Stop_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  stop_angle: t0  = (

       stop_angle: t0 IfFail: 
        [|:e| ^error: 'stop_angle: failed: ', e] ).

  stop_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_f3d_stop_angle_Stop_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Center: t0 Dir_normal: t1 Dir_normalized: t2 Radius: t3 
    Start_angle: t4 Stop_angle: t5  = (

       set_Center: t0 Dir_normal: t1 Dir_normalized: t2 Radius: t3 
        Start_angle: t4 Stop_angle: t5 IfFail: 
        [|:e| ^error: 'set_Center:Dir_normal:Dir_normalized:Radius:Start_angle:Stop_angle: failed: ', e] ).

  set_Center: t0 Dir_normal: t1 Dir_normalized: t2 Radius: t3 
    Start_angle: t4 Stop_angle: t5 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_arc_f3d_set_Set_Center_Dir_normal_Dir_normalized_Radius_Start_angle_Stop_angle__glue' 
        ArgCoercions: 'pp  fff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


	}
| )

traits xgl raw arcI2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_i2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl arcI2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_i2d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilArcI2d = (

       nilArcI2dIfFail: [|:e| ^error: 'nilArcI2d failed: ', e] ).

  nilArcI2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilArcI2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl arcI2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_i2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl arcI2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_i2d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  center = (

       centerIfFail: [|:e| ^error: 'center failed: ', e] ).

  centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_i2d_center_Center_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagI2d deadCopy IfFail: fb ).


  center: t0  = (

       center: t0 IfFail: [|:e| ^error: 'center: failed: ', e] ).

  center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_i2d_center_Center__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  radius = (

       radiusIfFail: [|:e| ^error: 'radius failed: ', e] ).

  radiusIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_i2d_radius_Radius_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  radius: t0  = (

       radius: t0 IfFail: [|:e| ^error: 'radius: failed: ', e] ).

  radius: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_i2d_radius_Radius__glue' ArgCoercions: 
        'pi' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  start_angle = (

       start_angleIfFail: [|:e| ^error: 'start_angle failed: ', e] ).

  start_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_i2d_start_angle_Start_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  start_angle: t0  = (

       start_angle: t0 IfFail: 
        [|:e| ^error: 'start_angle: failed: ', e] ).

  start_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_i2d_start_angle_Start_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  stop_angle = (

       stop_angleIfFail: [|:e| ^error: 'stop_angle failed: ', e] ).

  stop_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_i2d_stop_angle_Stop_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  stop_angle: t0  = (

       stop_angle: t0 IfFail: 
        [|:e| ^error: 'stop_angle: failed: ', e] ).

  stop_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_i2d_stop_angle_Stop_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Center: t0 Radius: t1 Start_angle: t2 Stop_angle: t3  = (

       set_Center: t0 Radius: t1 Start_angle: t2 Stop_angle: t3 
        IfFail: 
        [|:e| ^error: 'set_Center:Radius:Start_angle:Stop_angle: failed: ', e] ).

  set_Center: t0 Radius: t1 Start_angle: t2 Stop_angle: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_arc_i2d_set_Set_Center_Radius_Start_angle_Stop_angle__glue' 
        ArgCoercions: 'ppiff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw arcList _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_list_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl arcList deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_list_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilArcList = (

       nilArcListIfFail: [|:e| ^error: 'nilArcList failed: ', e] ).

  nilArcListIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilArcList_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl arcList deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_list_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl arcList deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_list_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  arcs_ad3d = (

       arcs_ad3dIfFail: [|:e| ^error: 'arcs_ad3d failed: ', e] ).

  arcs_ad3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_list_arcs_ad3d_Arcs_ad3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl arcAd3d deadCopy IfFail: fb ).


  arcs_ad3d: t0  = (

       arcs_ad3d: t0 IfFail: 
        [|:e| ^error: 'arcs_ad3d: failed: ', e] ).

  arcs_ad3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_list_arcs_ad3d_Arcs_ad3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  arcs_af3d = (

       arcs_af3dIfFail: [|:e| ^error: 'arcs_af3d failed: ', e] ).

  arcs_af3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_list_arcs_af3d_Arcs_af3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl arcAf3d deadCopy IfFail: fb ).


  arcs_af3d: t0  = (

       arcs_af3d: t0 IfFail: 
        [|:e| ^error: 'arcs_af3d: failed: ', e] ).

  arcs_af3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_list_arcs_af3d_Arcs_af3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  arcs_d2d = (

       arcs_d2dIfFail: [|:e| ^error: 'arcs_d2d failed: ', e] ).

  arcs_d2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_list_arcs_d2d_Arcs_d2d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl arcD2d deadCopy IfFail: fb ).


  arcs_d2d: t0  = (

       arcs_d2d: t0 IfFail: [|:e| ^error: 'arcs_d2d: failed: ', e] ).

  arcs_d2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_list_arcs_d2d_Arcs_d2d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  arcs_d3d = (

       arcs_d3dIfFail: [|:e| ^error: 'arcs_d3d failed: ', e] ).

  arcs_d3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_list_arcs_d3d_Arcs_d3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl arcD3d deadCopy IfFail: fb ).


  arcs_d3d: t0  = (

       arcs_d3d: t0 IfFail: [|:e| ^error: 'arcs_d3d: failed: ', e] ).

  arcs_d3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_list_arcs_d3d_Arcs_d3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  arcs_f2d = (

       arcs_f2dIfFail: [|:e| ^error: 'arcs_f2d failed: ', e] ).

  arcs_f2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_list_arcs_f2d_Arcs_f2d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl arcF2d deadCopy IfFail: fb ).


  arcs_f2d: t0  = (

       arcs_f2d: t0 IfFail: [|:e| ^error: 'arcs_f2d: failed: ', e] ).

  arcs_f2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_list_arcs_f2d_Arcs_f2d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  arcs_f3d = (

       arcs_f3dIfFail: [|:e| ^error: 'arcs_f3d failed: ', e] ).

  arcs_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_list_arcs_f3d_Arcs_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl arcF3d deadCopy IfFail: fb ).


  arcs_f3d: t0  = (

       arcs_f3d: t0 IfFail: [|:e| ^error: 'arcs_f3d: failed: ', e] ).

  arcs_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_list_arcs_f3d_Arcs_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  arcs_i2d = (

       arcs_i2dIfFail: [|:e| ^error: 'arcs_i2d failed: ', e] ).

  arcs_i2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_list_arcs_i2d_Arcs_i2d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl arcI2d deadCopy IfFail: fb ).


  arcs_i2d: t0  = (

       arcs_i2d: t0 IfFail: [|:e| ^error: 'arcs_i2d: failed: ', e] ).

  arcs_i2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_arc_list_arcs_i2d_Arcs_i2d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  bbox = (

       bboxIfFail: [|:e| ^error: 'bbox failed: ', e] ).

  bboxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_list_bbox_Bbox_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl bbox deadCopy IfFail: fb ).


  bbox: t0  = (

       bbox: t0 IfFail: [|:e| ^error: 'bbox: failed: ', e] ).

  bbox: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_list_bbox_Bbox__glue' ArgCoercions: 'pp' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_arcs = (

       num_arcsIfFail: [|:e| ^error: 'num_arcs failed: ', e] ).

  num_arcsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_list_num_arcs_Num_arcs_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_arcs: t0  = (

       num_arcs: t0 IfFail: [|:e| ^error: 'num_arcs: failed: ', e] ).

  num_arcs: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_list_num_arcs_Num_arcs__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  type = (

       typeIfFail: [|:e| ^error: 'type failed: ', e] ).

  typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_list_type_Type_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  type: t0  = (

       type: t0 IfFail: [|:e| ^error: 'type: failed: ', e] ).

  type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_arc_list_type_Type__glue' ArgCoercions: 
        'p i' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Arcs_ad3d: t0 Bbox: t1 Num_arcs: t2 Type: t3  = (

       set_Arcs_ad3d: t0 Bbox: t1 Num_arcs: t2 Type: t3 IfFail: 
        [|:e| ^error: 'set_Arcs_ad3d:Bbox:Num_arcs:Type: failed: ', e] ).

  set_Arcs_ad3d: t0 Bbox: t1 Num_arcs: t2 Type: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_arc_list_set_Set_Arcs_ad3d_Bbox_Num_arcs_Type__glue' 
        ArgCoercions: 'pppi i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


  set_Arcs_af3d: t0 Bbox: t1 Num_arcs: t2 Type: t3  = (

       set_Arcs_af3d: t0 Bbox: t1 Num_arcs: t2 Type: t3 IfFail: 
        [|:e| ^error: 'set_Arcs_af3d:Bbox:Num_arcs:Type: failed: ', e] ).

  set_Arcs_af3d: t0 Bbox: t1 Num_arcs: t2 Type: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_arc_list_set_Set_Arcs_af3d_Bbox_Num_arcs_Type__glue' 
        ArgCoercions: 'pppi i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


  set_Arcs_d2d: t0 Bbox: t1 Num_arcs: t2 Type: t3  = (

       set_Arcs_d2d: t0 Bbox: t1 Num_arcs: t2 Type: t3 IfFail: 
        [|:e| ^error: 'set_Arcs_d2d:Bbox:Num_arcs:Type: failed: ', e] ).

  set_Arcs_d2d: t0 Bbox: t1 Num_arcs: t2 Type: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_arc_list_set_Set_Arcs_d2d_Bbox_Num_arcs_Type__glue' 
        ArgCoercions: 'pppi i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


  set_Arcs_d3d: t0 Bbox: t1 Num_arcs: t2 Type: t3  = (

       set_Arcs_d3d: t0 Bbox: t1 Num_arcs: t2 Type: t3 IfFail: 
        [|:e| ^error: 'set_Arcs_d3d:Bbox:Num_arcs:Type: failed: ', e] ).

  set_Arcs_d3d: t0 Bbox: t1 Num_arcs: t2 Type: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_arc_list_set_Set_Arcs_d3d_Bbox_Num_arcs_Type__glue' 
        ArgCoercions: 'pppi i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


  set_Arcs_f2d: t0 Bbox: t1 Num_arcs: t2 Type: t3  = (

       set_Arcs_f2d: t0 Bbox: t1 Num_arcs: t2 Type: t3 IfFail: 
        [|:e| ^error: 'set_Arcs_f2d:Bbox:Num_arcs:Type: failed: ', e] ).

  set_Arcs_f2d: t0 Bbox: t1 Num_arcs: t2 Type: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_arc_list_set_Set_Arcs_f2d_Bbox_Num_arcs_Type__glue' 
        ArgCoercions: 'pppi i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


  set_Arcs_f3d: t0 Bbox: t1 Num_arcs: t2 Type: t3  = (

       set_Arcs_f3d: t0 Bbox: t1 Num_arcs: t2 Type: t3 IfFail: 
        [|:e| ^error: 'set_Arcs_f3d:Bbox:Num_arcs:Type: failed: ', e] ).

  set_Arcs_f3d: t0 Bbox: t1 Num_arcs: t2 Type: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_arc_list_set_Set_Arcs_f3d_Bbox_Num_arcs_Type__glue' 
        ArgCoercions: 'pppi i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


  set_Arcs_i2d: t0 Bbox: t1 Num_arcs: t2 Type: t3  = (

       set_Arcs_i2d: t0 Bbox: t1 Num_arcs: t2 Type: t3 IfFail: 
        [|:e| ^error: 'set_Arcs_i2d:Bbox:Num_arcs:Type: failed: ', e] ).

  set_Arcs_i2d: t0 Bbox: t1 Num_arcs: t2 Type: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_arc_list_set_Set_Arcs_i2d_Bbox_Num_arcs_Type__glue' 
        ArgCoercions: 'pppi i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


	}
| )

traits xgl raw bbox _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl bbox deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_delete_Delete_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilBbox = (

       nilBboxIfFail: [|:e| ^error: 'nilBbox failed: ', e] ).

  nilBboxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilBbox_glue' ArgCoercions: ' ' ResultType: 
        'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl bbox deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl bbox deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  bbox_type = (

       bbox_typeIfFail: [|:e| ^error: 'bbox_type failed: ', e] ).

  bbox_typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bbox_bbox_type_Bbox_type_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  bbox_type: t0  = (

       bbox_type: t0 IfFail: 
        [|:e| ^error: 'bbox_type: failed: ', e] ).

  bbox_type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bbox_bbox_type_Bbox_type__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  box_f2d = (

       box_f2dIfFail: [|:e| ^error: 'box_f2d failed: ', e] ).

  box_f2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_box_f2d_Box_f2d_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl boundsF2d deadCopy IfFail: fb ).


  box_f2d: t0  = (

       box_f2d: t0 IfFail: [|:e| ^error: 'box_f2d: failed: ', e] ).

  box_f2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_box_f2d_Box_f2d__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  box_f3d = (

       box_f3dIfFail: [|:e| ^error: 'box_f3d failed: ', e] ).

  box_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_box_f3d_Box_f3d_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl boundsF3d deadCopy IfFail: fb ).


  box_f3d: t0  = (

       box_f3d: t0 IfFail: [|:e| ^error: 'box_f3d: failed: ', e] ).

  box_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_box_f3d_Box_f3d__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  box_i2d = (

       box_i2dIfFail: [|:e| ^error: 'box_i2d failed: ', e] ).

  box_i2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_box_i2d_Box_i2d_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl boundsI2d deadCopy IfFail: fb ).


  box_i2d: t0  = (

       box_i2d: t0 IfFail: [|:e| ^error: 'box_i2d: failed: ', e] ).

  box_i2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_box_i2d_Box_i2d__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Bbox_type: t0 Box_f2d: t1  = (

       set_Bbox_type: t0 Box_f2d: t1 IfFail: 
        [|:e| ^error: 'set_Bbox_type:Box_f2d: failed: ', e] ).

  set_Bbox_type: t0 Box_f2d: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_set_Set_Bbox_type_Box_f2d__glue' 
        ArgCoercions: 'p ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 IfFail: fb .
    self).


  set_Bbox_type: t0 Box_f3d: t1  = (

       set_Bbox_type: t0 Box_f3d: t1 IfFail: 
        [|:e| ^error: 'set_Bbox_type:Box_f3d: failed: ', e] ).

  set_Bbox_type: t0 Box_f3d: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_set_Set_Bbox_type_Box_f3d__glue' 
        ArgCoercions: 'p ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 IfFail: fb .
    self).


  set_Bbox_type: t0 Box_i2d: t1  = (

       set_Bbox_type: t0 Box_i2d: t1 IfFail: 
        [|:e| ^error: 'set_Bbox_type:Box_i2d: failed: ', e] ).

  set_Bbox_type: t0 Box_i2d: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_set_Set_Bbox_type_Box_i2d__glue' 
        ArgCoercions: 'p ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 IfFail: fb .
    self).


	}
| )

traits xgl raw bboxD2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_d2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl bboxD2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_d2d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilBboxD2d = (

       nilBboxD2dIfFail: [|:e| ^error: 'nilBboxD2d failed: ', e] ).

  nilBboxD2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilBboxD2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl bboxD2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_d2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl bboxD2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_d2d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  bbox_type = (

       bbox_typeIfFail: [|:e| ^error: 'bbox_type failed: ', e] ).

  bbox_typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bbox_d2d_bbox_type_Bbox_type_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  bbox_type: t0  = (

       bbox_type: t0 IfFail: 
        [|:e| ^error: 'bbox_type: failed: ', e] ).

  bbox_type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bbox_d2d_bbox_type_Bbox_type__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  box_d2d = (

       box_d2dIfFail: [|:e| ^error: 'box_d2d failed: ', e] ).

  box_d2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_d2d_box_d2d_Box_d2d_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl boundsD2d deadCopy IfFail: fb ).


  box_d2d: t0  = (

       box_d2d: t0 IfFail: [|:e| ^error: 'box_d2d: failed: ', e] ).

  box_d2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_d2d_box_d2d_Box_d2d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Bbox_type: t0 Box_d2d: t1  = (

       set_Bbox_type: t0 Box_d2d: t1 IfFail: 
        [|:e| ^error: 'set_Bbox_type:Box_d2d: failed: ', e] ).

  set_Bbox_type: t0 Box_d2d: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_d2d_set_Set_Bbox_type_Box_d2d__glue' 
        ArgCoercions: 'p ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 IfFail: fb .
    self).


	}
| )

traits xgl raw bboxD3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_d3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl bboxD3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_d3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilBboxD3d = (

       nilBboxD3dIfFail: [|:e| ^error: 'nilBboxD3d failed: ', e] ).

  nilBboxD3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilBboxD3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl bboxD3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_d3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl bboxD3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_d3d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  bbox_type = (

       bbox_typeIfFail: [|:e| ^error: 'bbox_type failed: ', e] ).

  bbox_typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bbox_d3d_bbox_type_Bbox_type_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  bbox_type: t0  = (

       bbox_type: t0 IfFail: 
        [|:e| ^error: 'bbox_type: failed: ', e] ).

  bbox_type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bbox_d3d_bbox_type_Bbox_type__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  box_d3d = (

       box_d3dIfFail: [|:e| ^error: 'box_d3d failed: ', e] ).

  box_d3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_d3d_box_d3d_Box_d3d_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl boundsD3d deadCopy IfFail: fb ).


  box_d3d: t0  = (

       box_d3d: t0 IfFail: [|:e| ^error: 'box_d3d: failed: ', e] ).

  box_d3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_d3d_box_d3d_Box_d3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Bbox_type: t0 Box_d3d: t1  = (

       set_Bbox_type: t0 Box_d3d: t1 IfFail: 
        [|:e| ^error: 'set_Bbox_type:Box_d3d: failed: ', e] ).

  set_Bbox_type: t0 Box_d3d: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_d3d_set_Set_Bbox_type_Box_d3d__glue' 
        ArgCoercions: 'p ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 IfFail: fb .
    self).


	}
| )

traits xgl raw bboxF2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_f2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl bboxF2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_f2d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilBboxF2d = (

       nilBboxF2dIfFail: [|:e| ^error: 'nilBboxF2d failed: ', e] ).

  nilBboxF2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilBboxF2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl bboxF2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_f2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl bboxF2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_f2d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  bbox_type = (

       bbox_typeIfFail: [|:e| ^error: 'bbox_type failed: ', e] ).

  bbox_typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bbox_f2d_bbox_type_Bbox_type_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  bbox_type: t0  = (

       bbox_type: t0 IfFail: 
        [|:e| ^error: 'bbox_type: failed: ', e] ).

  bbox_type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bbox_f2d_bbox_type_Bbox_type__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  box_f2d = (

       box_f2dIfFail: [|:e| ^error: 'box_f2d failed: ', e] ).

  box_f2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_f2d_box_f2d_Box_f2d_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl boundsF2d deadCopy IfFail: fb ).


  box_f2d: t0  = (

       box_f2d: t0 IfFail: [|:e| ^error: 'box_f2d: failed: ', e] ).

  box_f2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_f2d_box_f2d_Box_f2d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Bbox_type: t0 Box_f2d: t1  = (

       set_Bbox_type: t0 Box_f2d: t1 IfFail: 
        [|:e| ^error: 'set_Bbox_type:Box_f2d: failed: ', e] ).

  set_Bbox_type: t0 Box_f2d: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_f2d_set_Set_Bbox_type_Box_f2d__glue' 
        ArgCoercions: 'p ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 IfFail: fb .
    self).


	}
| )

traits xgl raw bboxF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_f3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl bboxF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_f3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilBboxF3d = (

       nilBboxF3dIfFail: [|:e| ^error: 'nilBboxF3d failed: ', e] ).

  nilBboxF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilBboxF3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl bboxF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_f3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl bboxF3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_f3d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  bbox_type = (

       bbox_typeIfFail: [|:e| ^error: 'bbox_type failed: ', e] ).

  bbox_typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bbox_f3d_bbox_type_Bbox_type_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  bbox_type: t0  = (

       bbox_type: t0 IfFail: 
        [|:e| ^error: 'bbox_type: failed: ', e] ).

  bbox_type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bbox_f3d_bbox_type_Bbox_type__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  box_f3d = (

       box_f3dIfFail: [|:e| ^error: 'box_f3d failed: ', e] ).

  box_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_f3d_box_f3d_Box_f3d_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl boundsF3d deadCopy IfFail: fb ).


  box_f3d: t0  = (

       box_f3d: t0 IfFail: [|:e| ^error: 'box_f3d: failed: ', e] ).

  box_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_f3d_box_f3d_Box_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Bbox_type: t0 Box_f3d: t1  = (

       set_Bbox_type: t0 Box_f3d: t1 IfFail: 
        [|:e| ^error: 'set_Bbox_type:Box_f3d: failed: ', e] ).

  set_Bbox_type: t0 Box_f3d: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_f3d_set_Set_Bbox_type_Box_f3d__glue' 
        ArgCoercions: 'p ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 IfFail: fb .
    self).


	}
| )

traits xgl raw bboxI2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_i2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl bboxI2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_i2d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilBboxI2d = (

       nilBboxI2dIfFail: [|:e| ^error: 'nilBboxI2d failed: ', e] ).

  nilBboxI2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilBboxI2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl bboxI2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_i2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl bboxI2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_i2d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  bbox_type = (

       bbox_typeIfFail: [|:e| ^error: 'bbox_type failed: ', e] ).

  bbox_typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bbox_i2d_bbox_type_Bbox_type_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  bbox_type: t0  = (

       bbox_type: t0 IfFail: 
        [|:e| ^error: 'bbox_type: failed: ', e] ).

  bbox_type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bbox_i2d_bbox_type_Bbox_type__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  box_i2d = (

       box_i2dIfFail: [|:e| ^error: 'box_i2d failed: ', e] ).

  box_i2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_i2d_box_i2d_Box_i2d_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl boundsI2d deadCopy IfFail: fb ).


  box_i2d: t0  = (

       box_i2d: t0 IfFail: [|:e| ^error: 'box_i2d: failed: ', e] ).

  box_i2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_i2d_box_i2d_Box_i2d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Bbox_type: t0 Box_i2d: t1  = (

       set_Bbox_type: t0 Box_i2d: t1 IfFail: 
        [|:e| ^error: 'set_Bbox_type:Box_i2d: failed: ', e] ).

  set_Bbox_type: t0 Box_i2d: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_i2d_set_Set_Bbox_type_Box_i2d__glue' 
        ArgCoercions: 'p ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 IfFail: fb .
    self).


	}
| )

traits xgl raw bboxStatus _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_status_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl bboxStatus deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_status_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilBboxStatus = (

       nilBboxStatusIfFail: 
        [|:e| ^error: 'nilBboxStatus failed: ', e] ).

  nilBboxStatusIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilBboxStatus_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl bboxStatus deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_status_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl bboxStatus deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_status_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  bbox_type = (

       bbox_typeIfFail: [|:e| ^error: 'bbox_type failed: ', e] ).

  bbox_typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bbox_status_bbox_type_Bbox_type_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  bbox_type: t0  = (

       bbox_type: t0 IfFail: 
        [|:e| ^error: 'bbox_type: failed: ', e] ).

  bbox_type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bbox_status_bbox_type_Bbox_type__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  box_status = (

       box_statusIfFail: [|:e| ^error: 'box_status failed: ', e] ).

  box_statusIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_status_box_status_Box_status_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  box_status: t0  = (

       box_status: t0 IfFail: 
        [|:e| ^error: 'box_status: failed: ', e] ).

  box_status: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bbox_status_box_status_Box_status__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Bbox_type: t0 Box_status: t1  = (

       set_Bbox_type: t0 Box_status: t1 IfFail: 
        [|:e| ^error: 'set_Bbox_type:Box_status: failed: ', e] ).

  set_Bbox_type: t0 Box_status: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_bbox_status_set_Set_Bbox_type_Box_status__glue' 
        ArgCoercions: 'p i i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 With: 0 IfFail: fb .
    self).


	}
| )

traits xgl raw boundsD1d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_d1d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl boundsD1d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_d1d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilBoundsD1d = (

       nilBoundsD1dIfFail: 
        [|:e| ^error: 'nilBoundsD1d failed: ', e] ).

  nilBoundsD1dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilBoundsD1d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl boundsD1d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_d1d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl boundsD1d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_d1d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  bmax = (

       bmaxIfFail: [|:e| ^error: 'bmax failed: ', e] ).

  bmaxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d1d_bmax_Bmax_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  bmax: t0  = (

       bmax: t0 IfFail: [|:e| ^error: 'bmax: failed: ', e] ).

  bmax: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d1d_bmax_Bmax__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  bmin = (

       bminIfFail: [|:e| ^error: 'bmin failed: ', e] ).

  bminIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d1d_bmin_Bmin_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  bmin: t0  = (

       bmin: t0 IfFail: [|:e| ^error: 'bmin: failed: ', e] ).

  bmin: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d1d_bmin_Bmin__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw boundsD2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_d2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl boundsD2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_d2d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilBoundsD2d = (

       nilBoundsD2dIfFail: 
        [|:e| ^error: 'nilBoundsD2d failed: ', e] ).

  nilBoundsD2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilBoundsD2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl boundsD2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_d2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl boundsD2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_d2d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  xmax = (

       xmaxIfFail: [|:e| ^error: 'xmax failed: ', e] ).

  xmaxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d2d_xmax_Xmax_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  xmax: t0  = (

       xmax: t0 IfFail: [|:e| ^error: 'xmax: failed: ', e] ).

  xmax: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d2d_xmax_Xmax__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  xmin = (

       xminIfFail: [|:e| ^error: 'xmin failed: ', e] ).

  xminIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d2d_xmin_Xmin_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  xmin: t0  = (

       xmin: t0 IfFail: [|:e| ^error: 'xmin: failed: ', e] ).

  xmin: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d2d_xmin_Xmin__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  ymax = (

       ymaxIfFail: [|:e| ^error: 'ymax failed: ', e] ).

  ymaxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d2d_ymax_Ymax_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  ymax: t0  = (

       ymax: t0 IfFail: [|:e| ^error: 'ymax: failed: ', e] ).

  ymax: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d2d_ymax_Ymax__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  ymin = (

       yminIfFail: [|:e| ^error: 'ymin failed: ', e] ).

  yminIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d2d_ymin_Ymin_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  ymin: t0  = (

       ymin: t0 IfFail: [|:e| ^error: 'ymin: failed: ', e] ).

  ymin: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d2d_ymin_Ymin__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Xmax: t0 Xmin: t1 Ymax: t2 Ymin: t3  = (

       set_Xmax: t0 Xmin: t1 Ymax: t2 Ymin: t3 IfFail: 
        [|:e| ^error: 'set_Xmax:Xmin:Ymax:Ymin: failed: ', e] ).

  set_Xmax: t0 Xmin: t1 Ymax: t2 Ymin: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_bounds_d2d_set_Set_Xmax_Xmin_Ymax_Ymin__glue' 
        ArgCoercions: 'pffff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw boundsD3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_d3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl boundsD3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_d3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilBoundsD3d = (

       nilBoundsD3dIfFail: 
        [|:e| ^error: 'nilBoundsD3d failed: ', e] ).

  nilBoundsD3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilBoundsD3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl boundsD3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_d3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl boundsD3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_d3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  xmax = (

       xmaxIfFail: [|:e| ^error: 'xmax failed: ', e] ).

  xmaxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d3d_xmax_Xmax_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  xmax: t0  = (

       xmax: t0 IfFail: [|:e| ^error: 'xmax: failed: ', e] ).

  xmax: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d3d_xmax_Xmax__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  xmin = (

       xminIfFail: [|:e| ^error: 'xmin failed: ', e] ).

  xminIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d3d_xmin_Xmin_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  xmin: t0  = (

       xmin: t0 IfFail: [|:e| ^error: 'xmin: failed: ', e] ).

  xmin: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d3d_xmin_Xmin__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  ymax = (

       ymaxIfFail: [|:e| ^error: 'ymax failed: ', e] ).

  ymaxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d3d_ymax_Ymax_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  ymax: t0  = (

       ymax: t0 IfFail: [|:e| ^error: 'ymax: failed: ', e] ).

  ymax: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d3d_ymax_Ymax__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  ymin = (

       yminIfFail: [|:e| ^error: 'ymin failed: ', e] ).

  yminIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d3d_ymin_Ymin_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  ymin: t0  = (

       ymin: t0 IfFail: [|:e| ^error: 'ymin: failed: ', e] ).

  ymin: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d3d_ymin_Ymin__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  zmax = (

       zmaxIfFail: [|:e| ^error: 'zmax failed: ', e] ).

  zmaxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d3d_zmax_Zmax_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  zmax: t0  = (

       zmax: t0 IfFail: [|:e| ^error: 'zmax: failed: ', e] ).

  zmax: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d3d_zmax_Zmax__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  zmin = (

       zminIfFail: [|:e| ^error: 'zmin failed: ', e] ).

  zminIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d3d_zmin_Zmin_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  zmin: t0  = (

       zmin: t0 IfFail: [|:e| ^error: 'zmin: failed: ', e] ).

  zmin: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_d3d_zmin_Zmin__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Xmax: t0 Xmin: t1 Ymax: t2 Ymin: t3 Zmax: t4 Zmin: t5  = (

       set_Xmax: t0 Xmin: t1 Ymax: t2 Ymin: t3 Zmax: t4 Zmin: t5 
        IfFail: 
        [|:e| ^error: 'set_Xmax:Xmin:Ymax:Ymin:Zmax:Zmin: failed: ', e] ).

  set_Xmax: t0 Xmin: t1 Ymax: t2 Ymin: t3 Zmax: t4 Zmin: t5 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_bounds_d3d_set_Set_Xmax_Xmin_Ymax_Ymin_Zmax_Zmin__glue' 
        ArgCoercions: 'pffffff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


	}
| )

traits xgl raw boundsF1d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_f1d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl boundsF1d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_f1d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilBoundsF1d = (

       nilBoundsF1dIfFail: 
        [|:e| ^error: 'nilBoundsF1d failed: ', e] ).

  nilBoundsF1dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilBoundsF1d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl boundsF1d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_f1d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl boundsF1d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_f1d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  bmax = (

       bmaxIfFail: [|:e| ^error: 'bmax failed: ', e] ).

  bmaxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f1d_bmax_Bmax_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  bmax: t0  = (

       bmax: t0 IfFail: [|:e| ^error: 'bmax: failed: ', e] ).

  bmax: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f1d_bmax_Bmax__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  bmin = (

       bminIfFail: [|:e| ^error: 'bmin failed: ', e] ).

  bminIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f1d_bmin_Bmin_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  bmin: t0  = (

       bmin: t0 IfFail: [|:e| ^error: 'bmin: failed: ', e] ).

  bmin: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f1d_bmin_Bmin__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw boundsF2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_f2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl boundsF2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_f2d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilBoundsF2d = (

       nilBoundsF2dIfFail: 
        [|:e| ^error: 'nilBoundsF2d failed: ', e] ).

  nilBoundsF2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilBoundsF2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl boundsF2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_f2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl boundsF2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_f2d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  xmax = (

       xmaxIfFail: [|:e| ^error: 'xmax failed: ', e] ).

  xmaxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f2d_xmax_Xmax_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  xmax: t0  = (

       xmax: t0 IfFail: [|:e| ^error: 'xmax: failed: ', e] ).

  xmax: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f2d_xmax_Xmax__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  xmin = (

       xminIfFail: [|:e| ^error: 'xmin failed: ', e] ).

  xminIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f2d_xmin_Xmin_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  xmin: t0  = (

       xmin: t0 IfFail: [|:e| ^error: 'xmin: failed: ', e] ).

  xmin: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f2d_xmin_Xmin__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  ymax = (

       ymaxIfFail: [|:e| ^error: 'ymax failed: ', e] ).

  ymaxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f2d_ymax_Ymax_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  ymax: t0  = (

       ymax: t0 IfFail: [|:e| ^error: 'ymax: failed: ', e] ).

  ymax: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f2d_ymax_Ymax__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  ymin = (

       yminIfFail: [|:e| ^error: 'ymin failed: ', e] ).

  yminIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f2d_ymin_Ymin_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  ymin: t0  = (

       ymin: t0 IfFail: [|:e| ^error: 'ymin: failed: ', e] ).

  ymin: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f2d_ymin_Ymin__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Xmax: t0 Xmin: t1 Ymax: t2 Ymin: t3  = (

       set_Xmax: t0 Xmin: t1 Ymax: t2 Ymin: t3 IfFail: 
        [|:e| ^error: 'set_Xmax:Xmin:Ymax:Ymin: failed: ', e] ).

  set_Xmax: t0 Xmin: t1 Ymax: t2 Ymin: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_bounds_f2d_set_Set_Xmax_Xmin_Ymax_Ymin__glue' 
        ArgCoercions: 'pffff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw boundsF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_f3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl boundsF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_f3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilBoundsF3d = (

       nilBoundsF3dIfFail: 
        [|:e| ^error: 'nilBoundsF3d failed: ', e] ).

  nilBoundsF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilBoundsF3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl boundsF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_f3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl boundsF3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_f3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  xmax = (

       xmaxIfFail: [|:e| ^error: 'xmax failed: ', e] ).

  xmaxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f3d_xmax_Xmax_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  xmax: t0  = (

       xmax: t0 IfFail: [|:e| ^error: 'xmax: failed: ', e] ).

  xmax: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f3d_xmax_Xmax__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  xmin = (

       xminIfFail: [|:e| ^error: 'xmin failed: ', e] ).

  xminIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f3d_xmin_Xmin_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  xmin: t0  = (

       xmin: t0 IfFail: [|:e| ^error: 'xmin: failed: ', e] ).

  xmin: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f3d_xmin_Xmin__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  ymax = (

       ymaxIfFail: [|:e| ^error: 'ymax failed: ', e] ).

  ymaxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f3d_ymax_Ymax_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  ymax: t0  = (

       ymax: t0 IfFail: [|:e| ^error: 'ymax: failed: ', e] ).

  ymax: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f3d_ymax_Ymax__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  ymin = (

       yminIfFail: [|:e| ^error: 'ymin failed: ', e] ).

  yminIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f3d_ymin_Ymin_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  ymin: t0  = (

       ymin: t0 IfFail: [|:e| ^error: 'ymin: failed: ', e] ).

  ymin: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f3d_ymin_Ymin__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  zmax = (

       zmaxIfFail: [|:e| ^error: 'zmax failed: ', e] ).

  zmaxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f3d_zmax_Zmax_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  zmax: t0  = (

       zmax: t0 IfFail: [|:e| ^error: 'zmax: failed: ', e] ).

  zmax: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f3d_zmax_Zmax__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  zmin = (

       zminIfFail: [|:e| ^error: 'zmin failed: ', e] ).

  zminIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f3d_zmin_Zmin_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  zmin: t0  = (

       zmin: t0 IfFail: [|:e| ^error: 'zmin: failed: ', e] ).

  zmin: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_f3d_zmin_Zmin__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Xmax: t0 Xmin: t1 Ymax: t2 Ymin: t3 Zmax: t4 Zmin: t5  = (

       set_Xmax: t0 Xmin: t1 Ymax: t2 Ymin: t3 Zmax: t4 Zmin: t5 
        IfFail: 
        [|:e| ^error: 'set_Xmax:Xmin:Ymax:Ymin:Zmax:Zmin: failed: ', e] ).

  set_Xmax: t0 Xmin: t1 Ymax: t2 Ymin: t3 Zmax: t4 Zmin: t5 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_bounds_f3d_set_Set_Xmax_Xmin_Ymax_Ymin_Zmax_Zmin__glue' 
        ArgCoercions: 'pffffff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


	}
| )

traits xgl raw boundsI2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_i2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl boundsI2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_i2d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilBoundsI2d = (

       nilBoundsI2dIfFail: 
        [|:e| ^error: 'nilBoundsI2d failed: ', e] ).

  nilBoundsI2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilBoundsI2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl boundsI2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_i2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl boundsI2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_bounds_i2d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  xmax = (

       xmaxIfFail: [|:e| ^error: 'xmax failed: ', e] ).

  xmaxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_i2d_xmax_Xmax_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  xmax: t0  = (

       xmax: t0 IfFail: [|:e| ^error: 'xmax: failed: ', e] ).

  xmax: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_i2d_xmax_Xmax__glue' ArgCoercions: 
        'pi' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  xmin = (

       xminIfFail: [|:e| ^error: 'xmin failed: ', e] ).

  xminIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_i2d_xmin_Xmin_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  xmin: t0  = (

       xmin: t0 IfFail: [|:e| ^error: 'xmin: failed: ', e] ).

  xmin: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_i2d_xmin_Xmin__glue' ArgCoercions: 
        'pi' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  ymax = (

       ymaxIfFail: [|:e| ^error: 'ymax failed: ', e] ).

  ymaxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_i2d_ymax_Ymax_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  ymax: t0  = (

       ymax: t0 IfFail: [|:e| ^error: 'ymax: failed: ', e] ).

  ymax: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_i2d_ymax_Ymax__glue' ArgCoercions: 
        'pi' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  ymin = (

       yminIfFail: [|:e| ^error: 'ymin failed: ', e] ).

  yminIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_i2d_ymin_Ymin_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  ymin: t0  = (

       ymin: t0 IfFail: [|:e| ^error: 'ymin: failed: ', e] ).

  ymin: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_bounds_i2d_ymin_Ymin__glue' ArgCoercions: 
        'pi' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Xmax: t0 Xmin: t1 Ymax: t2 Ymin: t3  = (

       set_Xmax: t0 Xmin: t1 Ymax: t2 Ymin: t3 IfFail: 
        [|:e| ^error: 'set_Xmax:Xmin:Ymax:Ymin: failed: ', e] ).

  set_Xmax: t0 Xmin: t1 Ymax: t2 Ymin: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_bounds_i2d_set_Set_Xmax_Xmin_Ymax_Ymin__glue' 
        ArgCoercions: 'piiii' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw circleAd3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_ad3d_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl circleAd3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_ad3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilCircleAd3d = (

       nilCircleAd3dIfFail: 
        [|:e| ^error: 'nilCircleAd3d failed: ', e] ).

  nilCircleAd3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilCircleAd3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl circleAd3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_ad3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl circleAd3d deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_ad3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  center = (

       centerIfFail: [|:e| ^error: 'center failed: ', e] ).

  centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_ad3d_center_Center_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagD3d deadCopy IfFail: fb ).


  center: t0  = (

       center: t0 IfFail: [|:e| ^error: 'center: failed: ', e] ).

  center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_ad3d_center_Center__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  radius = (

       radiusIfFail: [|:e| ^error: 'radius failed: ', e] ).

  radiusIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_ad3d_radius_Radius_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  radius: t0  = (

       radius: t0 IfFail: [|:e| ^error: 'radius: failed: ', e] ).

  radius: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_ad3d_radius_Radius__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw circleAf3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_af3d_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl circleAf3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_af3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilCircleAf3d = (

       nilCircleAf3dIfFail: 
        [|:e| ^error: 'nilCircleAf3d failed: ', e] ).

  nilCircleAf3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilCircleAf3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl circleAf3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_af3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl circleAf3d deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_af3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  center = (

       centerIfFail: [|:e| ^error: 'center failed: ', e] ).

  centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_af3d_center_Center_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagF3d deadCopy IfFail: fb ).


  center: t0  = (

       center: t0 IfFail: [|:e| ^error: 'center: failed: ', e] ).

  center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_af3d_center_Center__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  radius = (

       radiusIfFail: [|:e| ^error: 'radius failed: ', e] ).

  radiusIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_af3d_radius_Radius_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  radius: t0  = (

       radius: t0 IfFail: [|:e| ^error: 'radius: failed: ', e] ).

  radius: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_af3d_radius_Radius__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw circleD2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_d2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl circleD2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_d2d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilCircleD2d = (

       nilCircleD2dIfFail: 
        [|:e| ^error: 'nilCircleD2d failed: ', e] ).

  nilCircleD2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilCircleD2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl circleD2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_d2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl circleD2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_d2d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  center = (

       centerIfFail: [|:e| ^error: 'center failed: ', e] ).

  centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_d2d_center_Center_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagD2d deadCopy IfFail: fb ).


  center: t0  = (

       center: t0 IfFail: [|:e| ^error: 'center: failed: ', e] ).

  center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_d2d_center_Center__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  radius = (

       radiusIfFail: [|:e| ^error: 'radius failed: ', e] ).

  radiusIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_d2d_radius_Radius_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  radius: t0  = (

       radius: t0 IfFail: [|:e| ^error: 'radius: failed: ', e] ).

  radius: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_d2d_radius_Radius__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw circleD3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_d3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl circleD3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_d3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilCircleD3d = (

       nilCircleD3dIfFail: 
        [|:e| ^error: 'nilCircleD3d failed: ', e] ).

  nilCircleD3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilCircleD3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl circleD3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_d3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl circleD3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_d3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  center = (

       centerIfFail: [|:e| ^error: 'center failed: ', e] ).

  centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_d3d_center_Center_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagD3d deadCopy IfFail: fb ).


  center: t0  = (

       center: t0 IfFail: [|:e| ^error: 'center: failed: ', e] ).

  center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_d3d_center_Center__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  dir = (

       dirIfFail: [|:e| ^error: 'dir failed: ', e] ).

  dirIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_d3d_dir_Dir_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptD3d deadCopy IfFail: fb ).


  dir_normal = (

       dir_normalIfFail: [|:e| ^error: 'dir_normal failed: ', e] ).

  dir_normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_d3d_dir_normal_Dir_normal_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  dir_normal: t0  = (

       dir_normal: t0 IfFail: 
        [|:e| ^error: 'dir_normal: failed: ', e] ).

  dir_normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_d3d_dir_normal_Dir_normal__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  dir_normalized = (

       dir_normalizedIfFail: 
        [|:e| ^error: 'dir_normalized failed: ', e] ).

  dir_normalizedIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_circle_d3d_dir_normalized_Dir_normalized_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  dir_normalized: t0  = (

       dir_normalized: t0 IfFail: 
        [|:e| ^error: 'dir_normalized: failed: ', e] ).

  dir_normalized: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_circle_d3d_dir_normalized_Dir_normalized__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  radius = (

       radiusIfFail: [|:e| ^error: 'radius failed: ', e] ).

  radiusIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_d3d_radius_Radius_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  radius: t0  = (

       radius: t0 IfFail: [|:e| ^error: 'radius: failed: ', e] ).

  radius: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_d3d_radius_Radius__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Center: t0 Dir_normal: t1 Dir_normalized: t2 Radius: t3  = (

       set_Center: t0 Dir_normal: t1 Dir_normalized: t2 Radius: t3 
        IfFail: 
        [|:e| ^error: 'set_Center:Dir_normal:Dir_normalized:Radius: failed: ', e] ).

  set_Center: t0 Dir_normal: t1 Dir_normalized: t2 Radius: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_circle_d3d_set_Set_Center_Dir_normal_Dir_normalized_Radius__glue' 
        ArgCoercions: 'pp  f' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw circleF2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_f2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl circleF2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_f2d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilCircleF2d = (

       nilCircleF2dIfFail: 
        [|:e| ^error: 'nilCircleF2d failed: ', e] ).

  nilCircleF2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilCircleF2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl circleF2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_f2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl circleF2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_f2d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  center = (

       centerIfFail: [|:e| ^error: 'center failed: ', e] ).

  centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_f2d_center_Center_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagF2d deadCopy IfFail: fb ).


  center: t0  = (

       center: t0 IfFail: [|:e| ^error: 'center: failed: ', e] ).

  center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_f2d_center_Center__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  radius = (

       radiusIfFail: [|:e| ^error: 'radius failed: ', e] ).

  radiusIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_f2d_radius_Radius_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  radius: t0  = (

       radius: t0 IfFail: [|:e| ^error: 'radius: failed: ', e] ).

  radius: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_f2d_radius_Radius__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw circleF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_f3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl circleF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_f3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilCircleF3d = (

       nilCircleF3dIfFail: 
        [|:e| ^error: 'nilCircleF3d failed: ', e] ).

  nilCircleF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilCircleF3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl circleF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_f3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl circleF3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_f3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  center = (

       centerIfFail: [|:e| ^error: 'center failed: ', e] ).

  centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_f3d_center_Center_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagF3d deadCopy IfFail: fb ).


  center: t0  = (

       center: t0 IfFail: [|:e| ^error: 'center: failed: ', e] ).

  center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_f3d_center_Center__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  dir = (

       dirIfFail: [|:e| ^error: 'dir failed: ', e] ).

  dirIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_f3d_dir_Dir_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  dir_normal = (

       dir_normalIfFail: [|:e| ^error: 'dir_normal failed: ', e] ).

  dir_normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_f3d_dir_normal_Dir_normal_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  dir_normal: t0  = (

       dir_normal: t0 IfFail: 
        [|:e| ^error: 'dir_normal: failed: ', e] ).

  dir_normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_f3d_dir_normal_Dir_normal__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  dir_normalized = (

       dir_normalizedIfFail: 
        [|:e| ^error: 'dir_normalized failed: ', e] ).

  dir_normalizedIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_circle_f3d_dir_normalized_Dir_normalized_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  dir_normalized: t0  = (

       dir_normalized: t0 IfFail: 
        [|:e| ^error: 'dir_normalized: failed: ', e] ).

  dir_normalized: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_circle_f3d_dir_normalized_Dir_normalized__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  radius = (

       radiusIfFail: [|:e| ^error: 'radius failed: ', e] ).

  radiusIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_f3d_radius_Radius_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  radius: t0  = (

       radius: t0 IfFail: [|:e| ^error: 'radius: failed: ', e] ).

  radius: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_f3d_radius_Radius__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Center: t0 Dir_normal: t1 Dir_normalized: t2 Radius: t3  = (

       set_Center: t0 Dir_normal: t1 Dir_normalized: t2 Radius: t3 
        IfFail: 
        [|:e| ^error: 'set_Center:Dir_normal:Dir_normalized:Radius: failed: ', e] ).

  set_Center: t0 Dir_normal: t1 Dir_normalized: t2 Radius: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_circle_f3d_set_Set_Center_Dir_normal_Dir_normalized_Radius__glue' 
        ArgCoercions: 'pp  f' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw circleI2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_i2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl circleI2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_i2d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilCircleI2d = (

       nilCircleI2dIfFail: 
        [|:e| ^error: 'nilCircleI2d failed: ', e] ).

  nilCircleI2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilCircleI2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl circleI2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_i2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl circleI2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_i2d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  center = (

       centerIfFail: [|:e| ^error: 'center failed: ', e] ).

  centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_i2d_center_Center_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagI2d deadCopy IfFail: fb ).


  center: t0  = (

       center: t0 IfFail: [|:e| ^error: 'center: failed: ', e] ).

  center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_i2d_center_Center__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  radius = (

       radiusIfFail: [|:e| ^error: 'radius failed: ', e] ).

  radiusIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_i2d_radius_Radius_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  radius: t0  = (

       radius: t0 IfFail: [|:e| ^error: 'radius: failed: ', e] ).

  radius: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_i2d_radius_Radius__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw circleList _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_list_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl circleList deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_list_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilCircleList = (

       nilCircleListIfFail: 
        [|:e| ^error: 'nilCircleList failed: ', e] ).

  nilCircleListIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilCircleList_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl circleList deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_list_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl circleList deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_list_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  bbox = (

       bboxIfFail: [|:e| ^error: 'bbox failed: ', e] ).

  bboxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_list_bbox_Bbox_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl bbox deadCopy IfFail: fb ).


  bbox: t0  = (

       bbox: t0 IfFail: [|:e| ^error: 'bbox: failed: ', e] ).

  bbox: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_list_bbox_Bbox__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  circles_ad3d = (

       circles_ad3dIfFail: 
        [|:e| ^error: 'circles_ad3d failed: ', e] ).

  circles_ad3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_list_circles_ad3d_Circles_ad3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl circleAd3d deadCopy IfFail: fb ).


  circles_ad3d: t0  = (

       circles_ad3d: t0 IfFail: 
        [|:e| ^error: 'circles_ad3d: failed: ', e] ).

  circles_ad3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_list_circles_ad3d_Circles_ad3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  circles_af3d = (

       circles_af3dIfFail: 
        [|:e| ^error: 'circles_af3d failed: ', e] ).

  circles_af3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_list_circles_af3d_Circles_af3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl circleAf3d deadCopy IfFail: fb ).


  circles_af3d: t0  = (

       circles_af3d: t0 IfFail: 
        [|:e| ^error: 'circles_af3d: failed: ', e] ).

  circles_af3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_list_circles_af3d_Circles_af3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  circles_d2d = (

       circles_d2dIfFail: [|:e| ^error: 'circles_d2d failed: ', e] ).

  circles_d2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_list_circles_d2d_Circles_d2d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl circleD2d deadCopy IfFail: fb ).


  circles_d2d: t0  = (

       circles_d2d: t0 IfFail: 
        [|:e| ^error: 'circles_d2d: failed: ', e] ).

  circles_d2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_list_circles_d2d_Circles_d2d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  circles_d3d = (

       circles_d3dIfFail: [|:e| ^error: 'circles_d3d failed: ', e] ).

  circles_d3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_list_circles_d3d_Circles_d3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl circleD3d deadCopy IfFail: fb ).


  circles_d3d: t0  = (

       circles_d3d: t0 IfFail: 
        [|:e| ^error: 'circles_d3d: failed: ', e] ).

  circles_d3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_list_circles_d3d_Circles_d3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  circles_f2d = (

       circles_f2dIfFail: [|:e| ^error: 'circles_f2d failed: ', e] ).

  circles_f2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_list_circles_f2d_Circles_f2d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl circleF2d deadCopy IfFail: fb ).


  circles_f2d: t0  = (

       circles_f2d: t0 IfFail: 
        [|:e| ^error: 'circles_f2d: failed: ', e] ).

  circles_f2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_list_circles_f2d_Circles_f2d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  circles_f3d = (

       circles_f3dIfFail: [|:e| ^error: 'circles_f3d failed: ', e] ).

  circles_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_list_circles_f3d_Circles_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl circleF3d deadCopy IfFail: fb ).


  circles_f3d: t0  = (

       circles_f3d: t0 IfFail: 
        [|:e| ^error: 'circles_f3d: failed: ', e] ).

  circles_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_list_circles_f3d_Circles_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  circles_i2d = (

       circles_i2dIfFail: [|:e| ^error: 'circles_i2d failed: ', e] ).

  circles_i2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_list_circles_i2d_Circles_i2d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl circleI2d deadCopy IfFail: fb ).


  circles_i2d: t0  = (

       circles_i2d: t0 IfFail: 
        [|:e| ^error: 'circles_i2d: failed: ', e] ).

  circles_i2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_circle_list_circles_i2d_Circles_i2d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_circles = (

       num_circlesIfFail: [|:e| ^error: 'num_circles failed: ', e] ).

  num_circlesIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_list_num_circles_Num_circles_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_circles: t0  = (

       num_circles: t0 IfFail: 
        [|:e| ^error: 'num_circles: failed: ', e] ).

  num_circles: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_list_num_circles_Num_circles__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  type = (

       typeIfFail: [|:e| ^error: 'type failed: ', e] ).

  typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_list_type_Type_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  type: t0  = (

       type: t0 IfFail: [|:e| ^error: 'type: failed: ', e] ).

  type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_circle_list_type_Type__glue' ArgCoercions: 
        'p i' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Bbox: t0 Circles_ad3d: t1 Num_circles: t2 Type: t3  = (

       set_Bbox: t0 Circles_ad3d: t1 Num_circles: t2 Type: t3 
        IfFail: 
        [|:e| ^error: 'set_Bbox:Circles_ad3d:Num_circles:Type: failed: ', e] ).

  set_Bbox: t0 Circles_ad3d: t1 Num_circles: t2 Type: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_circle_list_set_Set_Bbox_Circles_ad3d_Num_circles_Type__glue' 
        ArgCoercions: 'pppi i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


  set_Bbox: t0 Circles_af3d: t1 Num_circles: t2 Type: t3  = (

       set_Bbox: t0 Circles_af3d: t1 Num_circles: t2 Type: t3 
        IfFail: 
        [|:e| ^error: 'set_Bbox:Circles_af3d:Num_circles:Type: failed: ', e] ).

  set_Bbox: t0 Circles_af3d: t1 Num_circles: t2 Type: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_circle_list_set_Set_Bbox_Circles_af3d_Num_circles_Type__glue' 
        ArgCoercions: 'pppi i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


  set_Bbox: t0 Circles_d2d: t1 Num_circles: t2 Type: t3  = (

       set_Bbox: t0 Circles_d2d: t1 Num_circles: t2 Type: t3 
        IfFail: 
        [|:e| ^error: 'set_Bbox:Circles_d2d:Num_circles:Type: failed: ', e] ).

  set_Bbox: t0 Circles_d2d: t1 Num_circles: t2 Type: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_circle_list_set_Set_Bbox_Circles_d2d_Num_circles_Type__glue' 
        ArgCoercions: 'pppi i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


  set_Bbox: t0 Circles_d3d: t1 Num_circles: t2 Type: t3  = (

       set_Bbox: t0 Circles_d3d: t1 Num_circles: t2 Type: t3 
        IfFail: 
        [|:e| ^error: 'set_Bbox:Circles_d3d:Num_circles:Type: failed: ', e] ).

  set_Bbox: t0 Circles_d3d: t1 Num_circles: t2 Type: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_circle_list_set_Set_Bbox_Circles_d3d_Num_circles_Type__glue' 
        ArgCoercions: 'pppi i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


  set_Bbox: t0 Circles_f2d: t1 Num_circles: t2 Type: t3  = (

       set_Bbox: t0 Circles_f2d: t1 Num_circles: t2 Type: t3 
        IfFail: 
        [|:e| ^error: 'set_Bbox:Circles_f2d:Num_circles:Type: failed: ', e] ).

  set_Bbox: t0 Circles_f2d: t1 Num_circles: t2 Type: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_circle_list_set_Set_Bbox_Circles_f2d_Num_circles_Type__glue' 
        ArgCoercions: 'pppi i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


  set_Bbox: t0 Circles_f3d: t1 Num_circles: t2 Type: t3  = (

       set_Bbox: t0 Circles_f3d: t1 Num_circles: t2 Type: t3 
        IfFail: 
        [|:e| ^error: 'set_Bbox:Circles_f3d:Num_circles:Type: failed: ', e] ).

  set_Bbox: t0 Circles_f3d: t1 Num_circles: t2 Type: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_circle_list_set_Set_Bbox_Circles_f3d_Num_circles_Type__glue' 
        ArgCoercions: 'pppi i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


  set_Bbox: t0 Circles_i2d: t1 Num_circles: t2 Type: t3  = (

       set_Bbox: t0 Circles_i2d: t1 Num_circles: t2 Type: t3 
        IfFail: 
        [|:e| ^error: 'set_Bbox:Circles_i2d:Num_circles:Type: failed: ', e] ).

  set_Bbox: t0 Circles_i2d: t1 Num_circles: t2 Type: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_circle_list_set_Set_Bbox_Circles_i2d_Num_circles_Type__glue' 
        ArgCoercions: 'pppi i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


	}
| )

traits xgl raw color _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl color deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_delete_Delete_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilColor = (

       nilColorIfFail: [|:e| ^error: 'nilColor failed: ', e] ).

  nilColorIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilColor_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl color deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl color deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  gray = (

       grayIfFail: [|:e| ^error: 'gray failed: ', e] ).

  grayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_gray_Gray_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  gray: t0  = (

       gray: t0 IfFail: [|:e| ^error: 'gray: failed: ', e] ).

  gray: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_gray_Gray__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  index = (

       indexIfFail: [|:e| ^error: 'index failed: ', e] ).

  indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_index_Index_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  index: t0  = (

       index: t0 IfFail: [|:e| ^error: 'index: failed: ', e] ).

  index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_index_Index__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  rgb = (

       rgbIfFail: [|:e| ^error: 'rgb failed: ', e] ).

  rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_rgb_Rgb_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  rgb: t0  = (

       rgb: t0 IfFail: [|:e| ^error: 'rgb: failed: ', e] ).

  rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_rgb_Rgb__glue' ArgCoercions: 'pp' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_z_Z_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_z_Z__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw colorFacet _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_facet_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl colorFacet deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_facet_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilColorFacet = (

       nilColorFacetIfFail: 
        [|:e| ^error: 'nilColorFacet failed: ', e] ).

  nilColorFacetIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilColorFacet_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl colorFacet deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_facet_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl colorFacet deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_facet_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  color_gray = (

       color_grayIfFail: [|:e| ^error: 'color_gray failed: ', e] ).

  color_grayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_facet_color_gray_Color_gray_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_gray: t0  = (

       color_gray: t0 IfFail: 
        [|:e| ^error: 'color_gray: failed: ', e] ).

  color_gray: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_facet_color_gray_Color_gray__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_index = (

       color_indexIfFail: [|:e| ^error: 'color_index failed: ', e] ).

  color_indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_facet_color_index_Color_index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_index: t0  = (

       color_index: t0 IfFail: 
        [|:e| ^error: 'color_index: failed: ', e] ).

  color_index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_facet_color_index_Color_index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_rgb = (

       color_rgbIfFail: [|:e| ^error: 'color_rgb failed: ', e] ).

  color_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_facet_color_rgb_Color_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  color_rgb: t0  = (

       color_rgb: t0 IfFail: 
        [|:e| ^error: 'color_rgb: failed: ', e] ).

  color_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_facet_color_rgb_Color_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_z = (

       color_zIfFail: [|:e| ^error: 'color_z failed: ', e] ).

  color_zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_facet_color_z_Color_z_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_z: t0  = (

       color_z: t0 IfFail: [|:e| ^error: 'color_z: failed: ', e] ).

  color_z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_facet_color_z_Color_z__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw colorHomogeneous _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_homogeneous_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl colorHomogeneous deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_homogeneous_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilColorHomogeneous = (

       nilColorHomogeneousIfFail: 
        [|:e| ^error: 'nilColorHomogeneous failed: ', e] ).

  nilColorHomogeneousIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilColorHomogeneous_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl colorHomogeneous deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_homogeneous_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl colorHomogeneous deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_homogeneous_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  rgbw = (

       rgbwIfFail: [|:e| ^error: 'rgbw failed: ', e] ).

  rgbwIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_homogeneous_rgbw_Rgbw_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgbw deadCopy IfFail: fb ).


  rgbw: t0  = (

       rgbw: t0 IfFail: [|:e| ^error: 'rgbw: failed: ', e] ).

  rgbw: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_homogeneous_rgbw_Rgbw__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw colorList _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_list_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl colorList deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_list_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilColorList = (

       nilColorListIfFail: 
        [|:e| ^error: 'nilColorList failed: ', e] ).

  nilColorListIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilColorList_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl colorList deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_list_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl colorList deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_list_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  colors = (

       colorsIfFail: [|:e| ^error: 'colors failed: ', e] ).

  colorsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_list_colors_Colors_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl color deadCopy IfFail: fb ).


  colors: t0  = (

       colors: t0 IfFail: [|:e| ^error: 'colors: failed: ', e] ).

  colors: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_list_colors_Colors__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  length = (

       lengthIfFail: [|:e| ^error: 'length failed: ', e] ).

  lengthIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_list_length_Length_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  length: t0  = (

       length: t0 IfFail: [|:e| ^error: 'length: failed: ', e] ).

  length: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_list_length_Length__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  start_index = (

       start_indexIfFail: [|:e| ^error: 'start_index failed: ', e] ).

  start_indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_list_start_index_Start_index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  start_index: t0  = (

       start_index: t0 IfFail: 
        [|:e| ^error: 'start_index: failed: ', e] ).

  start_index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_list_start_index_Start_index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Colors: t0 Length: t1 Start_index: t2  = (

       set_Colors: t0 Length: t1 Start_index: t2 IfFail: 
        [|:e| ^error: 'set_Colors:Length:Start_index: failed: ', e] ).

  set_Colors: t0 Length: t1 Start_index: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_color_list_set_Set_Colors_Length_Start_index__glue' 
        ArgCoercions: 'ppii' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw colorNormalFacet _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_normal_facet_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl colorNormalFacet deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_normal_facet_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilColorNormalFacet = (

       nilColorNormalFacetIfFail: 
        [|:e| ^error: 'nilColorNormalFacet failed: ', e] ).

  nilColorNormalFacetIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilColorNormalFacet_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl colorNormalFacet deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_normal_facet_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl colorNormalFacet deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_normal_facet_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  color_gray = (

       color_grayIfFail: [|:e| ^error: 'color_gray failed: ', e] ).

  color_grayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_color_normal_facet_color_gray_Color_gray_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_gray: t0  = (

       color_gray: t0 IfFail: 
        [|:e| ^error: 'color_gray: failed: ', e] ).

  color_gray: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_color_normal_facet_color_gray_Color_gray__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_index = (

       color_indexIfFail: [|:e| ^error: 'color_index failed: ', e] ).

  color_indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_color_normal_facet_color_index_Color_index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_index: t0  = (

       color_index: t0 IfFail: 
        [|:e| ^error: 'color_index: failed: ', e] ).

  color_index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_color_normal_facet_color_index_Color_index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_rgb = (

       color_rgbIfFail: [|:e| ^error: 'color_rgb failed: ', e] ).

  color_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_normal_facet_color_rgb_Color_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  color_rgb: t0  = (

       color_rgb: t0 IfFail: 
        [|:e| ^error: 'color_rgb: failed: ', e] ).

  color_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_color_normal_facet_color_rgb_Color_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_z = (

       color_zIfFail: [|:e| ^error: 'color_z failed: ', e] ).

  color_zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_normal_facet_color_z_Color_z_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_z: t0  = (

       color_z: t0 IfFail: [|:e| ^error: 'color_z: failed: ', e] ).

  color_z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_normal_facet_color_z_Color_z__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  normal = (

       normalIfFail: [|:e| ^error: 'normal failed: ', e] ).

  normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_normal_facet_normal_Normal_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  normal: t0  = (

       normal: t0 IfFail: [|:e| ^error: 'normal: failed: ', e] ).

  normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_normal_facet_normal_Normal__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw colorRgb _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_rgb_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl colorRgb deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_rgb_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilColorRgb = (

       nilColorRgbIfFail: [|:e| ^error: 'nilColorRgb failed: ', e] ).

  nilColorRgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilColorRgb_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl colorRgb deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_rgb_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl colorRgb deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_rgb_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  b = (

       bIfFail: [|:e| ^error: 'b failed: ', e] ).

  bIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_rgb_b_B_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  b: t0  = (

       b: t0 IfFail: [|:e| ^error: 'b: failed: ', e] ).

  b: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_rgb_b_B__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  g = (

       gIfFail: [|:e| ^error: 'g failed: ', e] ).

  gIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_rgb_g_G_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  g: t0  = (

       g: t0 IfFail: [|:e| ^error: 'g: failed: ', e] ).

  g: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_rgb_g_G__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  r = (

       rIfFail: [|:e| ^error: 'r failed: ', e] ).

  rIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_rgb_r_R_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  r: t0  = (

       r: t0 IfFail: [|:e| ^error: 'r: failed: ', e] ).

  r: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_rgb_r_R__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_B: t0 G: t1 R: t2  = (

       set_B: t0 G: t1 R: t2 IfFail: 
        [|:e| ^error: 'set_B:G:R: failed: ', e] ).

  set_B: t0 G: t1 R: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_rgb_set_Set_B_G_R__glue' ArgCoercions: 
        'pfff' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw colorRgbw _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_rgbw_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl colorRgbw deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_rgbw_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilColorRgbw = (

       nilColorRgbwIfFail: 
        [|:e| ^error: 'nilColorRgbw failed: ', e] ).

  nilColorRgbwIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilColorRgbw_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl colorRgbw deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_rgbw_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl colorRgbw deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_rgbw_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  b = (

       bIfFail: [|:e| ^error: 'b failed: ', e] ).

  bIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_rgbw_b_B_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  b: t0  = (

       b: t0 IfFail: [|:e| ^error: 'b: failed: ', e] ).

  b: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_rgbw_b_B__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  g = (

       gIfFail: [|:e| ^error: 'g failed: ', e] ).

  gIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_rgbw_g_G_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  g: t0  = (

       g: t0 IfFail: [|:e| ^error: 'g: failed: ', e] ).

  g: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_rgbw_g_G__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  r = (

       rIfFail: [|:e| ^error: 'r failed: ', e] ).

  rIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_rgbw_r_R_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  r: t0  = (

       r: t0 IfFail: [|:e| ^error: 'r: failed: ', e] ).

  r: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_rgbw_r_R__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  w = (

       wIfFail: [|:e| ^error: 'w failed: ', e] ).

  wIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_rgbw_w_W_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  w: t0  = (

       w: t0 IfFail: [|:e| ^error: 'w: failed: ', e] ).

  w: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_rgbw_w_W__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_B: t0 G: t1 R: t2 W: t3  = (

       set_B: t0 G: t1 R: t2 W: t3 IfFail: 
        [|:e| ^error: 'set_B:G:R:W: failed: ', e] ).

  set_B: t0 G: t1 R: t2 W: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_rgbw_set_Set_B_G_R_W__glue' 
        ArgCoercions: 'pffff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw colorTypeSupported _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_type_supported_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl colorTypeSupported deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_type_supported_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilColorTypeSupported = (

       nilColorTypeSupportedIfFail: 
        [|:e| ^error: 'nilColorTypeSupported failed: ', e] ).

  nilColorTypeSupportedIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilColorTypeSupported_glue' ArgCoercions: 
        ' ' ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl colorTypeSupported deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_type_supported_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl colorTypeSupported deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_color_type_supported_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  index = (

       indexIfFail: [|:e| ^error: 'index failed: ', e] ).

  indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_type_supported_index_Index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  index: t0  = (

       index: t0 IfFail: [|:e| ^error: 'index: failed: ', e] ).

  index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_type_supported_index_Index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  rgb = (

       rgbIfFail: [|:e| ^error: 'rgb failed: ', e] ).

  rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_type_supported_rgb_Rgb_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  rgb: t0  = (

       rgb: t0 IfFail: [|:e| ^error: 'rgb: failed: ', e] ).

  rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_color_type_supported_rgb_Rgb__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw curveColorSpline _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_curve_color_spline_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl curveColorSpline deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_curve_color_spline_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilCurveColorSpline = (

       nilCurveColorSplineIfFail: 
        [|:e| ^error: 'nilCurveColorSpline failed: ', e] ).

  nilCurveColorSplineIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilCurveColorSpline_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl curveColorSpline deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_curve_color_spline_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl curveColorSpline deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_curve_color_spline_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  colors = (

       colorsIfFail: [|:e| ^error: 'colors failed: ', e] ).

  colorsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_curve_color_spline_colors_Colors_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorHomogeneous deadCopy IfFail: fb ).


  colors: t0  = (

       colors: t0 IfFail: [|:e| ^error: 'colors: failed: ', e] ).

  colors: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_curve_color_spline_colors_Colors__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  knot_vector = (

       knot_vectorIfFail: [|:e| ^error: 'knot_vector failed: ', e] ).

  knot_vectorIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_curve_color_spline_knot_vector_Knot_vector_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  knot_vector: t0  = (

       knot_vector: t0 IfFail: 
        [|:e| ^error: 'knot_vector: failed: ', e] ).

  knot_vector: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_curve_color_spline_knot_vector_Knot_vector__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_knots = (

       num_knotsIfFail: [|:e| ^error: 'num_knots failed: ', e] ).

  num_knotsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_curve_color_spline_num_knots_Num_knots_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_knots: t0  = (

       num_knots: t0 IfFail: 
        [|:e| ^error: 'num_knots: failed: ', e] ).

  num_knots: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_curve_color_spline_num_knots_Num_knots__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  order = (

       orderIfFail: [|:e| ^error: 'order failed: ', e] ).

  orderIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_curve_color_spline_order_Order_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  order: t0  = (

       order: t0 IfFail: [|:e| ^error: 'order: failed: ', e] ).

  order: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_curve_color_spline_order_Order__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Colors: t0 Knot_vector: t1 Num_knots: t2 Order: t3  = (

       set_Colors: t0 Knot_vector: t1 Num_knots: t2 Order: t3 
        IfFail: 
        [|:e| ^error: 'set_Colors:Knot_vector:Num_knots:Order: failed: ', e] ).

  set_Colors: t0 Knot_vector: t1 Num_knots: t2 Order: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_curve_color_spline_set_Set_Colors_Knot_vector_Num_knots_Order__glue' 
        ArgCoercions: 'pp iii' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 With: t2 With: t3 
        IfFail: fb .
    self).


	}
| )

traits xgl raw ellAd3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_ad3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ellAd3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_ad3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilEllAd3d = (

       nilEllAd3dIfFail: [|:e| ^error: 'nilEllAd3d failed: ', e] ).

  nilEllAd3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilEllAd3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ellAd3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_ad3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ellAd3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_ad3d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  center = (

       centerIfFail: [|:e| ^error: 'center failed: ', e] ).

  centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_ad3d_center_Center_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagD3d deadCopy IfFail: fb ).


  center: t0  = (

       center: t0 IfFail: [|:e| ^error: 'center: failed: ', e] ).

  center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_ad3d_center_Center__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  major_axis = (

       major_axisIfFail: [|:e| ^error: 'major_axis failed: ', e] ).

  major_axisIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_ad3d_major_axis_Major_axis_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  major_axis: t0  = (

       major_axis: t0 IfFail: 
        [|:e| ^error: 'major_axis: failed: ', e] ).

  major_axis: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_ad3d_major_axis_Major_axis__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  minor_axis = (

       minor_axisIfFail: [|:e| ^error: 'minor_axis failed: ', e] ).

  minor_axisIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_ad3d_minor_axis_Minor_axis_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  minor_axis: t0  = (

       minor_axis: t0 IfFail: 
        [|:e| ^error: 'minor_axis: failed: ', e] ).

  minor_axis: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_ad3d_minor_axis_Minor_axis__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  rot_angle = (

       rot_angleIfFail: [|:e| ^error: 'rot_angle failed: ', e] ).

  rot_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_ad3d_rot_angle_Rot_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  rot_angle: t0  = (

       rot_angle: t0 IfFail: 
        [|:e| ^error: 'rot_angle: failed: ', e] ).

  rot_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_ad3d_rot_angle_Rot_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  start_angle = (

       start_angleIfFail: [|:e| ^error: 'start_angle failed: ', e] ).

  start_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_ad3d_start_angle_Start_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  start_angle: t0  = (

       start_angle: t0 IfFail: 
        [|:e| ^error: 'start_angle: failed: ', e] ).

  start_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_ad3d_start_angle_Start_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  stop_angle = (

       stop_angleIfFail: [|:e| ^error: 'stop_angle failed: ', e] ).

  stop_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_ad3d_stop_angle_Stop_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  stop_angle: t0  = (

       stop_angle: t0 IfFail: 
        [|:e| ^error: 'stop_angle: failed: ', e] ).

  stop_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_ad3d_stop_angle_Stop_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Center: t0 Major_axis: t1 Minor_axis: t2 Rot_angle: t3 
    Start_angle: t4 Stop_angle: t5  = (

       set_Center: t0 Major_axis: t1 Minor_axis: t2 Rot_angle: t3 
        Start_angle: t4 Stop_angle: t5 IfFail: 
        [|:e| ^error: 'set_Center:Major_axis:Minor_axis:Rot_angle:Start_angle:Stop_angle: failed: ', e] ).

  set_Center: t0 Major_axis: t1 Minor_axis: t2 Rot_angle: t3 
    Start_angle: t4 Stop_angle: t5 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_ell_ad3d_set_Set_Center_Major_axis_Minor_axis_Rot_angle_Start_angle_Stop_angle__glue' 
        ArgCoercions: 'ppfffff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


	}
| )

traits xgl raw ellAf3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_af3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ellAf3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_af3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilEllAf3d = (

       nilEllAf3dIfFail: [|:e| ^error: 'nilEllAf3d failed: ', e] ).

  nilEllAf3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilEllAf3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ellAf3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_af3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ellAf3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_af3d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  center = (

       centerIfFail: [|:e| ^error: 'center failed: ', e] ).

  centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_af3d_center_Center_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagF3d deadCopy IfFail: fb ).


  center: t0  = (

       center: t0 IfFail: [|:e| ^error: 'center: failed: ', e] ).

  center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_af3d_center_Center__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  major_axis = (

       major_axisIfFail: [|:e| ^error: 'major_axis failed: ', e] ).

  major_axisIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_af3d_major_axis_Major_axis_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  major_axis: t0  = (

       major_axis: t0 IfFail: 
        [|:e| ^error: 'major_axis: failed: ', e] ).

  major_axis: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_af3d_major_axis_Major_axis__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  minor_axis = (

       minor_axisIfFail: [|:e| ^error: 'minor_axis failed: ', e] ).

  minor_axisIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_af3d_minor_axis_Minor_axis_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  minor_axis: t0  = (

       minor_axis: t0 IfFail: 
        [|:e| ^error: 'minor_axis: failed: ', e] ).

  minor_axis: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_af3d_minor_axis_Minor_axis__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  rot_angle = (

       rot_angleIfFail: [|:e| ^error: 'rot_angle failed: ', e] ).

  rot_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_af3d_rot_angle_Rot_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  rot_angle: t0  = (

       rot_angle: t0 IfFail: 
        [|:e| ^error: 'rot_angle: failed: ', e] ).

  rot_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_af3d_rot_angle_Rot_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  start_angle = (

       start_angleIfFail: [|:e| ^error: 'start_angle failed: ', e] ).

  start_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_af3d_start_angle_Start_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  start_angle: t0  = (

       start_angle: t0 IfFail: 
        [|:e| ^error: 'start_angle: failed: ', e] ).

  start_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_af3d_start_angle_Start_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  stop_angle = (

       stop_angleIfFail: [|:e| ^error: 'stop_angle failed: ', e] ).

  stop_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_af3d_stop_angle_Stop_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  stop_angle: t0  = (

       stop_angle: t0 IfFail: 
        [|:e| ^error: 'stop_angle: failed: ', e] ).

  stop_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_af3d_stop_angle_Stop_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Center: t0 Major_axis: t1 Minor_axis: t2 Rot_angle: t3 
    Start_angle: t4 Stop_angle: t5  = (

       set_Center: t0 Major_axis: t1 Minor_axis: t2 Rot_angle: t3 
        Start_angle: t4 Stop_angle: t5 IfFail: 
        [|:e| ^error: 'set_Center:Major_axis:Minor_axis:Rot_angle:Start_angle:Stop_angle: failed: ', e] ).

  set_Center: t0 Major_axis: t1 Minor_axis: t2 Rot_angle: t3 
    Start_angle: t4 Stop_angle: t5 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_ell_af3d_set_Set_Center_Major_axis_Minor_axis_Rot_angle_Start_angle_Stop_angle__glue' 
        ArgCoercions: 'ppfffff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


	}
| )

traits xgl raw ellD3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_d3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ellD3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_d3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilEllD3d = (

       nilEllD3dIfFail: [|:e| ^error: 'nilEllD3d failed: ', e] ).

  nilEllD3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilEllD3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ellD3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_d3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ellD3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_d3d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  center = (

       centerIfFail: [|:e| ^error: 'center failed: ', e] ).

  centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_d3d_center_Center_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagD3d deadCopy IfFail: fb ).


  center: t0  = (

       center: t0 IfFail: [|:e| ^error: 'center: failed: ', e] ).

  center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_d3d_center_Center__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  dir = (

       dirIfFail: [|:e| ^error: 'dir failed: ', e] ).

  dirIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_d3d_dir_Dir_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptD3d deadCopy IfFail: fb ).


  dir_normal = (

       dir_normalIfFail: [|:e| ^error: 'dir_normal failed: ', e] ).

  dir_normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_d3d_dir_normal_Dir_normal_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  dir_normal: t0  = (

       dir_normal: t0 IfFail: 
        [|:e| ^error: 'dir_normal: failed: ', e] ).

  dir_normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_d3d_dir_normal_Dir_normal__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  dir_normalized = (

       dir_normalizedIfFail: 
        [|:e| ^error: 'dir_normalized failed: ', e] ).

  dir_normalizedIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_d3d_dir_normalized_Dir_normalized_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  dir_normalized: t0  = (

       dir_normalized: t0 IfFail: 
        [|:e| ^error: 'dir_normalized: failed: ', e] ).

  dir_normalized: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_d3d_dir_normalized_Dir_normalized__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  major_axis = (

       major_axisIfFail: [|:e| ^error: 'major_axis failed: ', e] ).

  major_axisIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_d3d_major_axis_Major_axis_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  major_axis: t0  = (

       major_axis: t0 IfFail: 
        [|:e| ^error: 'major_axis: failed: ', e] ).

  major_axis: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_d3d_major_axis_Major_axis__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  minor_axis = (

       minor_axisIfFail: [|:e| ^error: 'minor_axis failed: ', e] ).

  minor_axisIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_d3d_minor_axis_Minor_axis_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  minor_axis: t0  = (

       minor_axis: t0 IfFail: 
        [|:e| ^error: 'minor_axis: failed: ', e] ).

  minor_axis: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_d3d_minor_axis_Minor_axis__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  rot_angle = (

       rot_angleIfFail: [|:e| ^error: 'rot_angle failed: ', e] ).

  rot_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_d3d_rot_angle_Rot_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  rot_angle: t0  = (

       rot_angle: t0 IfFail: 
        [|:e| ^error: 'rot_angle: failed: ', e] ).

  rot_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_d3d_rot_angle_Rot_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  start_angle = (

       start_angleIfFail: [|:e| ^error: 'start_angle failed: ', e] ).

  start_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_d3d_start_angle_Start_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  start_angle: t0  = (

       start_angle: t0 IfFail: 
        [|:e| ^error: 'start_angle: failed: ', e] ).

  start_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_d3d_start_angle_Start_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  stop_angle = (

       stop_angleIfFail: [|:e| ^error: 'stop_angle failed: ', e] ).

  stop_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_d3d_stop_angle_Stop_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  stop_angle: t0  = (

       stop_angle: t0 IfFail: 
        [|:e| ^error: 'stop_angle: failed: ', e] ).

  stop_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_d3d_stop_angle_Stop_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Center: t0 Dir_normal: t1 Dir_normalized: t2 
    Major_axis: t3 Minor_axis: t4 Rot_angle: t5 
    Start_angle: t6 Stop_angle: t7  = (

       set_Center: t0 Dir_normal: t1 Dir_normalized: t2 
        Major_axis: t3 Minor_axis: t4 Rot_angle: t5 
        Start_angle: t6 Stop_angle: t7 IfFail: 
        [|:e| ^error: 'set_Center:Dir_normal:Dir_normalized:Major_axis:Minor_axis:Rot_angle:Start_angle:Stop_angle: failed: ', e] ).

  set_Center: t0 Dir_normal: t1 Dir_normalized: t2 
    Major_axis: t3 Minor_axis: t4 Rot_angle: t5 
    Start_angle: t6 Stop_angle: t7 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_ell_d3d_set_Set_Center_Dir_normal_Dir_normalized_Major_axis_Minor_axis_Rot_angle_Start_angle_Stop_angle__glue' 
        ArgCoercions: 'pp  fffff' ResultType: 'integer' 
        Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 With: t6 With: t7 IfFail: fb .
    self).


	}
| )

traits xgl raw ellF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_f3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ellF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_f3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilEllF3d = (

       nilEllF3dIfFail: [|:e| ^error: 'nilEllF3d failed: ', e] ).

  nilEllF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilEllF3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ellF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_f3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ellF3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_f3d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  center = (

       centerIfFail: [|:e| ^error: 'center failed: ', e] ).

  centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_f3d_center_Center_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagF3d deadCopy IfFail: fb ).


  center: t0  = (

       center: t0 IfFail: [|:e| ^error: 'center: failed: ', e] ).

  center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_f3d_center_Center__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  dir = (

       dirIfFail: [|:e| ^error: 'dir failed: ', e] ).

  dirIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_f3d_dir_Dir_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  dir_normal = (

       dir_normalIfFail: [|:e| ^error: 'dir_normal failed: ', e] ).

  dir_normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_f3d_dir_normal_Dir_normal_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  dir_normal: t0  = (

       dir_normal: t0 IfFail: 
        [|:e| ^error: 'dir_normal: failed: ', e] ).

  dir_normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_f3d_dir_normal_Dir_normal__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  dir_normalized = (

       dir_normalizedIfFail: 
        [|:e| ^error: 'dir_normalized failed: ', e] ).

  dir_normalizedIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_f3d_dir_normalized_Dir_normalized_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  dir_normalized: t0  = (

       dir_normalized: t0 IfFail: 
        [|:e| ^error: 'dir_normalized: failed: ', e] ).

  dir_normalized: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_f3d_dir_normalized_Dir_normalized__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  major_axis = (

       major_axisIfFail: [|:e| ^error: 'major_axis failed: ', e] ).

  major_axisIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_f3d_major_axis_Major_axis_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  major_axis: t0  = (

       major_axis: t0 IfFail: 
        [|:e| ^error: 'major_axis: failed: ', e] ).

  major_axis: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_f3d_major_axis_Major_axis__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  minor_axis = (

       minor_axisIfFail: [|:e| ^error: 'minor_axis failed: ', e] ).

  minor_axisIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_f3d_minor_axis_Minor_axis_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  minor_axis: t0  = (

       minor_axis: t0 IfFail: 
        [|:e| ^error: 'minor_axis: failed: ', e] ).

  minor_axis: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_f3d_minor_axis_Minor_axis__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  rot_angle = (

       rot_angleIfFail: [|:e| ^error: 'rot_angle failed: ', e] ).

  rot_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_f3d_rot_angle_Rot_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  rot_angle: t0  = (

       rot_angle: t0 IfFail: 
        [|:e| ^error: 'rot_angle: failed: ', e] ).

  rot_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_f3d_rot_angle_Rot_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  start_angle = (

       start_angleIfFail: [|:e| ^error: 'start_angle failed: ', e] ).

  start_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_f3d_start_angle_Start_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  start_angle: t0  = (

       start_angle: t0 IfFail: 
        [|:e| ^error: 'start_angle: failed: ', e] ).

  start_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_f3d_start_angle_Start_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  stop_angle = (

       stop_angleIfFail: [|:e| ^error: 'stop_angle failed: ', e] ).

  stop_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_f3d_stop_angle_Stop_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  stop_angle: t0  = (

       stop_angle: t0 IfFail: 
        [|:e| ^error: 'stop_angle: failed: ', e] ).

  stop_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_f3d_stop_angle_Stop_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Center: t0 Dir_normal: t1 Dir_normalized: t2 
    Major_axis: t3 Minor_axis: t4 Rot_angle: t5 
    Start_angle: t6 Stop_angle: t7  = (

       set_Center: t0 Dir_normal: t1 Dir_normalized: t2 
        Major_axis: t3 Minor_axis: t4 Rot_angle: t5 
        Start_angle: t6 Stop_angle: t7 IfFail: 
        [|:e| ^error: 'set_Center:Dir_normal:Dir_normalized:Major_axis:Minor_axis:Rot_angle:Start_angle:Stop_angle: failed: ', e] ).

  set_Center: t0 Dir_normal: t1 Dir_normalized: t2 
    Major_axis: t3 Minor_axis: t4 Rot_angle: t5 
    Start_angle: t6 Stop_angle: t7 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_ell_f3d_set_Set_Center_Dir_normal_Dir_normalized_Major_axis_Minor_axis_Rot_angle_Start_angle_Stop_angle__glue' 
        ArgCoercions: 'pp  fffff' ResultType: 'integer' 
        Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 With: t6 With: t7 IfFail: fb .
    self).


	}
| )

traits xgl raw ellList _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_list_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ellList deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_list_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilEllList = (

       nilEllListIfFail: [|:e| ^error: 'nilEllList failed: ', e] ).

  nilEllListIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilEllList_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ellList deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_list_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ellList deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_list_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  bbox = (

       bboxIfFail: [|:e| ^error: 'bbox failed: ', e] ).

  bboxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_list_bbox_Bbox_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl bbox deadCopy IfFail: fb ).


  bbox: t0  = (

       bbox: t0 IfFail: [|:e| ^error: 'bbox: failed: ', e] ).

  bbox: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_list_bbox_Bbox__glue' ArgCoercions: 'pp' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  ells_ad3d = (

       ells_ad3dIfFail: [|:e| ^error: 'ells_ad3d failed: ', e] ).

  ells_ad3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_list_ells_ad3d_Ells_ad3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ellAd3d deadCopy IfFail: fb ).


  ells_ad3d: t0  = (

       ells_ad3d: t0 IfFail: 
        [|:e| ^error: 'ells_ad3d: failed: ', e] ).

  ells_ad3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_list_ells_ad3d_Ells_ad3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  ells_af3d = (

       ells_af3dIfFail: [|:e| ^error: 'ells_af3d failed: ', e] ).

  ells_af3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_list_ells_af3d_Ells_af3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ellAf3d deadCopy IfFail: fb ).


  ells_af3d: t0  = (

       ells_af3d: t0 IfFail: 
        [|:e| ^error: 'ells_af3d: failed: ', e] ).

  ells_af3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_list_ells_af3d_Ells_af3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  ells_d3d = (

       ells_d3dIfFail: [|:e| ^error: 'ells_d3d failed: ', e] ).

  ells_d3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_list_ells_d3d_Ells_d3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ellD3d deadCopy IfFail: fb ).


  ells_d3d: t0  = (

       ells_d3d: t0 IfFail: [|:e| ^error: 'ells_d3d: failed: ', e] ).

  ells_d3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_list_ells_d3d_Ells_d3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  ells_f3d = (

       ells_f3dIfFail: [|:e| ^error: 'ells_f3d failed: ', e] ).

  ells_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_list_ells_f3d_Ells_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ellF3d deadCopy IfFail: fb ).


  ells_f3d: t0  = (

       ells_f3d: t0 IfFail: [|:e| ^error: 'ells_f3d: failed: ', e] ).

  ells_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_ell_list_ells_f3d_Ells_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_ells = (

       num_ellsIfFail: [|:e| ^error: 'num_ells failed: ', e] ).

  num_ellsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_list_num_ells_Num_ells_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_ells: t0  = (

       num_ells: t0 IfFail: [|:e| ^error: 'num_ells: failed: ', e] ).

  num_ells: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_list_num_ells_Num_ells__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  type = (

       typeIfFail: [|:e| ^error: 'type failed: ', e] ).

  typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_list_type_Type_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  type: t0  = (

       type: t0 IfFail: [|:e| ^error: 'type: failed: ', e] ).

  type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_ell_list_type_Type__glue' ArgCoercions: 
        'p i' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Bbox: t0 Ells_ad3d: t1 Num_ells: t2 Type: t3  = (

       set_Bbox: t0 Ells_ad3d: t1 Num_ells: t2 Type: t3 IfFail: 
        [|:e| ^error: 'set_Bbox:Ells_ad3d:Num_ells:Type: failed: ', e] ).

  set_Bbox: t0 Ells_ad3d: t1 Num_ells: t2 Type: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_ell_list_set_Set_Bbox_Ells_ad3d_Num_ells_Type__glue' 
        ArgCoercions: 'pppi i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


  set_Bbox: t0 Ells_af3d: t1 Num_ells: t2 Type: t3  = (

       set_Bbox: t0 Ells_af3d: t1 Num_ells: t2 Type: t3 IfFail: 
        [|:e| ^error: 'set_Bbox:Ells_af3d:Num_ells:Type: failed: ', e] ).

  set_Bbox: t0 Ells_af3d: t1 Num_ells: t2 Type: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_ell_list_set_Set_Bbox_Ells_af3d_Num_ells_Type__glue' 
        ArgCoercions: 'pppi i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


  set_Bbox: t0 Ells_d3d: t1 Num_ells: t2 Type: t3  = (

       set_Bbox: t0 Ells_d3d: t1 Num_ells: t2 Type: t3 IfFail: 
        [|:e| ^error: 'set_Bbox:Ells_d3d:Num_ells:Type: failed: ', e] ).

  set_Bbox: t0 Ells_d3d: t1 Num_ells: t2 Type: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_ell_list_set_Set_Bbox_Ells_d3d_Num_ells_Type__glue' 
        ArgCoercions: 'pppi i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


  set_Bbox: t0 Ells_f3d: t1 Num_ells: t2 Type: t3  = (

       set_Bbox: t0 Ells_f3d: t1 Num_ells: t2 Type: t3 IfFail: 
        [|:e| ^error: 'set_Bbox:Ells_f3d:Num_ells:Type: failed: ', e] ).

  set_Bbox: t0 Ells_f3d: t1 Num_ells: t2 Type: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_ell_list_set_Set_Bbox_Ells_f3d_Num_ells_Type__glue' 
        ArgCoercions: 'pppi i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


	}
| )

traits xgl raw errorInfo _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_error_info_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl errorInfo deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_error_info_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilErrorInfo = (

       nilErrorInfoIfFail: 
        [|:e| ^error: 'nilErrorInfo failed: ', e] ).

  nilErrorInfoIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilErrorInfo_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl errorInfo deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_error_info_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl errorInfo deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_error_info_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  category = (

       categoryIfFail: [|:e| ^error: 'category failed: ', e] ).

  categoryIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_error_info_category_Category_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  category: t0  = (

       category: t0 IfFail: [|:e| ^error: 'category: failed: ', e] ).

  category: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_error_info_category_Category__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  cur_obj = (

       cur_objIfFail: [|:e| ^error: 'cur_obj failed: ', e] ).

  cur_objIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_error_info_cur_obj_Cur_obj_glue' 
        ArgCoercions: 'p' ResultType: 'byteVector' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  cur_obj: t0  = (

       cur_obj: t0 IfFail: [|:e| ^error: 'cur_obj: failed: ', e] ).

  cur_obj: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_error_info_cur_obj_Cur_obj__glue' 
        ArgCoercions: 'pb' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  cur_op = (

       cur_opIfFail: [|:e| ^error: 'cur_op failed: ', e] ).

  cur_opIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_error_info_cur_op_Cur_op_glue' ArgCoercions: 
        'p' ResultType: 'byteVector' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  cur_op: t0  = (

       cur_op: t0 IfFail: [|:e| ^error: 'cur_op: failed: ', e] ).

  cur_op: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_error_info_cur_op_Cur_op__glue' 
        ArgCoercions: 'pb' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  id = (

       idIfFail: [|:e| ^error: 'id failed: ', e] ).

  idIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_error_info_id_Id_glue' ArgCoercions: 'p' 
        ResultType: 'byteVector' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  id: t0  = (

       id: t0 IfFail: [|:e| ^error: 'id: failed: ', e] ).

  id: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_error_info_id_Id__glue' ArgCoercions: 'pb' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  msg = (

       msgIfFail: [|:e| ^error: 'msg failed: ', e] ).

  msgIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_error_info_msg_Msg_glue' ArgCoercions: 'p' 
        ResultType: 'byteVector' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  msg: t0  = (

       msg: t0 IfFail: [|:e| ^error: 'msg: failed: ', e] ).

  msg: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_error_info_msg_Msg__glue' ArgCoercions: 'pb' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  operand1 = (

       operand1IfFail: [|:e| ^error: 'operand1 failed: ', e] ).

  operand1IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_error_info_operand1_Operand1_glue' 
        ArgCoercions: 'p' ResultType: 'byteVector' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  operand1: t0  = (

       operand1: t0 IfFail: [|:e| ^error: 'operand1: failed: ', e] ).

  operand1: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_error_info_operand1_Operand1__glue' 
        ArgCoercions: 'pb' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  operand2 = (

       operand2IfFail: [|:e| ^error: 'operand2 failed: ', e] ).

  operand2IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_error_info_operand2_Operand2_glue' 
        ArgCoercions: 'p' ResultType: 'byteVector' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  operand2: t0  = (

       operand2: t0 IfFail: [|:e| ^error: 'operand2: failed: ', e] ).

  operand2: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_error_info_operand2_Operand2__glue' 
        ArgCoercions: 'pb' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  type = (

       typeIfFail: [|:e| ^error: 'type failed: ', e] ).

  typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_error_info_type_Type_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  type: t0  = (

       type: t0 IfFail: [|:e| ^error: 'type: failed: ', e] ).

  type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_error_info_type_Type__glue' ArgCoercions: 
        'p i' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


	}
| )

traits xgl raw facet _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_facet_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl facet deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_facet_delete_Delete_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilFacet = (

       nilFacetIfFail: [|:e| ^error: 'nilFacet failed: ', e] ).

  nilFacetIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilFacet_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl facet deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_facet_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl facet deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_facet_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  color_facet = (

       color_facetIfFail: [|:e| ^error: 'color_facet failed: ', e] ).

  color_facetIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_facet_color_facet_Color_facet_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorFacet deadCopy IfFail: fb ).


  color_facet: t0  = (

       color_facet: t0 IfFail: 
        [|:e| ^error: 'color_facet: failed: ', e] ).

  color_facet: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_facet_color_facet_Color_facet__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_normal_facet = (

       color_normal_facetIfFail: 
        [|:e| ^error: 'color_normal_facet failed: ', e] ).

  color_normal_facetIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_facet_color_normal_facet_Color_normal_facet_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorNormalFacet deadCopy IfFail: fb ).


  color_normal_facet: t0  = (

       color_normal_facet: t0 IfFail: 
        [|:e| ^error: 'color_normal_facet: failed: ', e] ).

  color_normal_facet: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_facet_color_normal_facet_Color_normal_facet__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  normal_facet = (

       normal_facetIfFail: 
        [|:e| ^error: 'normal_facet failed: ', e] ).

  normal_facetIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_facet_normal_facet_Normal_facet_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl normalFacet deadCopy IfFail: fb ).


  normal_facet: t0  = (

       normal_facet: t0 IfFail: 
        [|:e| ^error: 'normal_facet: failed: ', e] ).

  normal_facet: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_facet_normal_facet_Normal_facet__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw facetList _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_facet_list_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl facetList deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_facet_list_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilFacetList = (

       nilFacetListIfFail: 
        [|:e| ^error: 'nilFacetList failed: ', e] ).

  nilFacetListIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilFacetList_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl facetList deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_facet_list_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl facetList deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_facet_list_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  facet_type = (

       facet_typeIfFail: [|:e| ^error: 'facet_type failed: ', e] ).

  facet_typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_facet_list_facet_type_Facet_type_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  facet_type: t0  = (

       facet_type: t0 IfFail: 
        [|:e| ^error: 'facet_type: failed: ', e] ).

  facet_type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_facet_list_facet_type_Facet_type__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  facets_color_facets = (

       facets_color_facetsIfFail: 
        [|:e| ^error: 'facets_color_facets failed: ', e] ).

  facets_color_facetsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_facet_list_facets_color_facets_Facets_color_facets_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorFacet deadCopy IfFail: fb ).


  facets_color_facets: t0  = (

       facets_color_facets: t0 IfFail: 
        [|:e| ^error: 'facets_color_facets: failed: ', e] ).

  facets_color_facets: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_facet_list_facets_color_facets_Facets_color_facets__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  facets_color_normal_facets = (

       facets_color_normal_facetsIfFail: 
        [|:e| ^error: 'facets_color_normal_facets failed: ', e] ).

  facets_color_normal_facetsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_facet_list_facets_color_normal_facets_Facets_color_normal_facets_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorNormalFacet deadCopy IfFail: fb ).


  facets_color_normal_facets: t0  = (

       facets_color_normal_facets: t0 IfFail: 
        [|:e| ^error: 'facets_color_normal_facets: failed: ', e] ).

  facets_color_normal_facets: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_facet_list_facets_color_normal_facets_Facets_color_normal_facets__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  facets_normal_facets = (

       facets_normal_facetsIfFail: 
        [|:e| ^error: 'facets_normal_facets failed: ', e] ).

  facets_normal_facetsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_facet_list_facets_normal_facets_Facets_normal_facets_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl normalFacet deadCopy IfFail: fb ).


  facets_normal_facets: t0  = (

       facets_normal_facets: t0 IfFail: 
        [|:e| ^error: 'facets_normal_facets: failed: ', e] ).

  facets_normal_facets: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_facet_list_facets_normal_facets_Facets_normal_facets__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_facets = (

       num_facetsIfFail: [|:e| ^error: 'num_facets failed: ', e] ).

  num_facetsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_facet_list_num_facets_Num_facets_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_facets: t0  = (

       num_facets: t0 IfFail: 
        [|:e| ^error: 'num_facets: failed: ', e] ).

  num_facets: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_facet_list_num_facets_Num_facets__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Facet_type: t0 Facets_color_facets: t1 Num_facets: t2  = (

       set_Facet_type: t0 Facets_color_facets: t1 Num_facets: t2 
        IfFail: 
        [|:e| ^error: 'set_Facet_type:Facets_color_facets:Num_facets: failed: ', e] ).

  set_Facet_type: t0 Facets_color_facets: t1 Num_facets: t2 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_facet_list_set_Set_Facet_type_Facets_color_facets_Num_facets__glue' 
        ArgCoercions: 'p ipi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 With: t2 IfFail: fb .
    self).


  set_Facet_type: t0 Facets_color_normal_facets: t1 
    Num_facets: t2  = (

       set_Facet_type: t0 Facets_color_normal_facets: t1 
        Num_facets: t2 IfFail: 
        [|:e| ^error: 'set_Facet_type:Facets_color_normal_facets:Num_facets: failed: ', e] ).

  set_Facet_type: t0 Facets_color_normal_facets: t1 
    Num_facets: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_facet_list_set_Set_Facet_type_Facets_color_normal_facets_Num_facets__glue' 
        ArgCoercions: 'p ipi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 With: t2 IfFail: fb .
    self).


  set_Facet_type: t0 Facets_normal_facets: t1 Num_facets: t2  = (

       set_Facet_type: t0 Facets_normal_facets: t1 Num_facets: t2 
        IfFail: 
        [|:e| ^error: 'set_Facet_type:Facets_normal_facets:Num_facets: failed: ', e] ).

  set_Facet_type: t0 Facets_normal_facets: t1 Num_facets: t2 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_facet_list_set_Set_Facet_type_Facets_normal_facets_Num_facets__glue' 
        ArgCoercions: 'p ipi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw facetListList _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_facet_list_list_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl facetListList deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_facet_list_list_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilFacetListList = (

       nilFacetListListIfFail: 
        [|:e| ^error: 'nilFacetListList failed: ', e] ).

  nilFacetListListIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilFacetListList_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl facetListList deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_facet_list_list_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl facetListList deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_facet_list_list_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  facet_lists = (

       facet_listsIfFail: [|:e| ^error: 'facet_lists failed: ', e] ).

  facet_listsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_facet_list_list_facet_lists_Facet_lists_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl facetList deadCopy IfFail: fb ).


  facet_lists: t0  = (

       facet_lists: t0 IfFail: 
        [|:e| ^error: 'facet_lists: failed: ', e] ).

  facet_lists: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_facet_list_list_facet_lists_Facet_lists__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_facet_lists = (

       num_facet_listsIfFail: 
        [|:e| ^error: 'num_facet_lists failed: ', e] ).

  num_facet_listsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_facet_list_list_num_facet_lists_Num_facet_lists_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_facet_lists: t0  = (

       num_facet_lists: t0 IfFail: 
        [|:e| ^error: 'num_facet_lists: failed: ', e] ).

  num_facet_lists: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_facet_list_list_num_facet_lists_Num_facet_lists__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw inquire _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_inquire_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl inquire deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_inquire_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilInquire = (

       nilInquireIfFail: [|:e| ^error: 'nilInquire failed: ', e] ).

  nilInquireIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilInquire_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl inquire deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_inquire_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl inquire deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_inquire_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  antialiasing = (

       antialiasingIfFail: 
        [|:e| ^error: 'antialiasing failed: ', e] ).

  antialiasingIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_antialiasing_Antialiasing_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  antialiasing: t0  = (

       antialiasing: t0 IfFail: 
        [|:e| ^error: 'antialiasing: failed: ', e] ).

  antialiasing: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_antialiasing_Antialiasing__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  color_type = (

       color_typeIfFail: [|:e| ^error: 'color_type failed: ', e] ).

  color_typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_inquire_color_type_Color_type_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorTypeSupported deadCopy IfFail: fb ).


  color_type: t0  = (

       color_type: t0 IfFail: 
        [|:e| ^error: 'color_type: failed: ', e] ).

  color_type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_inquire_color_type_Color_type__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  db_buffer_is_copy = (

       db_buffer_is_copyIfFail: 
        [|:e| ^error: 'db_buffer_is_copy failed: ', e] ).

  db_buffer_is_copyIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_inquire_db_buffer_is_copy_Db_buffer_is_copy_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  db_buffer_is_copy: t0  = (

       db_buffer_is_copy: t0 IfFail: 
        [|:e| ^error: 'db_buffer_is_copy: failed: ', e] ).

  db_buffer_is_copy: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_inquire_db_buffer_is_copy_Db_buffer_is_copy__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  depth = (

       depthIfFail: [|:e| ^error: 'depth failed: ', e] ).

  depthIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_depth_Depth_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  depth: t0  = (

       depth: t0 IfFail: [|:e| ^error: 'depth: failed: ', e] ).

  depth: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_depth_Depth__glue' ArgCoercions: 
        'pi' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  depth_cueing = (

       depth_cueingIfFail: 
        [|:e| ^error: 'depth_cueing failed: ', e] ).

  depth_cueingIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_depth_cueing_Depth_cueing_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  depth_cueing: t0  = (

       depth_cueing: t0 IfFail: 
        [|:e| ^error: 'depth_cueing: failed: ', e] ).

  depth_cueing: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_depth_cueing_Depth_cueing__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  dga_flag = (

       dga_flagIfFail: [|:e| ^error: 'dga_flag failed: ', e] ).

  dga_flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_dga_flag_Dga_flag_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  dga_flag: t0  = (

       dga_flag: t0 IfFail: [|:e| ^error: 'dga_flag: failed: ', e] ).

  dga_flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_dga_flag_Dga_flag__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  double_buffer = (

       double_bufferIfFail: 
        [|:e| ^error: 'double_buffer failed: ', e] ).

  double_bufferIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_double_buffer_Double_buffer_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  double_buffer: t0  = (

       double_buffer: t0 IfFail: 
        [|:e| ^error: 'double_buffer: failed: ', e] ).

  double_buffer: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_double_buffer_Double_buffer__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  height = (

       heightIfFail: [|:e| ^error: 'height failed: ', e] ).

  heightIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_height_Height_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  height: t0  = (

       height: t0 IfFail: [|:e| ^error: 'height: failed: ', e] ).

  height: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_height_Height__glue' ArgCoercions: 
        'pi' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  hlhsr = (

       hlhsrIfFail: [|:e| ^error: 'hlhsr failed: ', e] ).

  hlhsrIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_hlhsr_Hlhsr_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  hlhsr: t0  = (

       hlhsr: t0 IfFail: [|:e| ^error: 'hlhsr: failed: ', e] ).

  hlhsr: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_hlhsr_Hlhsr__glue' ArgCoercions: 
        'p i' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  hlhsr_mode = (

       hlhsr_modeIfFail: [|:e| ^error: 'hlhsr_mode failed: ', e] ).

  hlhsr_modeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_hlhsr_mode_Hlhsr_mode_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  hlhsr_mode: t0  = (

       hlhsr_mode: t0 IfFail: 
        [|:e| ^error: 'hlhsr_mode: failed: ', e] ).

  hlhsr_mode: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_hlhsr_mode_Hlhsr_mode__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  indexed_color = (

       indexed_colorIfFail: 
        [|:e| ^error: 'indexed_color failed: ', e] ).

  indexed_colorIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_indexed_color_Indexed_color_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  indexed_color: t0  = (

       indexed_color: t0 IfFail: 
        [|:e| ^error: 'indexed_color: failed: ', e] ).

  indexed_color: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_indexed_color_Indexed_color__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  lighting = (

       lightingIfFail: [|:e| ^error: 'lighting failed: ', e] ).

  lightingIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_lighting_Lighting_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  lighting: t0  = (

       lighting: t0 IfFail: [|:e| ^error: 'lighting: failed: ', e] ).

  lighting: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_lighting_Lighting__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  maximum_buffer = (

       maximum_bufferIfFail: 
        [|:e| ^error: 'maximum_buffer failed: ', e] ).

  maximum_bufferIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_maximum_buffer_Maximum_buffer_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  maximum_buffer: t0  = (

       maximum_buffer: t0 IfFail: 
        [|:e| ^error: 'maximum_buffer: failed: ', e] ).

  maximum_buffer: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_maximum_buffer_Maximum_buffer__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  name = (

       nameIfFail: [|:e| ^error: 'name failed: ', e] ).

  nameIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_name_Name_glue' ArgCoercions: 'p' 
        ResultType: 'byteVector' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  name: t0  = (

       name: t0 IfFail: [|:e| ^error: 'name: failed: ', e] ).

  name: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_name_Name__glue' ArgCoercions: 'pb' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  picking = (

       pickingIfFail: [|:e| ^error: 'picking failed: ', e] ).

  pickingIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_picking_Picking_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  picking: t0  = (

       picking: t0 IfFail: [|:e| ^error: 'picking: failed: ', e] ).

  picking: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_picking_Picking__glue' ArgCoercions: 
        'p i' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  pt_type = (

       pt_typeIfFail: [|:e| ^error: 'pt_type failed: ', e] ).

  pt_typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_inquire_pt_type_Pt_type_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptTypeSupported deadCopy IfFail: fb ).


  pt_type: t0  = (

       pt_type: t0 IfFail: [|:e| ^error: 'pt_type: failed: ', e] ).

  pt_type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_inquire_pt_type_Pt_type__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  shading = (

       shadingIfFail: [|:e| ^error: 'shading failed: ', e] ).

  shadingIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_shading_Shading_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  shading: t0  = (

       shading: t0 IfFail: [|:e| ^error: 'shading: failed: ', e] ).

  shading: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_shading_Shading__glue' ArgCoercions: 
        'p i' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  stereo = (

       stereoIfFail: [|:e| ^error: 'stereo failed: ', e] ).

  stereoIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_stereo_Stereo_glue' ArgCoercions: 
        'p' ResultType: 'boolean' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  stereo: t0  = (

       stereo: t0 IfFail: [|:e| ^error: 'stereo: failed: ', e] ).

  stereo: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_stereo_Stereo__glue' ArgCoercions: 
        'p ' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  true_color = (

       true_colorIfFail: [|:e| ^error: 'true_color failed: ', e] ).

  true_colorIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_true_color_True_color_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  true_color: t0  = (

       true_color: t0 IfFail: 
        [|:e| ^error: 'true_color: failed: ', e] ).

  true_color: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_true_color_True_color__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  width = (

       widthIfFail: [|:e| ^error: 'width failed: ', e] ).

  widthIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_width_Width_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  width: t0  = (

       width: t0 IfFail: [|:e| ^error: 'width: failed: ', e] ).

  width: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_inquire_width_Width__glue' ArgCoercions: 
        'pi' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw irect _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_irect_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl irect deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_irect_delete_Delete_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilIrect = (

       nilIrectIfFail: [|:e| ^error: 'nilIrect failed: ', e] ).

  nilIrectIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilIrect_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl irect deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_irect_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl irect deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_irect_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  xmax = (

       xmaxIfFail: [|:e| ^error: 'xmax failed: ', e] ).

  xmaxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_irect_xmax_Xmax_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  xmax: t0  = (

       xmax: t0 IfFail: [|:e| ^error: 'xmax: failed: ', e] ).

  xmax: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_irect_xmax_Xmax__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  xmin = (

       xminIfFail: [|:e| ^error: 'xmin failed: ', e] ).

  xminIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_irect_xmin_Xmin_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  xmin: t0  = (

       xmin: t0 IfFail: [|:e| ^error: 'xmin: failed: ', e] ).

  xmin: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_irect_xmin_Xmin__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  ymax = (

       ymaxIfFail: [|:e| ^error: 'ymax failed: ', e] ).

  ymaxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_irect_ymax_Ymax_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  ymax: t0  = (

       ymax: t0 IfFail: [|:e| ^error: 'ymax: failed: ', e] ).

  ymax: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_irect_ymax_Ymax__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  ymin = (

       yminIfFail: [|:e| ^error: 'ymin failed: ', e] ).

  yminIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_irect_ymin_Ymin_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  ymin: t0  = (

       ymin: t0 IfFail: [|:e| ^error: 'ymin: failed: ', e] ).

  ymin: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_irect_ymin_Ymin__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Xmax: t0 Xmin: t1 Ymax: t2 Ymin: t3  = (

       set_Xmax: t0 Xmin: t1 Ymax: t2 Ymin: t3 IfFail: 
        [|:e| ^error: 'set_Xmax:Xmin:Ymax:Ymin: failed: ', e] ).

  set_Xmax: t0 Xmin: t1 Ymax: t2 Ymin: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_irect_set_Set_Xmax_Xmin_Ymax_Ymin__glue' 
        ArgCoercions: 'piiii' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw irectList _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_irect_list_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl irectList deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_irect_list_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilIrectList = (

       nilIrectListIfFail: 
        [|:e| ^error: 'nilIrectList failed: ', e] ).

  nilIrectListIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilIrectList_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl irectList deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_irect_list_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl irectList deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_irect_list_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  num_irects = (

       num_irectsIfFail: [|:e| ^error: 'num_irects failed: ', e] ).

  num_irectsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_irect_list_num_irects_Num_irects_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_irects: t0  = (

       num_irects: t0 IfFail: 
        [|:e| ^error: 'num_irects: failed: ', e] ).

  num_irects: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_irect_list_num_irects_Num_irects__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  rects = (

       rectsIfFail: [|:e| ^error: 'rects failed: ', e] ).

  rectsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_irect_list_rects_Rects_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl irect deadCopy IfFail: fb ).


  rects: t0  = (

       rects: t0 IfFail: [|:e| ^error: 'rects: failed: ', e] ).

  rects: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_irect_list_rects_Rects__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw matrixD2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_d2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl matrixD2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_d2d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilMatrixD2d = (

       nilMatrixD2dIfFail: 
        [|:e| ^error: 'nilMatrixD2d failed: ', e] ).

  nilMatrixD2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilMatrixD2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl matrixD2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_d2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl matrixD2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_d2d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  row: t0 Column: t1  = (

       row: t0 Column: t1 IfFail: 
        [|:e| ^error: 'row:Column: failed: ', e] ).

  row: t0 Column: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_d2d_row_column_Row_Column__glue' 
        ArgCoercions: 'pii' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb ).


  row: t0 Column: t1 Put: t2  = (

       row: t0 Column: t1 Put: t2 IfFail: 
        [|:e| ^error: 'row:Column:Put: failed: ', e] ).

  row: t0 Column: t1 Put: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_matrix_d2d_row_column_put_Row_Column_Put__glue' 
        ArgCoercions: 'piif' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw matrixD3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_d3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl matrixD3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_d3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilMatrixD3d = (

       nilMatrixD3dIfFail: 
        [|:e| ^error: 'nilMatrixD3d failed: ', e] ).

  nilMatrixD3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilMatrixD3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl matrixD3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_d3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl matrixD3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_d3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  row: t0 Column: t1  = (

       row: t0 Column: t1 IfFail: 
        [|:e| ^error: 'row:Column: failed: ', e] ).

  row: t0 Column: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_d3d_row_column_Row_Column__glue' 
        ArgCoercions: 'pii' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb ).


  row: t0 Column: t1 Put: t2  = (

       row: t0 Column: t1 Put: t2 IfFail: 
        [|:e| ^error: 'row:Column:Put: failed: ', e] ).

  row: t0 Column: t1 Put: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_matrix_d3d_row_column_put_Row_Column_Put__glue' 
        ArgCoercions: 'piif' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw matrixF2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_f2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl matrixF2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_f2d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilMatrixF2d = (

       nilMatrixF2dIfFail: 
        [|:e| ^error: 'nilMatrixF2d failed: ', e] ).

  nilMatrixF2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilMatrixF2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl matrixF2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_f2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl matrixF2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_f2d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  row: t0 Column: t1  = (

       row: t0 Column: t1 IfFail: 
        [|:e| ^error: 'row:Column: failed: ', e] ).

  row: t0 Column: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_f2d_row_column_Row_Column__glue' 
        ArgCoercions: 'pii' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb ).


  row: t0 Column: t1 Put: t2  = (

       row: t0 Column: t1 Put: t2 IfFail: 
        [|:e| ^error: 'row:Column:Put: failed: ', e] ).

  row: t0 Column: t1 Put: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_matrix_f2d_row_column_put_Row_Column_Put__glue' 
        ArgCoercions: 'piif' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw matrixF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_f3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl matrixF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_f3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilMatrixF3d = (

       nilMatrixF3dIfFail: 
        [|:e| ^error: 'nilMatrixF3d failed: ', e] ).

  nilMatrixF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilMatrixF3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl matrixF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_f3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl matrixF3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_f3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  row: t0 Column: t1  = (

       row: t0 Column: t1 IfFail: 
        [|:e| ^error: 'row:Column: failed: ', e] ).

  row: t0 Column: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_f3d_row_column_Row_Column__glue' 
        ArgCoercions: 'pii' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb ).


  row: t0 Column: t1 Put: t2  = (

       row: t0 Column: t1 Put: t2 IfFail: 
        [|:e| ^error: 'row:Column:Put: failed: ', e] ).

  row: t0 Column: t1 Put: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_matrix_f3d_row_column_put_Row_Column_Put__glue' 
        ArgCoercions: 'piif' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw matrixI2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_i2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl matrixI2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_i2d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilMatrixI2d = (

       nilMatrixI2dIfFail: 
        [|:e| ^error: 'nilMatrixI2d failed: ', e] ).

  nilMatrixI2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilMatrixI2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl matrixI2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_i2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl matrixI2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_i2d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  row: t0 Column: t1  = (

       row: t0 Column: t1 IfFail: 
        [|:e| ^error: 'row:Column: failed: ', e] ).

  row: t0 Column: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_matrix_i2d_row_column_Row_Column__glue' 
        ArgCoercions: 'pii' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb ).


  row: t0 Column: t1 Put: t2  = (

       row: t0 Column: t1 Put: t2 IfFail: 
        [|:e| ^error: 'row:Column:Put: failed: ', e] ).

  row: t0 Column: t1 Put: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_matrix_i2d_row_column_put_Row_Column_Put__glue' 
        ArgCoercions: 'piii' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw monoText _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_mono_text_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl monoText deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_mono_text_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilMonoText = (

       nilMonoTextIfFail: [|:e| ^error: 'nilMonoText failed: ', e] ).

  nilMonoTextIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilMonoText_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl monoText deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_mono_text_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl monoText deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_mono_text_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  font_obj = (

       font_objIfFail: [|:e| ^error: 'font_obj failed: ', e] ).

  font_objIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_mono_text_font_obj_Font_obj_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl genericObject deadCopy IfFail: fb ).


  font_obj: t0  = (

       font_obj: t0 IfFail: [|:e| ^error: 'font_obj: failed: ', e] ).

  font_obj: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_mono_text_font_obj_Font_obj__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  text = (

       textIfFail: [|:e| ^error: 'text failed: ', e] ).

  textIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_mono_text_text_Text_glue' ArgCoercions: 'p' 
        ResultType: 'byteVector' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  text: t0  = (

       text: t0 IfFail: [|:e| ^error: 'text: failed: ', e] ).

  text: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_mono_text_text_Text__glue' ArgCoercions: 
        'pb' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw monoTextList _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_mono_text_list_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl monoTextList deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_mono_text_list_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilMonoTextList = (

       nilMonoTextListIfFail: 
        [|:e| ^error: 'nilMonoTextList failed: ', e] ).

  nilMonoTextListIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilMonoTextList_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl monoTextList deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_mono_text_list_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl monoTextList deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_mono_text_list_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  mono_list = (

       mono_listIfFail: [|:e| ^error: 'mono_list failed: ', e] ).

  mono_listIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_mono_text_list_mono_list_Mono_list_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl monoText deadCopy IfFail: fb ).


  mono_list: t0  = (

       mono_list: t0 IfFail: 
        [|:e| ^error: 'mono_list: failed: ', e] ).

  mono_list: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_mono_text_list_mono_list_Mono_list__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  mono_num = (

       mono_numIfFail: [|:e| ^error: 'mono_num failed: ', e] ).

  mono_numIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_mono_text_list_mono_num_Mono_num_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  mono_num: t0  = (

       mono_num: t0 IfFail: [|:e| ^error: 'mono_num: failed: ', e] ).

  mono_num: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_mono_text_list_mono_num_Mono_num__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw normalFacet _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_normal_facet_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl normalFacet deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_normal_facet_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilNormalFacet = (

       nilNormalFacetIfFail: 
        [|:e| ^error: 'nilNormalFacet failed: ', e] ).

  nilNormalFacetIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilNormalFacet_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl normalFacet deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_normal_facet_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl normalFacet deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_normal_facet_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  normal = (

       normalIfFail: [|:e| ^error: 'normal failed: ', e] ).

  normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_normal_facet_normal_Normal_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  normal: t0  = (

       normal: t0 IfFail: [|:e| ^error: 'normal: failed: ', e] ).

  normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_normal_facet_normal_Normal__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw nuBsplineCurve _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nu_bspline_curve_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl nuBsplineCurve deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nu_bspline_curve_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilNuBsplineCurve = (

       nilNuBsplineCurveIfFail: 
        [|:e| ^error: 'nilNuBsplineCurve failed: ', e] ).

  nilNuBsplineCurveIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilNuBsplineCurve_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl nuBsplineCurve deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nu_bspline_curve_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl nuBsplineCurve deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nu_bspline_curve_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  ctrl_pts = (

       ctrl_ptsIfFail: [|:e| ^error: 'ctrl_pts failed: ', e] ).

  ctrl_ptsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nu_bspline_curve_ctrl_pts_Ctrl_pts_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptList deadCopy IfFail: fb ).


  ctrl_pts: t0  = (

       ctrl_pts: t0 IfFail: [|:e| ^error: 'ctrl_pts: failed: ', e] ).

  ctrl_pts: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nu_bspline_curve_ctrl_pts_Ctrl_pts__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  knot_vector = (

       knot_vectorIfFail: [|:e| ^error: 'knot_vector failed: ', e] ).

  knot_vectorIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_nu_bspline_curve_knot_vector_Knot_vector_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  knot_vector: t0  = (

       knot_vector: t0 IfFail: 
        [|:e| ^error: 'knot_vector: failed: ', e] ).

  knot_vector: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_nu_bspline_curve_knot_vector_Knot_vector__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_knots = (

       num_knotsIfFail: [|:e| ^error: 'num_knots failed: ', e] ).

  num_knotsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nu_bspline_curve_num_knots_Num_knots_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_knots: t0  = (

       num_knots: t0 IfFail: 
        [|:e| ^error: 'num_knots: failed: ', e] ).

  num_knots: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nu_bspline_curve_num_knots_Num_knots__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  order = (

       orderIfFail: [|:e| ^error: 'order failed: ', e] ).

  orderIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nu_bspline_curve_order_Order_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  order: t0  = (

       order: t0 IfFail: [|:e| ^error: 'order: failed: ', e] ).

  order: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nu_bspline_curve_order_Order__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  range = (

       rangeIfFail: [|:e| ^error: 'range failed: ', e] ).

  rangeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nu_bspline_curve_range_Range_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl boundsF1d deadCopy IfFail: fb ).


  range: t0  = (

       range: t0 IfFail: [|:e| ^error: 'range: failed: ', e] ).

  range: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nu_bspline_curve_range_Range__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  trim_curve_vis = (

       trim_curve_visIfFail: 
        [|:e| ^error: 'trim_curve_vis failed: ', e] ).

  trim_curve_visIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_nu_bspline_curve_trim_curve_vis_Trim_curve_vis_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  trim_curve_vis: t0  = (

       trim_curve_vis: t0 IfFail: 
        [|:e| ^error: 'trim_curve_vis: failed: ', e] ).

  trim_curve_vis: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_nu_bspline_curve_trim_curve_vis_Trim_curve_vis__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Ctrl_pts: t0 Knot_vector: t1 Num_knots: t2 Order: t3 
    Range: t4 Trim_curve_vis: t5  = (

       set_Ctrl_pts: t0 Knot_vector: t1 Num_knots: t2 Order: t3 
        Range: t4 Trim_curve_vis: t5 IfFail: 
        [|:e| ^error: 'set_Ctrl_pts:Knot_vector:Num_knots:Order:Range:Trim_curve_vis: failed: ', e] ).

  set_Ctrl_pts: t0 Knot_vector: t1 Num_knots: t2 Order: t3 
    Range: t4 Trim_curve_vis: t5 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nu_bspline_curve_set_Set_Ctrl_pts_Knot_vector_Num_knots_Order_Range_Trim_curve_vis__glue' 
        ArgCoercions: 'pp iiip ' ResultType: 'integer' 
        Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 With: t2 With: t3 
        With: t4 With: t5 IfFail: fb .
    self).


	}
| )

traits xgl raw nurbsCurve _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nurbs_curve_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl nurbsCurve deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nurbs_curve_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilNurbsCurve = (

       nilNurbsCurveIfFail: 
        [|:e| ^error: 'nilNurbsCurve failed: ', e] ).

  nilNurbsCurveIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilNurbsCurve_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl nurbsCurve deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nurbs_curve_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl nurbsCurve deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nurbs_curve_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  ctrl_pts = (

       ctrl_ptsIfFail: [|:e| ^error: 'ctrl_pts failed: ', e] ).

  ctrl_ptsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nurbs_curve_ctrl_pts_Ctrl_pts_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptList deadCopy IfFail: fb ).


  ctrl_pts: t0  = (

       ctrl_pts: t0 IfFail: [|:e| ^error: 'ctrl_pts: failed: ', e] ).

  ctrl_pts: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nurbs_curve_ctrl_pts_Ctrl_pts__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  knot_vector = (

       knot_vectorIfFail: [|:e| ^error: 'knot_vector failed: ', e] ).

  knot_vectorIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nurbs_curve_knot_vector_Knot_vector_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  knot_vector: t0  = (

       knot_vector: t0 IfFail: 
        [|:e| ^error: 'knot_vector: failed: ', e] ).

  knot_vector: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nurbs_curve_knot_vector_Knot_vector__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_knots = (

       num_knotsIfFail: [|:e| ^error: 'num_knots failed: ', e] ).

  num_knotsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nurbs_curve_num_knots_Num_knots_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_knots: t0  = (

       num_knots: t0 IfFail: 
        [|:e| ^error: 'num_knots: failed: ', e] ).

  num_knots: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nurbs_curve_num_knots_Num_knots__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  order = (

       orderIfFail: [|:e| ^error: 'order failed: ', e] ).

  orderIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nurbs_curve_order_Order_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  order: t0  = (

       order: t0 IfFail: [|:e| ^error: 'order: failed: ', e] ).

  order: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nurbs_curve_order_Order__glue' ArgCoercions: 
        'pi' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Ctrl_pts: t0 Knot_vector: t1 Num_knots: t2 Order: t3  = (

       set_Ctrl_pts: t0 Knot_vector: t1 Num_knots: t2 Order: t3 
        IfFail: 
        [|:e| ^error: 'set_Ctrl_pts:Knot_vector:Num_knots:Order: failed: ', e] ).

  set_Ctrl_pts: t0 Knot_vector: t1 Num_knots: t2 Order: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_curve_set_Set_Ctrl_pts_Knot_vector_Num_knots_Order__glue' 
        ArgCoercions: 'pp iii' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 With: t2 With: t3 
        IfFail: fb .
    self).


	}
| )

traits xgl raw nurbsSurf _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nurbs_surf_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl nurbsSurf deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nurbs_surf_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilNurbsSurf = (

       nilNurbsSurfIfFail: 
        [|:e| ^error: 'nilNurbsSurf failed: ', e] ).

  nilNurbsSurfIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilNurbsSurf_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl nurbsSurf deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nurbs_surf_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl nurbsSurf deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nurbs_surf_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  ctrl_pts = (

       ctrl_ptsIfFail: [|:e| ^error: 'ctrl_pts failed: ', e] ).

  ctrl_ptsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nurbs_surf_ctrl_pts_Ctrl_pts_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptList deadCopy IfFail: fb ).


  ctrl_pts: t0  = (

       ctrl_pts: t0 IfFail: [|:e| ^error: 'ctrl_pts: failed: ', e] ).

  ctrl_pts: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nurbs_surf_ctrl_pts_Ctrl_pts__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  knot_vector_u = (

       knot_vector_uIfFail: 
        [|:e| ^error: 'knot_vector_u failed: ', e] ).

  knot_vector_uIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nurbs_surf_knot_vector_u_Knot_vector_u_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  knot_vector_u: t0  = (

       knot_vector_u: t0 IfFail: 
        [|:e| ^error: 'knot_vector_u: failed: ', e] ).

  knot_vector_u: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_nurbs_surf_knot_vector_u_Knot_vector_u__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  knot_vector_v = (

       knot_vector_vIfFail: 
        [|:e| ^error: 'knot_vector_v failed: ', e] ).

  knot_vector_vIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nurbs_surf_knot_vector_v_Knot_vector_v_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  knot_vector_v: t0  = (

       knot_vector_v: t0 IfFail: 
        [|:e| ^error: 'knot_vector_v: failed: ', e] ).

  knot_vector_v: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_nurbs_surf_knot_vector_v_Knot_vector_v__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_knots_u = (

       num_knots_uIfFail: [|:e| ^error: 'num_knots_u failed: ', e] ).

  num_knots_uIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nurbs_surf_num_knots_u_Num_knots_u_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_knots_u: t0  = (

       num_knots_u: t0 IfFail: 
        [|:e| ^error: 'num_knots_u: failed: ', e] ).

  num_knots_u: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nurbs_surf_num_knots_u_Num_knots_u__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_knots_v = (

       num_knots_vIfFail: [|:e| ^error: 'num_knots_v failed: ', e] ).

  num_knots_vIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nurbs_surf_num_knots_v_Num_knots_v_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_knots_v: t0  = (

       num_knots_v: t0 IfFail: 
        [|:e| ^error: 'num_knots_v: failed: ', e] ).

  num_knots_v: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nurbs_surf_num_knots_v_Num_knots_v__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  order_u = (

       order_uIfFail: [|:e| ^error: 'order_u failed: ', e] ).

  order_uIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nurbs_surf_order_u_Order_u_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  order_u: t0  = (

       order_u: t0 IfFail: [|:e| ^error: 'order_u: failed: ', e] ).

  order_u: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nurbs_surf_order_u_Order_u__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  order_v = (

       order_vIfFail: [|:e| ^error: 'order_v failed: ', e] ).

  order_vIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nurbs_surf_order_v_Order_v_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  order_v: t0  = (

       order_v: t0 IfFail: [|:e| ^error: 'order_v: failed: ', e] ).

  order_v: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_nurbs_surf_order_v_Order_v__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Ctrl_pts: t0 Knot_vector_u: t1 Knot_vector_v: t2 
    Num_knots_u: t3 Num_knots_v: t4 Order_u: t5 Order_v: t6  = (

       set_Ctrl_pts: t0 Knot_vector_u: t1 Knot_vector_v: t2 
        Num_knots_u: t3 Num_knots_v: t4 Order_u: t5 
        Order_v: t6 IfFail: 
        [|:e| ^error: 'set_Ctrl_pts:Knot_vector_u:Knot_vector_v:Num_knots_u:Num_knots_v:Order_u:Order_v: failed: ', e] ).

  set_Ctrl_pts: t0 Knot_vector_u: t1 Knot_vector_v: t2 
    Num_knots_u: t3 Num_knots_v: t4 Order_u: t5 Order_v: t6 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_set_Set_Ctrl_pts_Knot_vector_u_Knot_vector_v_Num_knots_u_Num_knots_v_Order_u_Order_v__glue' 
        ArgCoercions: 'pp i iiiii' ResultType: 'integer' 
        Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 With: t2 With: 0 With: 
        t3 With: t4 With: t5 With: t6 IfFail: fb .
    self).


	}
| )

traits xgl raw nurbsSurfSimpleGeom _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nurbs_surf_simple_geom_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl nurbsSurfSimpleGeom deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nurbs_surf_simple_geom_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilNurbsSurfSimpleGeom = (

       nilNurbsSurfSimpleGeomIfFail: 
        [|:e| ^error: 'nilNurbsSurfSimpleGeom failed: ', e] ).

  nilNurbsSurfSimpleGeomIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilNurbsSurfSimpleGeom_glue' ArgCoercions: 
        ' ' ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl nurbsSurfSimpleGeom deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nurbs_surf_simple_geom_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl nurbsSurfSimpleGeom deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_nurbs_surf_simple_geom_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  geom_desc_conical_apex = (

       geom_desc_conical_apexIfFail: 
        [|:e| ^error: 'geom_desc_conical_apex failed: ', e] ).

  geom_desc_conical_apexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_conical_apex_Geom_desc_conical_apex_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  geom_desc_conical_apex: t0  = (

       geom_desc_conical_apex: t0 IfFail: 
        [|:e| ^error: 'geom_desc_conical_apex: failed: ', e] ).

  geom_desc_conical_apex: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_conical_apex_Geom_desc_conical_apex__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  geom_desc_conical_axis_dir = (

       geom_desc_conical_axis_dirIfFail: 
        [|:e| ^error: 'geom_desc_conical_axis_dir failed: ', e] ).

  geom_desc_conical_axis_dirIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_conical_axis_dir_Geom_desc_conical_axis_dir_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  geom_desc_conical_axis_dir: t0  = (

       geom_desc_conical_axis_dir: t0 IfFail: 
        [|:e| ^error: 'geom_desc_conical_axis_dir: failed: ', e] ).

  geom_desc_conical_axis_dir: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_conical_axis_dir_Geom_desc_conical_axis_dir__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  geom_desc_conical_cone_angle = (

       geom_desc_conical_cone_angleIfFail: 
        [|:e| ^error: 'geom_desc_conical_cone_angle failed: ', e] ).

  geom_desc_conical_cone_angleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_conical_cone_angle_Geom_desc_conical_cone_angle_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  geom_desc_conical_cone_angle: t0  = (

       geom_desc_conical_cone_angle: t0 IfFail: 
        [|:e| ^error: 'geom_desc_conical_cone_angle: failed: ', e] ).

  geom_desc_conical_cone_angle: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_conical_cone_angle_Geom_desc_conical_cone_angle__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  geom_desc_conical_norm_flag = (

       geom_desc_conical_norm_flagIfFail: 
        [|:e| ^error: 'geom_desc_conical_norm_flag failed: ', e] ).

  geom_desc_conical_norm_flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_conical_norm_flag_Geom_desc_conical_norm_flag_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  geom_desc_conical_norm_flag: t0  = (

       geom_desc_conical_norm_flag: t0 IfFail: 
        [|:e| ^error: 'geom_desc_conical_norm_flag: failed: ', e] ).

  geom_desc_conical_norm_flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_conical_norm_flag_Geom_desc_conical_norm_flag__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  geom_desc_cylindrical_axial_pt = (

       geom_desc_cylindrical_axial_ptIfFail: 
        [|:e| ^error: 'geom_desc_cylindrical_axial_pt failed: ', e] ).

  geom_desc_cylindrical_axial_ptIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_cylindrical_axial_pt_Geom_desc_cylindrical_axial_pt_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  geom_desc_cylindrical_axial_pt: t0  = (

       geom_desc_cylindrical_axial_pt: t0 IfFail: 
        [|:e| ^error: 'geom_desc_cylindrical_axial_pt: failed: ', e] ).

  geom_desc_cylindrical_axial_pt: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_cylindrical_axial_pt_Geom_desc_cylindrical_axial_pt__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  geom_desc_cylindrical_axis_dir = (

       geom_desc_cylindrical_axis_dirIfFail: 
        [|:e| ^error: 'geom_desc_cylindrical_axis_dir failed: ', e] ).

  geom_desc_cylindrical_axis_dirIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_cylindrical_axis_dir_Geom_desc_cylindrical_axis_dir_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  geom_desc_cylindrical_axis_dir: t0  = (

       geom_desc_cylindrical_axis_dir: t0 IfFail: 
        [|:e| ^error: 'geom_desc_cylindrical_axis_dir: failed: ', e] ).

  geom_desc_cylindrical_axis_dir: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_cylindrical_axis_dir_Geom_desc_cylindrical_axis_dir__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  geom_desc_cylindrical_norm_flag = (

       geom_desc_cylindrical_norm_flagIfFail: 
        [|:e| ^error: 'geom_desc_cylindrical_norm_flag failed: ', e] ).

  geom_desc_cylindrical_norm_flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_cylindrical_norm_flag_Geom_desc_cylindrical_norm_flag_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  geom_desc_cylindrical_norm_flag: t0  = (

       geom_desc_cylindrical_norm_flag: t0 IfFail: 
        [|:e| ^error: 'geom_desc_cylindrical_norm_flag: failed: ', e] ).

  geom_desc_cylindrical_norm_flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_cylindrical_norm_flag_Geom_desc_cylindrical_norm_flag__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  geom_desc_cylindrical_radius = (

       geom_desc_cylindrical_radiusIfFail: 
        [|:e| ^error: 'geom_desc_cylindrical_radius failed: ', e] ).

  geom_desc_cylindrical_radiusIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_cylindrical_radius_Geom_desc_cylindrical_radius_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  geom_desc_cylindrical_radius: t0  = (

       geom_desc_cylindrical_radius: t0 IfFail: 
        [|:e| ^error: 'geom_desc_cylindrical_radius: failed: ', e] ).

  geom_desc_cylindrical_radius: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_cylindrical_radius_Geom_desc_cylindrical_radius__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  geom_desc_planar = (

       geom_desc_planarIfFail: 
        [|:e| ^error: 'geom_desc_planar failed: ', e] ).

  geom_desc_planarIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_planar_Geom_desc_planar_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl plane deadCopy IfFail: fb ).


  geom_desc_planar: t0  = (

       geom_desc_planar: t0 IfFail: 
        [|:e| ^error: 'geom_desc_planar: failed: ', e] ).

  geom_desc_planar: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_planar_Geom_desc_planar__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  geom_desc_spherical_center = (

       geom_desc_spherical_centerIfFail: 
        [|:e| ^error: 'geom_desc_spherical_center failed: ', e] ).

  geom_desc_spherical_centerIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_spherical_center_Geom_desc_spherical_center_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  geom_desc_spherical_center: t0  = (

       geom_desc_spherical_center: t0 IfFail: 
        [|:e| ^error: 'geom_desc_spherical_center: failed: ', e] ).

  geom_desc_spherical_center: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_spherical_center_Geom_desc_spherical_center__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  geom_desc_spherical_norm_flag = (

       geom_desc_spherical_norm_flagIfFail: 
        [|:e| ^error: 'geom_desc_spherical_norm_flag failed: ', e] ).

  geom_desc_spherical_norm_flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_spherical_norm_flag_Geom_desc_spherical_norm_flag_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  geom_desc_spherical_norm_flag: t0  = (

       geom_desc_spherical_norm_flag: t0 IfFail: 
        [|:e| ^error: 'geom_desc_spherical_norm_flag: failed: ', e] ).

  geom_desc_spherical_norm_flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_spherical_norm_flag_Geom_desc_spherical_norm_flag__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  geom_desc_spherical_radius = (

       geom_desc_spherical_radiusIfFail: 
        [|:e| ^error: 'geom_desc_spherical_radius failed: ', e] ).

  geom_desc_spherical_radiusIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_spherical_radius_Geom_desc_spherical_radius_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  geom_desc_spherical_radius: t0  = (

       geom_desc_spherical_radius: t0 IfFail: 
        [|:e| ^error: 'geom_desc_spherical_radius: failed: ', e] ).

  geom_desc_spherical_radius: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_geom_desc_spherical_radius_Geom_desc_spherical_radius__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  surf_type = (

       surf_typeIfFail: [|:e| ^error: 'surf_type failed: ', e] ).

  surf_typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_nurbs_surf_simple_geom_surf_type_Surf_type_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  surf_type: t0  = (

       surf_type: t0 IfFail: 
        [|:e| ^error: 'surf_type: failed: ', e] ).

  surf_type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_nurbs_surf_simple_geom_surf_type_Surf_type__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Geom_desc_conical_apex: t0 Geom_desc_conical_axis_dir: 
    t1 Geom_desc_conical_cone_angle: t2 
    Geom_desc_conical_norm_flag: t3 Surf_type: t4  = (

       set_Geom_desc_conical_apex: t0 Geom_desc_conical_axis_dir: 
        t1 Geom_desc_conical_cone_angle: t2 
        Geom_desc_conical_norm_flag: t3 Surf_type: t4 
        IfFail: 
        [|:e| ^error: 'set_Geom_desc_conical_apex:Geom_desc_conical_axis_dir:Geom_desc_conical_cone_angle:Geom_desc_conical_norm_flag:Surf_type: failed: ', e] ).

  set_Geom_desc_conical_apex: t0 Geom_desc_conical_axis_dir: 
    t1 Geom_desc_conical_cone_angle: t2 
    Geom_desc_conical_norm_flag: t3 Surf_type: t4 IfFail: 
    fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_set_Set_Geom_desc_conical_apex_Geom_desc_conical_axis_dir_Geom_desc_conical_cone_angle_Geom_desc_conical_norm_flag_Surf_type__glue' 
        ArgCoercions: 'pppf  i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: 0 IfFail: fb .
    self).


  set_Geom_desc_cylindrical_axial_pt: t0 
    Geom_desc_cylindrical_axis_dir: t1 
    Geom_desc_cylindrical_norm_flag: t2 
    Geom_desc_cylindrical_radius: t3 Surf_type: t4  = (

       set_Geom_desc_cylindrical_axial_pt: t0 
        Geom_desc_cylindrical_axis_dir: t1 
        Geom_desc_cylindrical_norm_flag: t2 
        Geom_desc_cylindrical_radius: t3 Surf_type: t4 
        IfFail: 
        [|:e| ^error: 'set_Geom_desc_cylindrical_axial_pt:Geom_desc_cylindrical_axis_dir:Geom_desc_cylindrical_norm_flag:Geom_desc_cylindrical_radius:Surf_type: failed: ', e] ).

  set_Geom_desc_cylindrical_axial_pt: t0 
    Geom_desc_cylindrical_axis_dir: t1 
    Geom_desc_cylindrical_norm_flag: t2 
    Geom_desc_cylindrical_radius: t3 Surf_type: t4 IfFail: 
    fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_set_Set_Geom_desc_cylindrical_axial_pt_Geom_desc_cylindrical_axis_dir_Geom_desc_cylindrical_norm_flag_Geom_desc_cylindrical_radius_Surf_type__glue' 
        ArgCoercions: 'ppp f i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: 0 IfFail: fb .
    self).


  set_Geom_desc_planar: t0 Surf_type: t1  = (

       set_Geom_desc_planar: t0 Surf_type: t1 IfFail: 
        [|:e| ^error: 'set_Geom_desc_planar:Surf_type: failed: ', e] ).

  set_Geom_desc_planar: t0 Surf_type: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_set_Set_Geom_desc_planar_Surf_type__glue' 
        ArgCoercions: 'pp i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 IfFail: fb .
    self).


  set_Geom_desc_spherical_center: t0 
    Geom_desc_spherical_norm_flag: t1 
    Geom_desc_spherical_radius: t2 Surf_type: t3  = (

       set_Geom_desc_spherical_center: t0 
        Geom_desc_spherical_norm_flag: t1 
        Geom_desc_spherical_radius: t2 Surf_type: t3 
        IfFail: 
        [|:e| ^error: 'set_Geom_desc_spherical_center:Geom_desc_spherical_norm_flag:Geom_desc_spherical_radius:Surf_type: failed: ', e] ).

  set_Geom_desc_spherical_center: t0 
    Geom_desc_spherical_norm_flag: t1 
    Geom_desc_spherical_radius: t2 Surf_type: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_nurbs_surf_simple_geom_set_Set_Geom_desc_spherical_center_Geom_desc_spherical_norm_flag_Geom_desc_spherical_radius_Surf_type__glue' 
        ArgCoercions: 'pp f i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


	}
| )

traits xgl raw objDesc _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_obj_desc_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl objDesc deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_obj_desc_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilObjDesc = (

       nilObjDescIfFail: [|:e| ^error: 'nilObjDesc failed: ', e] ).

  nilObjDescIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilObjDesc_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl objDesc deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_obj_desc_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl objDesc deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_obj_desc_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  accum_buf_raster = (

       accum_buf_rasterIfFail: 
        [|:e| ^error: 'accum_buf_raster failed: ', e] ).

  accum_buf_rasterIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_obj_desc_accum_buf_raster_Accum_buf_raster_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl genericObject deadCopy IfFail: fb ).


  accum_buf_raster: t0  = (

       accum_buf_raster: t0 IfFail: 
        [|:e| ^error: 'accum_buf_raster: failed: ', e] ).

  accum_buf_raster: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_obj_desc_accum_buf_raster_Accum_buf_raster__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  sfont_name = (

       sfont_nameIfFail: [|:e| ^error: 'sfont_name failed: ', e] ).

  sfont_nameIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_obj_desc_sfont_name_Sfont_name_glue' 
        ArgCoercions: 'p' ResultType: 'byteVector' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  sfont_name: t0  = (

       sfont_name: t0 IfFail: 
        [|:e| ^error: 'sfont_name: failed: ', e] ).

  sfont_name: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_obj_desc_sfont_name_Sfont_name__glue' 
        ArgCoercions: 'pb' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  stream_desc = (

       stream_descIfFail: [|:e| ^error: 'stream_desc failed: ', e] ).

  stream_descIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_obj_desc_stream_desc_Stream_desc_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl streamInfo deadCopy IfFail: fb ).


  stream_desc: t0  = (

       stream_desc: t0 IfFail: 
        [|:e| ^error: 'stream_desc: failed: ', e] ).

  stream_desc: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_obj_desc_stream_desc_Stream_desc__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  stream_name = (

       stream_nameIfFail: [|:e| ^error: 'stream_name failed: ', e] ).

  stream_nameIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_obj_desc_stream_name_Stream_name_glue' 
        ArgCoercions: 'p' ResultType: 'byteVector' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  stream_name: t0  = (

       stream_name: t0 IfFail: 
        [|:e| ^error: 'stream_name: failed: ', e] ).

  stream_name: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_obj_desc_stream_name_Stream_name__glue' 
        ArgCoercions: 'pb' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  win_ras_desc = (

       win_ras_descIfFail: 
        [|:e| ^error: 'win_ras_desc failed: ', e] ).

  win_ras_descIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_obj_desc_win_ras_desc_Win_ras_desc_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl xWindow deadCopy IfFail: fb ).


  win_ras_desc: t0  = (

       win_ras_desc: t0 IfFail: 
        [|:e| ^error: 'win_ras_desc: failed: ', e] ).

  win_ras_desc: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_obj_desc_win_ras_desc_Win_ras_desc__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  win_ras_type = (

       win_ras_typeIfFail: 
        [|:e| ^error: 'win_ras_type failed: ', e] ).

  win_ras_typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_obj_desc_win_ras_type_Win_ras_type_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  win_ras_type: t0  = (

       win_ras_type: t0 IfFail: 
        [|:e| ^error: 'win_ras_type: failed: ', e] ).

  win_ras_type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_obj_desc_win_ras_type_Win_ras_type__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


	}
| )

traits xgl raw pickInfo _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pick_info_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl pickInfo deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pick_info_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPickInfo = (

       nilPickInfoIfFail: [|:e| ^error: 'nilPickInfo failed: ', e] ).

  nilPickInfoIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPickInfo_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl pickInfo deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pick_info_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl pickInfo deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pick_info_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  id1 = (

       id1IfFail: [|:e| ^error: 'id1 failed: ', e] ).

  id1IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pick_info_id1_Id1_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  id1: t0  = (

       id1: t0 IfFail: [|:e| ^error: 'id1: failed: ', e] ).

  id1: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pick_info_id1_Id1__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  id2 = (

       id2IfFail: [|:e| ^error: 'id2 failed: ', e] ).

  id2IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pick_info_id2_Id2_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  id2: t0  = (

       id2: t0 IfFail: [|:e| ^error: 'id2: failed: ', e] ).

  id2: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pick_info_id2_Id2__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  vertex_flag = (

       vertex_flagIfFail: [|:e| ^error: 'vertex_flag failed: ', e] ).

  vertex_flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pick_info_vertex_flag_Vertex_flag_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  vertex_flag: t0  = (

       vertex_flag: t0 IfFail: 
        [|:e| ^error: 'vertex_flag: failed: ', e] ).

  vertex_flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pick_info_vertex_flag_Vertex_flag__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Id1: t0 Id2: t1 Vertex_flag: t2  = (

       set_Id1: t0 Id2: t1 Vertex_flag: t2 IfFail: 
        [|:e| ^error: 'set_Id1:Id2:Vertex_flag: failed: ', e] ).

  set_Id1: t0 Id2: t1 Vertex_flag: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pick_info_set_Set_Id1_Id2_Vertex_flag__glue' 
        ArgCoercions: 'piii' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw plane _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_plane_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl plane deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_plane_delete_Delete_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPlane = (

       nilPlaneIfFail: [|:e| ^error: 'nilPlane failed: ', e] ).

  nilPlaneIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPlane_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl plane deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_plane_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl plane deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_plane_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  normal = (

       normalIfFail: [|:e| ^error: 'normal failed: ', e] ).

  normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_plane_normal_Normal_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptD3d deadCopy IfFail: fb ).


  normal: t0  = (

       normal: t0 IfFail: [|:e| ^error: 'normal: failed: ', e] ).

  normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_plane_normal_Normal__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pt = (

       ptIfFail: [|:e| ^error: 'pt failed: ', e] ).

  ptIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_plane_pt_Pt_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptD3d deadCopy IfFail: fb ).


  pt: t0  = (

       pt: t0 IfFail: [|:e| ^error: 'pt: failed: ', e] ).

  pt: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_plane_pt_Pt__glue' ArgCoercions: 'pp' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw planeList _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_plane_list_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl planeList deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_plane_list_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPlaneList = (

       nilPlaneListIfFail: 
        [|:e| ^error: 'nilPlaneList failed: ', e] ).

  nilPlaneListIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPlaneList_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl planeList deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_plane_list_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl planeList deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_plane_list_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  num_planes = (

       num_planesIfFail: [|:e| ^error: 'num_planes failed: ', e] ).

  num_planesIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_plane_list_num_planes_Num_planes_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_planes: t0  = (

       num_planes: t0 IfFail: 
        [|:e| ^error: 'num_planes: failed: ', e] ).

  num_planes: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_plane_list_num_planes_Num_planes__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  planes = (

       planesIfFail: [|:e| ^error: 'planes failed: ', e] ).

  planesIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_plane_list_planes_Planes_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl plane deadCopy IfFail: fb ).


  planes: t0  = (

       planes: t0 IfFail: [|:e| ^error: 'planes: failed: ', e] ).

  planes: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_plane_list_planes_Planes__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw pt _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl pt deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_delete_Delete_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPt = (

       nilPtIfFail: [|:e| ^error: 'nilPt failed: ', e] ).

  nilPtIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPt_glue' ArgCoercions: ' ' ResultType: 
        'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl pt deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl pt deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_at_put_At_Put__glue' ArgCoercions: 'pip' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  pt_d2d = (

       pt_d2dIfFail: [|:e| ^error: 'pt_d2d failed: ', e] ).

  pt_d2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_pt_d2d_Pt_d2d_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptD2d deadCopy IfFail: fb ).


  pt_d2d: t0  = (

       pt_d2d: t0 IfFail: [|:e| ^error: 'pt_d2d: failed: ', e] ).

  pt_d2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_pt_d2d_Pt_d2d__glue' ArgCoercions: 'pp' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pt_d3d = (

       pt_d3dIfFail: [|:e| ^error: 'pt_d3d failed: ', e] ).

  pt_d3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_pt_d3d_Pt_d3d_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptD3d deadCopy IfFail: fb ).


  pt_d3d: t0  = (

       pt_d3d: t0 IfFail: [|:e| ^error: 'pt_d3d: failed: ', e] ).

  pt_d3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_pt_d3d_Pt_d3d__glue' ArgCoercions: 'pp' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pt_f2d = (

       pt_f2dIfFail: [|:e| ^error: 'pt_f2d failed: ', e] ).

  pt_f2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_pt_f2d_Pt_f2d_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF2d deadCopy IfFail: fb ).


  pt_f2d: t0  = (

       pt_f2d: t0 IfFail: [|:e| ^error: 'pt_f2d: failed: ', e] ).

  pt_f2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_pt_f2d_Pt_f2d__glue' ArgCoercions: 'pp' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pt_f3d = (

       pt_f3dIfFail: [|:e| ^error: 'pt_f3d failed: ', e] ).

  pt_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_pt_f3d_Pt_f3d_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  pt_f3d: t0  = (

       pt_f3d: t0 IfFail: [|:e| ^error: 'pt_f3d: failed: ', e] ).

  pt_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_pt_f3d_Pt_f3d__glue' ArgCoercions: 'pp' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pt_i2d = (

       pt_i2dIfFail: [|:e| ^error: 'pt_i2d failed: ', e] ).

  pt_i2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_pt_i2d_Pt_i2d_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptI2d deadCopy IfFail: fb ).


  pt_i2d: t0  = (

       pt_i2d: t0 IfFail: [|:e| ^error: 'pt_i2d: failed: ', e] ).

  pt_i2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_pt_i2d_Pt_i2d__glue' ArgCoercions: 'pp' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pt_type = (

       pt_typeIfFail: [|:e| ^error: 'pt_type failed: ', e] ).

  pt_typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_pt_type_Pt_type_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  pt_type: t0  = (

       pt_type: t0 IfFail: [|:e| ^error: 'pt_type: failed: ', e] ).

  pt_type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_pt_type_Pt_type__glue' ArgCoercions: 
        'p i' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Pt_d2d: t0 Pt_type: t1  = (

       set_Pt_d2d: t0 Pt_type: t1 IfFail: 
        [|:e| ^error: 'set_Pt_d2d:Pt_type: failed: ', e] ).

  set_Pt_d2d: t0 Pt_type: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_set_Set_Pt_d2d_Pt_type__glue' 
        ArgCoercions: 'pp i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 IfFail: fb .
    self).


  set_Pt_d3d: t0 Pt_type: t1  = (

       set_Pt_d3d: t0 Pt_type: t1 IfFail: 
        [|:e| ^error: 'set_Pt_d3d:Pt_type: failed: ', e] ).

  set_Pt_d3d: t0 Pt_type: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_set_Set_Pt_d3d_Pt_type__glue' 
        ArgCoercions: 'pp i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 IfFail: fb .
    self).


  set_Pt_f2d: t0 Pt_type: t1  = (

       set_Pt_f2d: t0 Pt_type: t1 IfFail: 
        [|:e| ^error: 'set_Pt_f2d:Pt_type: failed: ', e] ).

  set_Pt_f2d: t0 Pt_type: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_set_Set_Pt_f2d_Pt_type__glue' 
        ArgCoercions: 'pp i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 IfFail: fb .
    self).


  set_Pt_f3d: t0 Pt_type: t1  = (

       set_Pt_f3d: t0 Pt_type: t1 IfFail: 
        [|:e| ^error: 'set_Pt_f3d:Pt_type: failed: ', e] ).

  set_Pt_f3d: t0 Pt_type: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_set_Set_Pt_f3d_Pt_type__glue' 
        ArgCoercions: 'pp i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 IfFail: fb .
    self).


  set_Pt_i2d: t0 Pt_type: t1  = (

       set_Pt_i2d: t0 Pt_type: t1 IfFail: 
        [|:e| ^error: 'set_Pt_i2d:Pt_type: failed: ', e] ).

  set_Pt_i2d: t0 Pt_type: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_set_Set_Pt_i2d_Pt_type__glue' 
        ArgCoercions: 'pp i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 IfFail: fb .
    self).


	}
| )

traits xgl raw ptColorD2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d2d_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptColorD2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d2d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtColorD2d = (

       nilPtColorD2dIfFail: 
        [|:e| ^error: 'nilPtColorD2d failed: ', e] ).

  nilPtColorD2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtColorD2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptColorD2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d2d_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptColorD2d deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d2d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  color_gray = (

       color_grayIfFail: [|:e| ^error: 'color_gray failed: ', e] ).

  color_grayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d2d_color_gray_Color_gray_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_gray: t0  = (

       color_gray: t0 IfFail: 
        [|:e| ^error: 'color_gray: failed: ', e] ).

  color_gray: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d2d_color_gray_Color_gray__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_index = (

       color_indexIfFail: [|:e| ^error: 'color_index failed: ', e] ).

  color_indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d2d_color_index_Color_index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_index: t0  = (

       color_index: t0 IfFail: 
        [|:e| ^error: 'color_index: failed: ', e] ).

  color_index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d2d_color_index_Color_index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_rgb = (

       color_rgbIfFail: [|:e| ^error: 'color_rgb failed: ', e] ).

  color_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d2d_color_rgb_Color_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  color_rgb: t0  = (

       color_rgb: t0 IfFail: 
        [|:e| ^error: 'color_rgb: failed: ', e] ).

  color_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d2d_color_rgb_Color_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_z = (

       color_zIfFail: [|:e| ^error: 'color_z failed: ', e] ).

  color_zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d2d_color_z_Color_z_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_z: t0  = (

       color_z: t0 IfFail: [|:e| ^error: 'color_z: failed: ', e] ).

  color_z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d2d_color_z_Color_z__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_d2d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_d2d_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_d2d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_d2d_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Color_gray: t0 X: t1 Y: t2  = (

       set_Color_gray: t0 X: t1 Y: t2 IfFail: 
        [|:e| ^error: 'set_Color_gray:X:Y: failed: ', e] ).

  set_Color_gray: t0 X: t1 Y: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d2d_set_Set_Color_gray_X_Y__glue' 
        ArgCoercions: 'pfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


  set_Color_index: t0 X: t1 Y: t2  = (

       set_Color_index: t0 X: t1 Y: t2 IfFail: 
        [|:e| ^error: 'set_Color_index:X:Y: failed: ', e] ).

  set_Color_index: t0 X: t1 Y: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d2d_set_Set_Color_index_X_Y__glue' 
        ArgCoercions: 'piff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


  set_Color_rgb: t0 X: t1 Y: t2  = (

       set_Color_rgb: t0 X: t1 Y: t2 IfFail: 
        [|:e| ^error: 'set_Color_rgb:X:Y: failed: ', e] ).

  set_Color_rgb: t0 X: t1 Y: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d2d_set_Set_Color_rgb_X_Y__glue' 
        ArgCoercions: 'ppff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


  set_Color_z: t0 X: t1 Y: t2  = (

       set_Color_z: t0 X: t1 Y: t2 IfFail: 
        [|:e| ^error: 'set_Color_z:X:Y: failed: ', e] ).

  set_Color_z: t0 X: t1 Y: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d2d_set_Set_Color_z_X_Y__glue' 
        ArgCoercions: 'piff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw ptColorD3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d3d_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptColorD3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtColorD3d = (

       nilPtColorD3dIfFail: 
        [|:e| ^error: 'nilPtColorD3d failed: ', e] ).

  nilPtColorD3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtColorD3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptColorD3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d3d_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptColorD3d deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  color_gray = (

       color_grayIfFail: [|:e| ^error: 'color_gray failed: ', e] ).

  color_grayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d3d_color_gray_Color_gray_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_gray: t0  = (

       color_gray: t0 IfFail: 
        [|:e| ^error: 'color_gray: failed: ', e] ).

  color_gray: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d3d_color_gray_Color_gray__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_index = (

       color_indexIfFail: [|:e| ^error: 'color_index failed: ', e] ).

  color_indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d3d_color_index_Color_index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_index: t0  = (

       color_index: t0 IfFail: 
        [|:e| ^error: 'color_index: failed: ', e] ).

  color_index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d3d_color_index_Color_index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_rgb = (

       color_rgbIfFail: [|:e| ^error: 'color_rgb failed: ', e] ).

  color_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d3d_color_rgb_Color_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  color_rgb: t0  = (

       color_rgb: t0 IfFail: 
        [|:e| ^error: 'color_rgb: failed: ', e] ).

  color_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d3d_color_rgb_Color_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_z = (

       color_zIfFail: [|:e| ^error: 'color_z failed: ', e] ).

  color_zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d3d_color_z_Color_z_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_z: t0  = (

       color_z: t0 IfFail: [|:e| ^error: 'color_z: failed: ', e] ).

  color_z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d3d_color_z_Color_z__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_d3d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_d3d_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_d3d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_d3d_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_d3d_z_Z_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_d3d_z_Z__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Color_gray: t0 X: t1 Y: t2 Z: t3  = (

       set_Color_gray: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_Color_gray:X:Y:Z: failed: ', e] ).

  set_Color_gray: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d3d_set_Set_Color_gray_X_Y_Z__glue' 
        ArgCoercions: 'pffff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


  set_Color_index: t0 X: t1 Y: t2 Z: t3  = (

       set_Color_index: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_Color_index:X:Y:Z: failed: ', e] ).

  set_Color_index: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_d3d_set_Set_Color_index_X_Y_Z__glue' 
        ArgCoercions: 'pifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


  set_Color_rgb: t0 X: t1 Y: t2 Z: t3  = (

       set_Color_rgb: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_Color_rgb:X:Y:Z: failed: ', e] ).

  set_Color_rgb: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d3d_set_Set_Color_rgb_X_Y_Z__glue' 
        ArgCoercions: 'ppfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


  set_Color_z: t0 X: t1 Y: t2 Z: t3  = (

       set_Color_z: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_Color_z:X:Y:Z: failed: ', e] ).

  set_Color_z: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_d3d_set_Set_Color_z_X_Y_Z__glue' 
        ArgCoercions: 'pifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw ptColorDataF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_data_f3d_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptColorDataF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_data_f3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtColorDataF3d = (

       nilPtColorDataF3dIfFail: 
        [|:e| ^error: 'nilPtColorDataF3d failed: ', e] ).

  nilPtColorDataF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtColorDataF3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptColorDataF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_data_f3d_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptColorDataF3d deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_data_f3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  color_gray = (

       color_grayIfFail: [|:e| ^error: 'color_gray failed: ', e] ).

  color_grayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_data_f3d_color_gray_Color_gray_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_gray: t0  = (

       color_gray: t0 IfFail: 
        [|:e| ^error: 'color_gray: failed: ', e] ).

  color_gray: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_data_f3d_color_gray_Color_gray__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_index = (

       color_indexIfFail: [|:e| ^error: 'color_index failed: ', e] ).

  color_indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_data_f3d_color_index_Color_index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_index: t0  = (

       color_index: t0 IfFail: 
        [|:e| ^error: 'color_index: failed: ', e] ).

  color_index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_data_f3d_color_index_Color_index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_rgb = (

       color_rgbIfFail: [|:e| ^error: 'color_rgb failed: ', e] ).

  color_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_data_f3d_color_rgb_Color_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  color_rgb: t0  = (

       color_rgb: t0 IfFail: 
        [|:e| ^error: 'color_rgb: failed: ', e] ).

  color_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_data_f3d_color_rgb_Color_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_z = (

       color_zIfFail: [|:e| ^error: 'color_z failed: ', e] ).

  color_zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_data_f3d_color_z_Color_z_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_z: t0  = (

       color_z: t0 IfFail: [|:e| ^error: 'color_z: failed: ', e] ).

  color_z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_data_f3d_color_z_Color_z__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  data = (

       dataIfFail: [|:e| ^error: 'data failed: ', e] ).

  dataIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_data_f3d_data_Data_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_data_f3d_x_X_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_data_f3d_x_X__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_data_f3d_y_Y_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_data_f3d_y_Y__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_data_f3d_z_Z_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_data_f3d_z_Z__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Color_gray: t0 X: t1 Y: t2 Z: t3  = (

       set_Color_gray: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_Color_gray:X:Y:Z: failed: ', e] ).

  set_Color_gray: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_data_f3d_set_Set_Color_gray_X_Y_Z__glue' 
        ArgCoercions: 'pffff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


  set_Color_index: t0 X: t1 Y: t2 Z: t3  = (

       set_Color_index: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_Color_index:X:Y:Z: failed: ', e] ).

  set_Color_index: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_data_f3d_set_Set_Color_index_X_Y_Z__glue' 
        ArgCoercions: 'pifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


  set_Color_rgb: t0 X: t1 Y: t2 Z: t3  = (

       set_Color_rgb: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_Color_rgb:X:Y:Z: failed: ', e] ).

  set_Color_rgb: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_data_f3d_set_Set_Color_rgb_X_Y_Z__glue' 
        ArgCoercions: 'ppfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


  set_Color_z: t0 X: t1 Y: t2 Z: t3  = (

       set_Color_z: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_Color_z:X:Y:Z: failed: ', e] ).

  set_Color_z: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_data_f3d_set_Set_Color_z_X_Y_Z__glue' 
        ArgCoercions: 'pifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw ptColorF2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f2d_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptColorF2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f2d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtColorF2d = (

       nilPtColorF2dIfFail: 
        [|:e| ^error: 'nilPtColorF2d failed: ', e] ).

  nilPtColorF2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtColorF2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptColorF2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f2d_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptColorF2d deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f2d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  color_gray = (

       color_grayIfFail: [|:e| ^error: 'color_gray failed: ', e] ).

  color_grayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f2d_color_gray_Color_gray_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_gray: t0  = (

       color_gray: t0 IfFail: 
        [|:e| ^error: 'color_gray: failed: ', e] ).

  color_gray: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f2d_color_gray_Color_gray__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_index = (

       color_indexIfFail: [|:e| ^error: 'color_index failed: ', e] ).

  color_indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f2d_color_index_Color_index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_index: t0  = (

       color_index: t0 IfFail: 
        [|:e| ^error: 'color_index: failed: ', e] ).

  color_index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f2d_color_index_Color_index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_rgb = (

       color_rgbIfFail: [|:e| ^error: 'color_rgb failed: ', e] ).

  color_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f2d_color_rgb_Color_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  color_rgb: t0  = (

       color_rgb: t0 IfFail: 
        [|:e| ^error: 'color_rgb: failed: ', e] ).

  color_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f2d_color_rgb_Color_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_z = (

       color_zIfFail: [|:e| ^error: 'color_z failed: ', e] ).

  color_zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f2d_color_z_Color_z_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_z: t0  = (

       color_z: t0 IfFail: [|:e| ^error: 'color_z: failed: ', e] ).

  color_z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f2d_color_z_Color_z__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_f2d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_f2d_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_f2d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_f2d_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Color_gray: t0 X: t1 Y: t2  = (

       set_Color_gray: t0 X: t1 Y: t2 IfFail: 
        [|:e| ^error: 'set_Color_gray:X:Y: failed: ', e] ).

  set_Color_gray: t0 X: t1 Y: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f2d_set_Set_Color_gray_X_Y__glue' 
        ArgCoercions: 'pfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


  set_Color_index: t0 X: t1 Y: t2  = (

       set_Color_index: t0 X: t1 Y: t2 IfFail: 
        [|:e| ^error: 'set_Color_index:X:Y: failed: ', e] ).

  set_Color_index: t0 X: t1 Y: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f2d_set_Set_Color_index_X_Y__glue' 
        ArgCoercions: 'piff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


  set_Color_rgb: t0 X: t1 Y: t2  = (

       set_Color_rgb: t0 X: t1 Y: t2 IfFail: 
        [|:e| ^error: 'set_Color_rgb:X:Y: failed: ', e] ).

  set_Color_rgb: t0 X: t1 Y: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f2d_set_Set_Color_rgb_X_Y__glue' 
        ArgCoercions: 'ppff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


  set_Color_z: t0 X: t1 Y: t2  = (

       set_Color_z: t0 X: t1 Y: t2 IfFail: 
        [|:e| ^error: 'set_Color_z:X:Y: failed: ', e] ).

  set_Color_z: t0 X: t1 Y: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f2d_set_Set_Color_z_X_Y__glue' 
        ArgCoercions: 'piff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw ptColorF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f3d_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptColorF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtColorF3d = (

       nilPtColorF3dIfFail: 
        [|:e| ^error: 'nilPtColorF3d failed: ', e] ).

  nilPtColorF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtColorF3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptColorF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f3d_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptColorF3d deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  color_gray = (

       color_grayIfFail: [|:e| ^error: 'color_gray failed: ', e] ).

  color_grayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f3d_color_gray_Color_gray_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_gray: t0  = (

       color_gray: t0 IfFail: 
        [|:e| ^error: 'color_gray: failed: ', e] ).

  color_gray: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f3d_color_gray_Color_gray__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_index = (

       color_indexIfFail: [|:e| ^error: 'color_index failed: ', e] ).

  color_indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f3d_color_index_Color_index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_index: t0  = (

       color_index: t0 IfFail: 
        [|:e| ^error: 'color_index: failed: ', e] ).

  color_index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f3d_color_index_Color_index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_rgb = (

       color_rgbIfFail: [|:e| ^error: 'color_rgb failed: ', e] ).

  color_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f3d_color_rgb_Color_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  color_rgb: t0  = (

       color_rgb: t0 IfFail: 
        [|:e| ^error: 'color_rgb: failed: ', e] ).

  color_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f3d_color_rgb_Color_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_z = (

       color_zIfFail: [|:e| ^error: 'color_z failed: ', e] ).

  color_zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f3d_color_z_Color_z_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_z: t0  = (

       color_z: t0 IfFail: [|:e| ^error: 'color_z: failed: ', e] ).

  color_z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f3d_color_z_Color_z__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_f3d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_f3d_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_f3d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_f3d_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_f3d_z_Z_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_f3d_z_Z__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Color_gray: t0 X: t1 Y: t2 Z: t3  = (

       set_Color_gray: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_Color_gray:X:Y:Z: failed: ', e] ).

  set_Color_gray: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f3d_set_Set_Color_gray_X_Y_Z__glue' 
        ArgCoercions: 'pffff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


  set_Color_index: t0 X: t1 Y: t2 Z: t3  = (

       set_Color_index: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_Color_index:X:Y:Z: failed: ', e] ).

  set_Color_index: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_f3d_set_Set_Color_index_X_Y_Z__glue' 
        ArgCoercions: 'pifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


  set_Color_rgb: t0 X: t1 Y: t2 Z: t3  = (

       set_Color_rgb: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_Color_rgb:X:Y:Z: failed: ', e] ).

  set_Color_rgb: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f3d_set_Set_Color_rgb_X_Y_Z__glue' 
        ArgCoercions: 'ppfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


  set_Color_z: t0 X: t1 Y: t2 Z: t3  = (

       set_Color_z: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_Color_z:X:Y:Z: failed: ', e] ).

  set_Color_z: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_f3d_set_Set_Color_z_X_Y_Z__glue' 
        ArgCoercions: 'pifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw ptColorFlagD3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_d3d_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptColorFlagD3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_d3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtColorFlagD3d = (

       nilPtColorFlagD3dIfFail: 
        [|:e| ^error: 'nilPtColorFlagD3d failed: ', e] ).

  nilPtColorFlagD3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtColorFlagD3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptColorFlagD3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_d3d_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptColorFlagD3d deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_d3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  color_gray = (

       color_grayIfFail: [|:e| ^error: 'color_gray failed: ', e] ).

  color_grayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_d3d_color_gray_Color_gray_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_gray: t0  = (

       color_gray: t0 IfFail: 
        [|:e| ^error: 'color_gray: failed: ', e] ).

  color_gray: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_d3d_color_gray_Color_gray__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_index = (

       color_indexIfFail: [|:e| ^error: 'color_index failed: ', e] ).

  color_indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_d3d_color_index_Color_index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_index: t0  = (

       color_index: t0 IfFail: 
        [|:e| ^error: 'color_index: failed: ', e] ).

  color_index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_d3d_color_index_Color_index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_rgb = (

       color_rgbIfFail: [|:e| ^error: 'color_rgb failed: ', e] ).

  color_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_d3d_color_rgb_Color_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  color_rgb: t0  = (

       color_rgb: t0 IfFail: 
        [|:e| ^error: 'color_rgb: failed: ', e] ).

  color_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_d3d_color_rgb_Color_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_z = (

       color_zIfFail: [|:e| ^error: 'color_z failed: ', e] ).

  color_zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_d3d_color_z_Color_z_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_z: t0  = (

       color_z: t0 IfFail: [|:e| ^error: 'color_z: failed: ', e] ).

  color_z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_d3d_color_z_Color_z__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  flag = (

       flagIfFail: [|:e| ^error: 'flag failed: ', e] ).

  flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_d3d_flag_Flag_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  flag: t0  = (

       flag: t0 IfFail: [|:e| ^error: 'flag: failed: ', e] ).

  flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_d3d_flag_Flag__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_d3d_x_X_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_d3d_x_X__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_d3d_y_Y_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_d3d_y_Y__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_d3d_z_Z_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_d3d_z_Z__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Color_gray: t0 Flag: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_gray: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_gray:Flag:X:Y:Z: failed: ', e] ).

  set_Color_gray: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_d3d_set_Set_Color_gray_Flag_X_Y_Z__glue' 
        ArgCoercions: 'pfifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  set_Color_index: t0 Flag: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_index: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_index:Flag:X:Y:Z: failed: ', e] ).

  set_Color_index: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_d3d_set_Set_Color_index_Flag_X_Y_Z__glue' 
        ArgCoercions: 'piifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  set_Color_rgb: t0 Flag: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_rgb: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_rgb:Flag:X:Y:Z: failed: ', e] ).

  set_Color_rgb: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_d3d_set_Set_Color_rgb_Flag_X_Y_Z__glue' 
        ArgCoercions: 'ppifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  set_Color_z: t0 Flag: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_z: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_z:Flag:X:Y:Z: failed: ', e] ).

  set_Color_z: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_d3d_set_Set_Color_z_Flag_X_Y_Z__glue' 
        ArgCoercions: 'piifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


	}
| )

traits xgl raw ptColorFlagDataF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_data_f3d_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptColorFlagDataF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_data_f3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtColorFlagDataF3d = (

       nilPtColorFlagDataF3dIfFail: 
        [|:e| ^error: 'nilPtColorFlagDataF3d failed: ', e] ).

  nilPtColorFlagDataF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtColorFlagDataF3d_glue' ArgCoercions: 
        ' ' ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptColorFlagDataF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_data_f3d_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptColorFlagDataF3d deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_data_f3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  color_gray = (

       color_grayIfFail: [|:e| ^error: 'color_gray failed: ', e] ).

  color_grayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_data_f3d_color_gray_Color_gray_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_gray: t0  = (

       color_gray: t0 IfFail: 
        [|:e| ^error: 'color_gray: failed: ', e] ).

  color_gray: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_data_f3d_color_gray_Color_gray__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_index = (

       color_indexIfFail: [|:e| ^error: 'color_index failed: ', e] ).

  color_indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_data_f3d_color_index_Color_index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_index: t0  = (

       color_index: t0 IfFail: 
        [|:e| ^error: 'color_index: failed: ', e] ).

  color_index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_data_f3d_color_index_Color_index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_rgb = (

       color_rgbIfFail: [|:e| ^error: 'color_rgb failed: ', e] ).

  color_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_data_f3d_color_rgb_Color_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  color_rgb: t0  = (

       color_rgb: t0 IfFail: 
        [|:e| ^error: 'color_rgb: failed: ', e] ).

  color_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_data_f3d_color_rgb_Color_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_z = (

       color_zIfFail: [|:e| ^error: 'color_z failed: ', e] ).

  color_zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_data_f3d_color_z_Color_z_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_z: t0  = (

       color_z: t0 IfFail: [|:e| ^error: 'color_z: failed: ', e] ).

  color_z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_data_f3d_color_z_Color_z__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  data = (

       dataIfFail: [|:e| ^error: 'data failed: ', e] ).

  dataIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_data_f3d_data_Data_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  flag = (

       flagIfFail: [|:e| ^error: 'flag failed: ', e] ).

  flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_data_f3d_flag_Flag_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  flag: t0  = (

       flag: t0 IfFail: [|:e| ^error: 'flag: failed: ', e] ).

  flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_data_f3d_flag_Flag__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_data_f3d_x_X_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_data_f3d_x_X__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_data_f3d_y_Y_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_data_f3d_y_Y__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_data_f3d_z_Z_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_data_f3d_z_Z__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Color_gray: t0 Flag: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_gray: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_gray:Flag:X:Y:Z: failed: ', e] ).

  set_Color_gray: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_data_f3d_set_Set_Color_gray_Flag_X_Y_Z__glue' 
        ArgCoercions: 'pfifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  set_Color_index: t0 Flag: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_index: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_index:Flag:X:Y:Z: failed: ', e] ).

  set_Color_index: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_data_f3d_set_Set_Color_index_Flag_X_Y_Z__glue' 
        ArgCoercions: 'piifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  set_Color_rgb: t0 Flag: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_rgb: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_rgb:Flag:X:Y:Z: failed: ', e] ).

  set_Color_rgb: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_data_f3d_set_Set_Color_rgb_Flag_X_Y_Z__glue' 
        ArgCoercions: 'ppifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  set_Color_z: t0 Flag: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_z: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_z:Flag:X:Y:Z: failed: ', e] ).

  set_Color_z: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_data_f3d_set_Set_Color_z_Flag_X_Y_Z__glue' 
        ArgCoercions: 'piifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


	}
| )

traits xgl raw ptColorFlagF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_f3d_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptColorFlagF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_f3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtColorFlagF3d = (

       nilPtColorFlagF3dIfFail: 
        [|:e| ^error: 'nilPtColorFlagF3d failed: ', e] ).

  nilPtColorFlagF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtColorFlagF3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptColorFlagF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_f3d_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptColorFlagF3d deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_f3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  color_gray = (

       color_grayIfFail: [|:e| ^error: 'color_gray failed: ', e] ).

  color_grayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_f3d_color_gray_Color_gray_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_gray: t0  = (

       color_gray: t0 IfFail: 
        [|:e| ^error: 'color_gray: failed: ', e] ).

  color_gray: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_f3d_color_gray_Color_gray__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_index = (

       color_indexIfFail: [|:e| ^error: 'color_index failed: ', e] ).

  color_indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_f3d_color_index_Color_index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_index: t0  = (

       color_index: t0 IfFail: 
        [|:e| ^error: 'color_index: failed: ', e] ).

  color_index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_f3d_color_index_Color_index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_rgb = (

       color_rgbIfFail: [|:e| ^error: 'color_rgb failed: ', e] ).

  color_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_f3d_color_rgb_Color_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  color_rgb: t0  = (

       color_rgb: t0 IfFail: 
        [|:e| ^error: 'color_rgb: failed: ', e] ).

  color_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_f3d_color_rgb_Color_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_z = (

       color_zIfFail: [|:e| ^error: 'color_z failed: ', e] ).

  color_zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_f3d_color_z_Color_z_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_z: t0  = (

       color_z: t0 IfFail: [|:e| ^error: 'color_z: failed: ', e] ).

  color_z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_flag_f3d_color_z_Color_z__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  flag = (

       flagIfFail: [|:e| ^error: 'flag failed: ', e] ).

  flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_f3d_flag_Flag_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  flag: t0  = (

       flag: t0 IfFail: [|:e| ^error: 'flag: failed: ', e] ).

  flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_f3d_flag_Flag__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_f3d_x_X_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_f3d_x_X__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_f3d_y_Y_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_f3d_y_Y__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_f3d_z_Z_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_flag_f3d_z_Z__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Color_gray: t0 Flag: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_gray: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_gray:Flag:X:Y:Z: failed: ', e] ).

  set_Color_gray: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_f3d_set_Set_Color_gray_Flag_X_Y_Z__glue' 
        ArgCoercions: 'pfifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  set_Color_index: t0 Flag: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_index: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_index:Flag:X:Y:Z: failed: ', e] ).

  set_Color_index: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_f3d_set_Set_Color_index_Flag_X_Y_Z__glue' 
        ArgCoercions: 'piifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  set_Color_rgb: t0 Flag: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_rgb: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_rgb:Flag:X:Y:Z: failed: ', e] ).

  set_Color_rgb: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_f3d_set_Set_Color_rgb_Flag_X_Y_Z__glue' 
        ArgCoercions: 'ppifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  set_Color_z: t0 Flag: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_z: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_z:Flag:X:Y:Z: failed: ', e] ).

  set_Color_z: t0 Flag: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_flag_f3d_set_Set_Color_z_Flag_X_Y_Z__glue' 
        ArgCoercions: 'piifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


	}
| )

traits xgl raw ptColorI2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_i2d_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptColorI2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_i2d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtColorI2d = (

       nilPtColorI2dIfFail: 
        [|:e| ^error: 'nilPtColorI2d failed: ', e] ).

  nilPtColorI2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtColorI2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptColorI2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_i2d_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptColorI2d deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_i2d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  color_gray = (

       color_grayIfFail: [|:e| ^error: 'color_gray failed: ', e] ).

  color_grayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_i2d_color_gray_Color_gray_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_gray: t0  = (

       color_gray: t0 IfFail: 
        [|:e| ^error: 'color_gray: failed: ', e] ).

  color_gray: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_i2d_color_gray_Color_gray__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_index = (

       color_indexIfFail: [|:e| ^error: 'color_index failed: ', e] ).

  color_indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_i2d_color_index_Color_index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_index: t0  = (

       color_index: t0 IfFail: 
        [|:e| ^error: 'color_index: failed: ', e] ).

  color_index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_i2d_color_index_Color_index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_rgb = (

       color_rgbIfFail: [|:e| ^error: 'color_rgb failed: ', e] ).

  color_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_i2d_color_rgb_Color_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  color_rgb: t0  = (

       color_rgb: t0 IfFail: 
        [|:e| ^error: 'color_rgb: failed: ', e] ).

  color_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_i2d_color_rgb_Color_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_z = (

       color_zIfFail: [|:e| ^error: 'color_z failed: ', e] ).

  color_zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_i2d_color_z_Color_z_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_z: t0  = (

       color_z: t0 IfFail: [|:e| ^error: 'color_z: failed: ', e] ).

  color_z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_i2d_color_z_Color_z__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_i2d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_i2d_x_X__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_i2d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_i2d_y_Y__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Color_gray: t0 X: t1 Y: t2  = (

       set_Color_gray: t0 X: t1 Y: t2 IfFail: 
        [|:e| ^error: 'set_Color_gray:X:Y: failed: ', e] ).

  set_Color_gray: t0 X: t1 Y: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_i2d_set_Set_Color_gray_X_Y__glue' 
        ArgCoercions: 'pfii' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


  set_Color_index: t0 X: t1 Y: t2  = (

       set_Color_index: t0 X: t1 Y: t2 IfFail: 
        [|:e| ^error: 'set_Color_index:X:Y: failed: ', e] ).

  set_Color_index: t0 X: t1 Y: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_i2d_set_Set_Color_index_X_Y__glue' 
        ArgCoercions: 'piii' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


  set_Color_rgb: t0 X: t1 Y: t2  = (

       set_Color_rgb: t0 X: t1 Y: t2 IfFail: 
        [|:e| ^error: 'set_Color_rgb:X:Y: failed: ', e] ).

  set_Color_rgb: t0 X: t1 Y: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_i2d_set_Set_Color_rgb_X_Y__glue' 
        ArgCoercions: 'ppii' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


  set_Color_z: t0 X: t1 Y: t2  = (

       set_Color_z: t0 X: t1 Y: t2 IfFail: 
        [|:e| ^error: 'set_Color_z:X:Y: failed: ', e] ).

  set_Color_z: t0 X: t1 Y: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_i2d_set_Set_Color_z_X_Y__glue' 
        ArgCoercions: 'piii' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw ptColorNormalD3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_d3d_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptColorNormalD3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_d3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtColorNormalD3d = (

       nilPtColorNormalD3dIfFail: 
        [|:e| ^error: 'nilPtColorNormalD3d failed: ', e] ).

  nilPtColorNormalD3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtColorNormalD3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptColorNormalD3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_d3d_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptColorNormalD3d deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_d3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  color_gray = (

       color_grayIfFail: [|:e| ^error: 'color_gray failed: ', e] ).

  color_grayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_d3d_color_gray_Color_gray_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_gray: t0  = (

       color_gray: t0 IfFail: 
        [|:e| ^error: 'color_gray: failed: ', e] ).

  color_gray: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_d3d_color_gray_Color_gray__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_index = (

       color_indexIfFail: [|:e| ^error: 'color_index failed: ', e] ).

  color_indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_d3d_color_index_Color_index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_index: t0  = (

       color_index: t0 IfFail: 
        [|:e| ^error: 'color_index: failed: ', e] ).

  color_index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_d3d_color_index_Color_index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_rgb = (

       color_rgbIfFail: [|:e| ^error: 'color_rgb failed: ', e] ).

  color_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_d3d_color_rgb_Color_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  color_rgb: t0  = (

       color_rgb: t0 IfFail: 
        [|:e| ^error: 'color_rgb: failed: ', e] ).

  color_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_d3d_color_rgb_Color_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_z = (

       color_zIfFail: [|:e| ^error: 'color_z failed: ', e] ).

  color_zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_d3d_color_z_Color_z_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_z: t0  = (

       color_z: t0 IfFail: [|:e| ^error: 'color_z: failed: ', e] ).

  color_z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_d3d_color_z_Color_z__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  normal = (

       normalIfFail: [|:e| ^error: 'normal failed: ', e] ).

  normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_d3d_normal_Normal_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  normal: t0  = (

       normal: t0 IfFail: [|:e| ^error: 'normal: failed: ', e] ).

  normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_d3d_normal_Normal__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_d3d_x_X_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_d3d_x_X__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_d3d_y_Y_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_d3d_y_Y__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_d3d_z_Z_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_d3d_z_Z__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Color_gray: t0 Normal: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_gray: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_gray:Normal:X:Y:Z: failed: ', e] ).

  set_Color_gray: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_d3d_set_Set_Color_gray_Normal_X_Y_Z__glue' 
        ArgCoercions: 'pfpfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  set_Color_index: t0 Normal: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_index: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_index:Normal:X:Y:Z: failed: ', e] ).

  set_Color_index: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_d3d_set_Set_Color_index_Normal_X_Y_Z__glue' 
        ArgCoercions: 'pipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  set_Color_rgb: t0 Normal: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_rgb: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_rgb:Normal:X:Y:Z: failed: ', e] ).

  set_Color_rgb: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_d3d_set_Set_Color_rgb_Normal_X_Y_Z__glue' 
        ArgCoercions: 'pppfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  set_Color_z: t0 Normal: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_z: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_z:Normal:X:Y:Z: failed: ', e] ).

  set_Color_z: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_d3d_set_Set_Color_z_Normal_X_Y_Z__glue' 
        ArgCoercions: 'pipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


	}
| )

traits xgl raw ptColorNormalDataF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_data_f3d_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptColorNormalDataF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_data_f3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtColorNormalDataF3d = (

       nilPtColorNormalDataF3dIfFail: 
        [|:e| ^error: 'nilPtColorNormalDataF3d failed: ', e] ).

  nilPtColorNormalDataF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtColorNormalDataF3d_glue' ArgCoercions: 
        ' ' ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptColorNormalDataF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_data_f3d_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptColorNormalDataF3d deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_data_f3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  color_gray = (

       color_grayIfFail: [|:e| ^error: 'color_gray failed: ', e] ).

  color_grayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_data_f3d_color_gray_Color_gray_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_gray: t0  = (

       color_gray: t0 IfFail: 
        [|:e| ^error: 'color_gray: failed: ', e] ).

  color_gray: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_data_f3d_color_gray_Color_gray__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_index = (

       color_indexIfFail: [|:e| ^error: 'color_index failed: ', e] ).

  color_indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_data_f3d_color_index_Color_index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_index: t0  = (

       color_index: t0 IfFail: 
        [|:e| ^error: 'color_index: failed: ', e] ).

  color_index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_data_f3d_color_index_Color_index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_rgb = (

       color_rgbIfFail: [|:e| ^error: 'color_rgb failed: ', e] ).

  color_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_data_f3d_color_rgb_Color_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  color_rgb: t0  = (

       color_rgb: t0 IfFail: 
        [|:e| ^error: 'color_rgb: failed: ', e] ).

  color_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_data_f3d_color_rgb_Color_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_z = (

       color_zIfFail: [|:e| ^error: 'color_z failed: ', e] ).

  color_zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_data_f3d_color_z_Color_z_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_z: t0  = (

       color_z: t0 IfFail: [|:e| ^error: 'color_z: failed: ', e] ).

  color_z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_data_f3d_color_z_Color_z__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  data = (

       dataIfFail: [|:e| ^error: 'data failed: ', e] ).

  dataIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_data_f3d_data_Data_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  normal = (

       normalIfFail: [|:e| ^error: 'normal failed: ', e] ).

  normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_data_f3d_normal_Normal_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  normal: t0  = (

       normal: t0 IfFail: [|:e| ^error: 'normal: failed: ', e] ).

  normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_data_f3d_normal_Normal__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_data_f3d_x_X_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_data_f3d_x_X__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_data_f3d_y_Y_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_data_f3d_y_Y__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_data_f3d_z_Z_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_data_f3d_z_Z__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Color_gray: t0 Normal: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_gray: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_gray:Normal:X:Y:Z: failed: ', e] ).

  set_Color_gray: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_data_f3d_set_Set_Color_gray_Normal_X_Y_Z__glue' 
        ArgCoercions: 'pfpfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  set_Color_index: t0 Normal: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_index: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_index:Normal:X:Y:Z: failed: ', e] ).

  set_Color_index: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_data_f3d_set_Set_Color_index_Normal_X_Y_Z__glue' 
        ArgCoercions: 'pipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  set_Color_rgb: t0 Normal: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_rgb: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_rgb:Normal:X:Y:Z: failed: ', e] ).

  set_Color_rgb: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_data_f3d_set_Set_Color_rgb_Normal_X_Y_Z__glue' 
        ArgCoercions: 'pppfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  set_Color_z: t0 Normal: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_z: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_z:Normal:X:Y:Z: failed: ', e] ).

  set_Color_z: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_data_f3d_set_Set_Color_z_Normal_X_Y_Z__glue' 
        ArgCoercions: 'pipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


	}
| )

traits xgl raw ptColorNormalF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_f3d_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptColorNormalF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_f3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtColorNormalF3d = (

       nilPtColorNormalF3dIfFail: 
        [|:e| ^error: 'nilPtColorNormalF3d failed: ', e] ).

  nilPtColorNormalF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtColorNormalF3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptColorNormalF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_f3d_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptColorNormalF3d deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_f3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  color_gray = (

       color_grayIfFail: [|:e| ^error: 'color_gray failed: ', e] ).

  color_grayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_f3d_color_gray_Color_gray_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_gray: t0  = (

       color_gray: t0 IfFail: 
        [|:e| ^error: 'color_gray: failed: ', e] ).

  color_gray: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_f3d_color_gray_Color_gray__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_index = (

       color_indexIfFail: [|:e| ^error: 'color_index failed: ', e] ).

  color_indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_f3d_color_index_Color_index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_index: t0  = (

       color_index: t0 IfFail: 
        [|:e| ^error: 'color_index: failed: ', e] ).

  color_index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_f3d_color_index_Color_index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_rgb = (

       color_rgbIfFail: [|:e| ^error: 'color_rgb failed: ', e] ).

  color_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_f3d_color_rgb_Color_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  color_rgb: t0  = (

       color_rgb: t0 IfFail: 
        [|:e| ^error: 'color_rgb: failed: ', e] ).

  color_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_f3d_color_rgb_Color_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_z = (

       color_zIfFail: [|:e| ^error: 'color_z failed: ', e] ).

  color_zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_f3d_color_z_Color_z_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_z: t0  = (

       color_z: t0 IfFail: [|:e| ^error: 'color_z: failed: ', e] ).

  color_z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_f3d_color_z_Color_z__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  normal = (

       normalIfFail: [|:e| ^error: 'normal failed: ', e] ).

  normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_f3d_normal_Normal_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  normal: t0  = (

       normal: t0 IfFail: [|:e| ^error: 'normal: failed: ', e] ).

  normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_f3d_normal_Normal__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_f3d_x_X_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_f3d_x_X__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_f3d_y_Y_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_f3d_y_Y__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_f3d_z_Z_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_f3d_z_Z__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Color_gray: t0 Normal: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_gray: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_gray:Normal:X:Y:Z: failed: ', e] ).

  set_Color_gray: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_f3d_set_Set_Color_gray_Normal_X_Y_Z__glue' 
        ArgCoercions: 'pfpfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  set_Color_index: t0 Normal: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_index: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_index:Normal:X:Y:Z: failed: ', e] ).

  set_Color_index: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_f3d_set_Set_Color_index_Normal_X_Y_Z__glue' 
        ArgCoercions: 'pipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  set_Color_rgb: t0 Normal: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_rgb: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_rgb:Normal:X:Y:Z: failed: ', e] ).

  set_Color_rgb: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_f3d_set_Set_Color_rgb_Normal_X_Y_Z__glue' 
        ArgCoercions: 'pppfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


  set_Color_z: t0 Normal: t1 X: t2 Y: t3 Z: t4  = (

       set_Color_z: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Color_z:Normal:X:Y:Z: failed: ', e] ).

  set_Color_z: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_f3d_set_Set_Color_z_Normal_X_Y_Z__glue' 
        ArgCoercions: 'pipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


	}
| )

traits xgl raw ptColorNormalFlagD3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_flag_d3d_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptColorNormalFlagD3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_flag_d3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtColorNormalFlagD3d = (

       nilPtColorNormalFlagD3dIfFail: 
        [|:e| ^error: 'nilPtColorNormalFlagD3d failed: ', e] ).

  nilPtColorNormalFlagD3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtColorNormalFlagD3d_glue' ArgCoercions: 
        ' ' ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptColorNormalFlagD3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_flag_d3d_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptColorNormalFlagD3d deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_d3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  color_gray = (

       color_grayIfFail: [|:e| ^error: 'color_gray failed: ', e] ).

  color_grayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_d3d_color_gray_Color_gray_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_gray: t0  = (

       color_gray: t0 IfFail: 
        [|:e| ^error: 'color_gray: failed: ', e] ).

  color_gray: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_d3d_color_gray_Color_gray__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_index = (

       color_indexIfFail: [|:e| ^error: 'color_index failed: ', e] ).

  color_indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_d3d_color_index_Color_index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_index: t0  = (

       color_index: t0 IfFail: 
        [|:e| ^error: 'color_index: failed: ', e] ).

  color_index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_d3d_color_index_Color_index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_rgb = (

       color_rgbIfFail: [|:e| ^error: 'color_rgb failed: ', e] ).

  color_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_d3d_color_rgb_Color_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  color_rgb: t0  = (

       color_rgb: t0 IfFail: 
        [|:e| ^error: 'color_rgb: failed: ', e] ).

  color_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_d3d_color_rgb_Color_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_z = (

       color_zIfFail: [|:e| ^error: 'color_z failed: ', e] ).

  color_zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_d3d_color_z_Color_z_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_z: t0  = (

       color_z: t0 IfFail: [|:e| ^error: 'color_z: failed: ', e] ).

  color_z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_d3d_color_z_Color_z__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  flag = (

       flagIfFail: [|:e| ^error: 'flag failed: ', e] ).

  flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_d3d_flag_Flag_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  flag: t0  = (

       flag: t0 IfFail: [|:e| ^error: 'flag: failed: ', e] ).

  flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_d3d_flag_Flag__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  normal = (

       normalIfFail: [|:e| ^error: 'normal failed: ', e] ).

  normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_flag_d3d_normal_Normal_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  normal: t0  = (

       normal: t0 IfFail: [|:e| ^error: 'normal: failed: ', e] ).

  normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_d3d_normal_Normal__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_d3d_x_X_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_d3d_x_X__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_d3d_y_Y_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_d3d_y_Y__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_d3d_z_Z_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_d3d_z_Z__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Color_gray: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5  = (

       set_Color_gray: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
        IfFail: 
        [|:e| ^error: 'set_Color_gray:Flag:Normal:X:Y:Z: failed: ', e] ).

  set_Color_gray: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_d3d_set_Set_Color_gray_Flag_Normal_X_Y_Z__glue' 
        ArgCoercions: 'pfipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


  set_Color_index: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5  = (

       set_Color_index: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
        IfFail: 
        [|:e| ^error: 'set_Color_index:Flag:Normal:X:Y:Z: failed: ', e] ).

  set_Color_index: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_d3d_set_Set_Color_index_Flag_Normal_X_Y_Z__glue' 
        ArgCoercions: 'piipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


  set_Color_rgb: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5  = (

       set_Color_rgb: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
        IfFail: 
        [|:e| ^error: 'set_Color_rgb:Flag:Normal:X:Y:Z: failed: ', e] ).

  set_Color_rgb: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_d3d_set_Set_Color_rgb_Flag_Normal_X_Y_Z__glue' 
        ArgCoercions: 'ppipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


  set_Color_z: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5  = (

       set_Color_z: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
        IfFail: 
        [|:e| ^error: 'set_Color_z:Flag:Normal:X:Y:Z: failed: ', e] ).

  set_Color_z: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_d3d_set_Set_Color_z_Flag_Normal_X_Y_Z__glue' 
        ArgCoercions: 'piipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


	}
| )

traits xgl raw ptColorNormalFlagDataF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_flag_data_f3d_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptColorNormalFlagDataF3d deadCopy 
        IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_data_f3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtColorNormalFlagDataF3d = (

       nilPtColorNormalFlagDataF3dIfFail: 
        [|:e| ^error: 'nilPtColorNormalFlagDataF3d failed: ', e] ).

  nilPtColorNormalFlagDataF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtColorNormalFlagDataF3d_glue' 
        ArgCoercions: ' ' ResultType: 'arg1' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: xgl ptColorNormalFlagDataF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_flag_data_f3d_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 
        xgl ptColorNormalFlagDataF3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_data_f3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  color_gray = (

       color_grayIfFail: [|:e| ^error: 'color_gray failed: ', e] ).

  color_grayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_data_f3d_color_gray_Color_gray_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_gray: t0  = (

       color_gray: t0 IfFail: 
        [|:e| ^error: 'color_gray: failed: ', e] ).

  color_gray: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_data_f3d_color_gray_Color_gray__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_index = (

       color_indexIfFail: [|:e| ^error: 'color_index failed: ', e] ).

  color_indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_data_f3d_color_index_Color_index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_index: t0  = (

       color_index: t0 IfFail: 
        [|:e| ^error: 'color_index: failed: ', e] ).

  color_index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_data_f3d_color_index_Color_index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_rgb = (

       color_rgbIfFail: [|:e| ^error: 'color_rgb failed: ', e] ).

  color_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_data_f3d_color_rgb_Color_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  color_rgb: t0  = (

       color_rgb: t0 IfFail: 
        [|:e| ^error: 'color_rgb: failed: ', e] ).

  color_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_data_f3d_color_rgb_Color_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_z = (

       color_zIfFail: [|:e| ^error: 'color_z failed: ', e] ).

  color_zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_data_f3d_color_z_Color_z_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_z: t0  = (

       color_z: t0 IfFail: [|:e| ^error: 'color_z: failed: ', e] ).

  color_z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_data_f3d_color_z_Color_z__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  data = (

       dataIfFail: [|:e| ^error: 'data failed: ', e] ).

  dataIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_data_f3d_data_Data_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  flag = (

       flagIfFail: [|:e| ^error: 'flag failed: ', e] ).

  flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_pt_color_normal_flag_data_f3d_flag_Flag_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  flag: t0  = (

       flag: t0 IfFail: [|:e| ^error: 'flag: failed: ', e] ).

  flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_pt_color_normal_flag_data_f3d_flag_Flag__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  normal = (

       normalIfFail: [|:e| ^error: 'normal failed: ', e] ).

  normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_data_f3d_normal_Normal_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  normal: t0  = (

       normal: t0 IfFail: [|:e| ^error: 'normal: failed: ', e] ).

  normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_data_f3d_normal_Normal__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_data_f3d_x_X_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_data_f3d_x_X__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_data_f3d_y_Y_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_data_f3d_y_Y__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_data_f3d_z_Z_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_data_f3d_z_Z__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Color_gray: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5  = (

       set_Color_gray: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
        IfFail: 
        [|:e| ^error: 'set_Color_gray:Flag:Normal:X:Y:Z: failed: ', e] ).

  set_Color_gray: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_data_f3d_set_Set_Color_gray_Flag_Normal_X_Y_Z__glue' 
        ArgCoercions: 'pfipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


  set_Color_index: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5  = (

       set_Color_index: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
        IfFail: 
        [|:e| ^error: 'set_Color_index:Flag:Normal:X:Y:Z: failed: ', e] ).

  set_Color_index: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_data_f3d_set_Set_Color_index_Flag_Normal_X_Y_Z__glue' 
        ArgCoercions: 'piipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


  set_Color_rgb: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5  = (

       set_Color_rgb: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
        IfFail: 
        [|:e| ^error: 'set_Color_rgb:Flag:Normal:X:Y:Z: failed: ', e] ).

  set_Color_rgb: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_data_f3d_set_Set_Color_rgb_Flag_Normal_X_Y_Z__glue' 
        ArgCoercions: 'ppipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


  set_Color_z: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5  = (

       set_Color_z: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
        IfFail: 
        [|:e| ^error: 'set_Color_z:Flag:Normal:X:Y:Z: failed: ', e] ).

  set_Color_z: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_data_f3d_set_Set_Color_z_Flag_Normal_X_Y_Z__glue' 
        ArgCoercions: 'piipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


	}
| )

traits xgl raw ptColorNormalFlagF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_flag_f3d_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptColorNormalFlagF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_flag_f3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtColorNormalFlagF3d = (

       nilPtColorNormalFlagF3dIfFail: 
        [|:e| ^error: 'nilPtColorNormalFlagF3d failed: ', e] ).

  nilPtColorNormalFlagF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtColorNormalFlagF3d_glue' ArgCoercions: 
        ' ' ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptColorNormalFlagF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_flag_f3d_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptColorNormalFlagF3d deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_f3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  color_gray = (

       color_grayIfFail: [|:e| ^error: 'color_gray failed: ', e] ).

  color_grayIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_f3d_color_gray_Color_gray_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_gray: t0  = (

       color_gray: t0 IfFail: 
        [|:e| ^error: 'color_gray: failed: ', e] ).

  color_gray: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_f3d_color_gray_Color_gray__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_index = (

       color_indexIfFail: [|:e| ^error: 'color_index failed: ', e] ).

  color_indexIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_f3d_color_index_Color_index_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_index: t0  = (

       color_index: t0 IfFail: 
        [|:e| ^error: 'color_index: failed: ', e] ).

  color_index: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_f3d_color_index_Color_index__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_rgb = (

       color_rgbIfFail: [|:e| ^error: 'color_rgb failed: ', e] ).

  color_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_f3d_color_rgb_Color_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  color_rgb: t0  = (

       color_rgb: t0 IfFail: 
        [|:e| ^error: 'color_rgb: failed: ', e] ).

  color_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_f3d_color_rgb_Color_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  color_z = (

       color_zIfFail: [|:e| ^error: 'color_z failed: ', e] ).

  color_zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_f3d_color_z_Color_z_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  color_z: t0  = (

       color_z: t0 IfFail: [|:e| ^error: 'color_z: failed: ', e] ).

  color_z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_f3d_color_z_Color_z__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  flag = (

       flagIfFail: [|:e| ^error: 'flag failed: ', e] ).

  flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_f3d_flag_Flag_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  flag: t0  = (

       flag: t0 IfFail: [|:e| ^error: 'flag: failed: ', e] ).

  flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_f3d_flag_Flag__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  normal = (

       normalIfFail: [|:e| ^error: 'normal failed: ', e] ).

  normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_color_normal_flag_f3d_normal_Normal_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  normal: t0  = (

       normal: t0 IfFail: [|:e| ^error: 'normal: failed: ', e] ).

  normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_f3d_normal_Normal__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_f3d_x_X_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_f3d_x_X__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_f3d_y_Y_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_f3d_y_Y__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_f3d_z_Z_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_color_normal_flag_f3d_z_Z__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Color_gray: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5  = (

       set_Color_gray: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
        IfFail: 
        [|:e| ^error: 'set_Color_gray:Flag:Normal:X:Y:Z: failed: ', e] ).

  set_Color_gray: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_f3d_set_Set_Color_gray_Flag_Normal_X_Y_Z__glue' 
        ArgCoercions: 'pfipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


  set_Color_index: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5  = (

       set_Color_index: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
        IfFail: 
        [|:e| ^error: 'set_Color_index:Flag:Normal:X:Y:Z: failed: ', e] ).

  set_Color_index: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_f3d_set_Set_Color_index_Flag_Normal_X_Y_Z__glue' 
        ArgCoercions: 'piipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


  set_Color_rgb: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5  = (

       set_Color_rgb: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
        IfFail: 
        [|:e| ^error: 'set_Color_rgb:Flag:Normal:X:Y:Z: failed: ', e] ).

  set_Color_rgb: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_f3d_set_Set_Color_rgb_Flag_Normal_X_Y_Z__glue' 
        ArgCoercions: 'ppipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


  set_Color_z: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5  = (

       set_Color_z: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
        IfFail: 
        [|:e| ^error: 'set_Color_z:Flag:Normal:X:Y:Z: failed: ', e] ).

  set_Color_z: t0 Flag: t1 Normal: t2 X: t3 Y: t4 Z: t5 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_color_normal_flag_f3d_set_Set_Color_z_Flag_Normal_X_Y_Z__glue' 
        ArgCoercions: 'piipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: t5 IfFail: fb .
    self).


	}
| )

traits xgl raw ptD2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptD2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d2d_delete_Delete_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtD2d = (

       nilPtD2dIfFail: [|:e| ^error: 'nilPtD2d failed: ', e] ).

  nilPtD2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtD2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptD2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptD2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d2d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d2d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d2d_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d2d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d2d_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw ptD2h _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d2h_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptD2h deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d2h_delete_Delete_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtD2h = (

       nilPtD2hIfFail: [|:e| ^error: 'nilPtD2h failed: ', e] ).

  nilPtD2hIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtD2h_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptD2h deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d2h_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptD2h deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d2h_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  w = (

       wIfFail: [|:e| ^error: 'w failed: ', e] ).

  wIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d2h_w_W_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  w: t0  = (

       w: t0 IfFail: [|:e| ^error: 'w: failed: ', e] ).

  w: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d2h_w_W__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d2h_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d2h_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d2h_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d2h_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_W: t0 X: t1 Y: t2  = (

       set_W: t0 X: t1 Y: t2 IfFail: 
        [|:e| ^error: 'set_W:X:Y: failed: ', e] ).

  set_W: t0 X: t1 Y: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d2h_set_Set_W_X_Y__glue' ArgCoercions: 
        'pfff' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw ptD3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptD3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d3d_delete_Delete_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtD3d = (

       nilPtD3dIfFail: [|:e| ^error: 'nilPtD3d failed: ', e] ).

  nilPtD3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtD3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptD3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptD3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d3d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d3d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d3d_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d3d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d3d_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d3d_z_Z_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d3d_z_Z__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_X: t0 Y: t1 Z: t2  = (

       set_X: t0 Y: t1 Z: t2 IfFail: 
        [|:e| ^error: 'set_X:Y:Z: failed: ', e] ).

  set_X: t0 Y: t1 Z: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d3d_set_Set_X_Y_Z__glue' ArgCoercions: 
        'pfff' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw ptD3h _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d3h_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptD3h deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d3h_delete_Delete_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtD3h = (

       nilPtD3hIfFail: [|:e| ^error: 'nilPtD3h failed: ', e] ).

  nilPtD3hIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtD3h_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptD3h deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d3h_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptD3h deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d3h_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  w = (

       wIfFail: [|:e| ^error: 'w failed: ', e] ).

  wIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d3h_w_W_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  w: t0  = (

       w: t0 IfFail: [|:e| ^error: 'w: failed: ', e] ).

  w: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d3h_w_W__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d3h_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d3h_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d3h_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d3h_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d3h_z_Z_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_d3h_z_Z__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_W: t0 X: t1 Y: t2 Z: t3  = (

       set_W: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_W:X:Y:Z: failed: ', e] ).

  set_W: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_d3h_set_Set_W_X_Y_Z__glue' ArgCoercions: 
        'pffff' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw ptDataF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_data_f3d_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptDataF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_data_f3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtDataF3d = (

       nilPtDataF3dIfFail: 
        [|:e| ^error: 'nilPtDataF3d failed: ', e] ).

  nilPtDataF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtDataF3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptDataF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_data_f3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptDataF3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_data_f3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  data = (

       dataIfFail: [|:e| ^error: 'data failed: ', e] ).

  dataIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_data_f3d_data_Data_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_data_f3d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_data_f3d_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_data_f3d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_data_f3d_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_data_f3d_z_Z_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_data_f3d_z_Z__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_X: t0 Y: t1 Z: t2  = (

       set_X: t0 Y: t1 Z: t2 IfFail: 
        [|:e| ^error: 'set_X:Y:Z: failed: ', e] ).

  set_X: t0 Y: t1 Z: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_data_f3d_set_Set_X_Y_Z__glue' 
        ArgCoercions: 'pfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw ptF2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptF2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f2d_delete_Delete_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtF2d = (

       nilPtF2dIfFail: [|:e| ^error: 'nilPtF2d failed: ', e] ).

  nilPtF2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtF2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptF2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptF2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f2d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f2d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f2d_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f2d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f2d_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw ptF2h _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f2h_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptF2h deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f2h_delete_Delete_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtF2h = (

       nilPtF2hIfFail: [|:e| ^error: 'nilPtF2h failed: ', e] ).

  nilPtF2hIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtF2h_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptF2h deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f2h_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptF2h deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f2h_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  w = (

       wIfFail: [|:e| ^error: 'w failed: ', e] ).

  wIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f2h_w_W_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  w: t0  = (

       w: t0 IfFail: [|:e| ^error: 'w: failed: ', e] ).

  w: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f2h_w_W__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f2h_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f2h_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f2h_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f2h_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_W: t0 X: t1 Y: t2  = (

       set_W: t0 X: t1 Y: t2 IfFail: 
        [|:e| ^error: 'set_W:X:Y: failed: ', e] ).

  set_W: t0 X: t1 Y: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f2h_set_Set_W_X_Y__glue' ArgCoercions: 
        'pfff' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw ptF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f3d_delete_Delete_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtF3d = (

       nilPtF3dIfFail: [|:e| ^error: 'nilPtF3d failed: ', e] ).

  nilPtF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtF3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptF3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f3d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f3d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f3d_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f3d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f3d_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f3d_z_Z_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f3d_z_Z__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_X: t0 Y: t1 Z: t2  = (

       set_X: t0 Y: t1 Z: t2 IfFail: 
        [|:e| ^error: 'set_X:Y:Z: failed: ', e] ).

  set_X: t0 Y: t1 Z: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f3d_set_Set_X_Y_Z__glue' ArgCoercions: 
        'pfff' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw ptF3h _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f3h_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptF3h deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f3h_delete_Delete_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtF3h = (

       nilPtF3hIfFail: [|:e| ^error: 'nilPtF3h failed: ', e] ).

  nilPtF3hIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtF3h_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptF3h deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f3h_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptF3h deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f3h_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  w = (

       wIfFail: [|:e| ^error: 'w failed: ', e] ).

  wIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f3h_w_W_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  w: t0  = (

       w: t0 IfFail: [|:e| ^error: 'w: failed: ', e] ).

  w: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f3h_w_W__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f3h_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f3h_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f3h_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f3h_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f3h_z_Z_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_f3h_z_Z__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_W: t0 X: t1 Y: t2 Z: t3  = (

       set_W: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_W:X:Y:Z: failed: ', e] ).

  set_W: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_f3h_set_Set_W_X_Y_Z__glue' ArgCoercions: 
        'pffff' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw ptFlagD2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_d2d_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptFlagD2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_d2d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtFlagD2d = (

       nilPtFlagD2dIfFail: 
        [|:e| ^error: 'nilPtFlagD2d failed: ', e] ).

  nilPtFlagD2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtFlagD2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptFlagD2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_d2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptFlagD2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_d2d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  flag = (

       flagIfFail: [|:e| ^error: 'flag failed: ', e] ).

  flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_d2d_flag_Flag_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  flag: t0  = (

       flag: t0 IfFail: [|:e| ^error: 'flag: failed: ', e] ).

  flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_d2d_flag_Flag__glue' ArgCoercions: 
        'pi' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_d2d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_d2d_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_d2d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_d2d_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Flag: t0 X: t1 Y: t2  = (

       set_Flag: t0 X: t1 Y: t2 IfFail: 
        [|:e| ^error: 'set_Flag:X:Y: failed: ', e] ).

  set_Flag: t0 X: t1 Y: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_d2d_set_Set_Flag_X_Y__glue' 
        ArgCoercions: 'piff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw ptFlagD3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_d3d_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptFlagD3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_d3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtFlagD3d = (

       nilPtFlagD3dIfFail: 
        [|:e| ^error: 'nilPtFlagD3d failed: ', e] ).

  nilPtFlagD3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtFlagD3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptFlagD3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_d3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptFlagD3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_d3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  flag = (

       flagIfFail: [|:e| ^error: 'flag failed: ', e] ).

  flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_d3d_flag_Flag_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  flag: t0  = (

       flag: t0 IfFail: [|:e| ^error: 'flag: failed: ', e] ).

  flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_d3d_flag_Flag__glue' ArgCoercions: 
        'pi' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_d3d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_d3d_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_d3d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_d3d_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_d3d_z_Z_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_d3d_z_Z__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Flag: t0 X: t1 Y: t2 Z: t3  = (

       set_Flag: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_Flag:X:Y:Z: failed: ', e] ).

  set_Flag: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_d3d_set_Set_Flag_X_Y_Z__glue' 
        ArgCoercions: 'pifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw ptFlagDataF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_data_f3d_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptFlagDataF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_data_f3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtFlagDataF3d = (

       nilPtFlagDataF3dIfFail: 
        [|:e| ^error: 'nilPtFlagDataF3d failed: ', e] ).

  nilPtFlagDataF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtFlagDataF3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptFlagDataF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_data_f3d_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptFlagDataF3d deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_data_f3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  data = (

       dataIfFail: [|:e| ^error: 'data failed: ', e] ).

  dataIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_data_f3d_data_Data_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  flag = (

       flagIfFail: [|:e| ^error: 'flag failed: ', e] ).

  flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_data_f3d_flag_Flag_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  flag: t0  = (

       flag: t0 IfFail: [|:e| ^error: 'flag: failed: ', e] ).

  flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_data_f3d_flag_Flag__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_data_f3d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_data_f3d_x_X__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_data_f3d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_data_f3d_y_Y__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_data_f3d_z_Z_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_data_f3d_z_Z__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Flag: t0 X: t1 Y: t2 Z: t3  = (

       set_Flag: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_Flag:X:Y:Z: failed: ', e] ).

  set_Flag: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_data_f3d_set_Set_Flag_X_Y_Z__glue' 
        ArgCoercions: 'pifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw ptFlagF2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_f2d_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptFlagF2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_f2d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtFlagF2d = (

       nilPtFlagF2dIfFail: 
        [|:e| ^error: 'nilPtFlagF2d failed: ', e] ).

  nilPtFlagF2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtFlagF2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptFlagF2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_f2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptFlagF2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_f2d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  flag = (

       flagIfFail: [|:e| ^error: 'flag failed: ', e] ).

  flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_f2d_flag_Flag_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  flag: t0  = (

       flag: t0 IfFail: [|:e| ^error: 'flag: failed: ', e] ).

  flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_f2d_flag_Flag__glue' ArgCoercions: 
        'pi' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_f2d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_f2d_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_f2d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_f2d_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Flag: t0 X: t1 Y: t2  = (

       set_Flag: t0 X: t1 Y: t2 IfFail: 
        [|:e| ^error: 'set_Flag:X:Y: failed: ', e] ).

  set_Flag: t0 X: t1 Y: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_f2d_set_Set_Flag_X_Y__glue' 
        ArgCoercions: 'piff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw ptFlagF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_f3d_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptFlagF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_f3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtFlagF3d = (

       nilPtFlagF3dIfFail: 
        [|:e| ^error: 'nilPtFlagF3d failed: ', e] ).

  nilPtFlagF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtFlagF3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptFlagF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_f3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptFlagF3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_f3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  flag = (

       flagIfFail: [|:e| ^error: 'flag failed: ', e] ).

  flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_f3d_flag_Flag_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  flag: t0  = (

       flag: t0 IfFail: [|:e| ^error: 'flag: failed: ', e] ).

  flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_f3d_flag_Flag__glue' ArgCoercions: 
        'pi' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_f3d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_f3d_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_f3d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_f3d_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_f3d_z_Z_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_f3d_z_Z__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Flag: t0 X: t1 Y: t2 Z: t3  = (

       set_Flag: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_Flag:X:Y:Z: failed: ', e] ).

  set_Flag: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_f3d_set_Set_Flag_X_Y_Z__glue' 
        ArgCoercions: 'pifff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw ptFlagI2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_i2d_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptFlagI2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_i2d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtFlagI2d = (

       nilPtFlagI2dIfFail: 
        [|:e| ^error: 'nilPtFlagI2d failed: ', e] ).

  nilPtFlagI2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtFlagI2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptFlagI2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_i2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptFlagI2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_i2d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  flag = (

       flagIfFail: [|:e| ^error: 'flag failed: ', e] ).

  flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_i2d_flag_Flag_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  flag: t0  = (

       flag: t0 IfFail: [|:e| ^error: 'flag: failed: ', e] ).

  flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_i2d_flag_Flag__glue' ArgCoercions: 
        'pi' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_i2d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_i2d_x_X__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_i2d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_flag_i2d_y_Y__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Flag: t0 X: t1 Y: t2  = (

       set_Flag: t0 X: t1 Y: t2 IfFail: 
        [|:e| ^error: 'set_Flag:X:Y: failed: ', e] ).

  set_Flag: t0 X: t1 Y: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_flag_i2d_set_Set_Flag_X_Y__glue' 
        ArgCoercions: 'piii' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw ptI2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_i2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptI2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_i2d_delete_Delete_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtI2d = (

       nilPtI2dIfFail: [|:e| ^error: 'nilPtI2d failed: ', e] ).

  nilPtI2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtI2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptI2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_i2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptI2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_i2d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_i2d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_i2d_x_X__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_i2d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_i2d_y_Y__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw ptI2h _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_i2h_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptI2h deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_i2h_delete_Delete_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtI2h = (

       nilPtI2hIfFail: [|:e| ^error: 'nilPtI2h failed: ', e] ).

  nilPtI2hIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtI2h_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptI2h deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_i2h_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptI2h deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_i2h_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  w = (

       wIfFail: [|:e| ^error: 'w failed: ', e] ).

  wIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_i2h_w_W_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  w: t0  = (

       w: t0 IfFail: [|:e| ^error: 'w: failed: ', e] ).

  w: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_i2h_w_W__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_i2h_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_i2h_x_X__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_i2h_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_i2h_y_Y__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_W: t0 X: t1 Y: t2  = (

       set_W: t0 X: t1 Y: t2 IfFail: 
        [|:e| ^error: 'set_W:X:Y: failed: ', e] ).

  set_W: t0 X: t1 Y: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_i2h_set_Set_W_X_Y__glue' ArgCoercions: 
        'piii' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw ptList _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptList deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtList = (

       nilPtListIfFail: [|:e| ^error: 'nilPtList failed: ', e] ).

  nilPtListIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtList_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptList deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptList deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  bbox = (

       bboxIfFail: [|:e| ^error: 'bbox failed: ', e] ).

  bboxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_list_bbox_Bbox_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl bbox deadCopy IfFail: fb ).


  bbox: t0  = (

       bbox: t0 IfFail: [|:e| ^error: 'bbox: failed: ', e] ).

  bbox: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_list_bbox_Bbox__glue' ArgCoercions: 'pp' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_data_values = (

       num_data_valuesIfFail: 
        [|:e| ^error: 'num_data_values failed: ', e] ).

  num_data_valuesIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_pt_list_num_data_values_Num_data_values_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_data_values: t0  = (

       num_data_values: t0 IfFail: 
        [|:e| ^error: 'num_data_values: failed: ', e] ).

  num_data_values: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_pt_list_num_data_values_Num_data_values__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_pts = (

       num_ptsIfFail: [|:e| ^error: 'num_pts failed: ', e] ).

  num_ptsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_list_num_pts_Num_pts_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_pts: t0  = (

       num_pts: t0 IfFail: [|:e| ^error: 'num_pts: failed: ', e] ).

  num_pts: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_list_num_pts_Num_pts__glue' ArgCoercions: 
        'pi' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pt_type = (

       pt_typeIfFail: [|:e| ^error: 'pt_type failed: ', e] ).

  pt_typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_list_pt_type_Pt_type_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  pt_type: t0  = (

       pt_type: t0 IfFail: [|:e| ^error: 'pt_type: failed: ', e] ).

  pt_type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_list_pt_type_Pt_type__glue' ArgCoercions: 
        'p i' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  pts_color_d2d = (

       pts_color_d2dIfFail: 
        [|:e| ^error: 'pts_color_d2d failed: ', e] ).

  pts_color_d2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_color_d2d_Pts_color_d2d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptColorD2d deadCopy IfFail: fb ).


  pts_color_d2d: t0  = (

       pts_color_d2d: t0 IfFail: 
        [|:e| ^error: 'pts_color_d2d: failed: ', e] ).

  pts_color_d2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_color_d2d_Pts_color_d2d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_color_d3d = (

       pts_color_d3dIfFail: 
        [|:e| ^error: 'pts_color_d3d failed: ', e] ).

  pts_color_d3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_color_d3d_Pts_color_d3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptColorD3d deadCopy IfFail: fb ).


  pts_color_d3d: t0  = (

       pts_color_d3d: t0 IfFail: 
        [|:e| ^error: 'pts_color_d3d: failed: ', e] ).

  pts_color_d3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_color_d3d_Pts_color_d3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_color_data_f3d = (

       pts_color_data_f3dIfFail: 
        [|:e| ^error: 'pts_color_data_f3d failed: ', e] ).

  pts_color_data_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_data_f3d_Pts_color_data_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptColorDataF3d deadCopy IfFail: fb ).


  pts_color_data_f3d: t0  = (

       pts_color_data_f3d: t0 IfFail: 
        [|:e| ^error: 'pts_color_data_f3d: failed: ', e] ).

  pts_color_data_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_data_f3d_Pts_color_data_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_color_f2d = (

       pts_color_f2dIfFail: 
        [|:e| ^error: 'pts_color_f2d failed: ', e] ).

  pts_color_f2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_color_f2d_Pts_color_f2d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptColorF2d deadCopy IfFail: fb ).


  pts_color_f2d: t0  = (

       pts_color_f2d: t0 IfFail: 
        [|:e| ^error: 'pts_color_f2d: failed: ', e] ).

  pts_color_f2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_color_f2d_Pts_color_f2d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_color_f3d = (

       pts_color_f3dIfFail: 
        [|:e| ^error: 'pts_color_f3d failed: ', e] ).

  pts_color_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_color_f3d_Pts_color_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptColorF3d deadCopy IfFail: fb ).


  pts_color_f3d: t0  = (

       pts_color_f3d: t0 IfFail: 
        [|:e| ^error: 'pts_color_f3d: failed: ', e] ).

  pts_color_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_color_f3d_Pts_color_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_color_flag_d3d = (

       pts_color_flag_d3dIfFail: 
        [|:e| ^error: 'pts_color_flag_d3d failed: ', e] ).

  pts_color_flag_d3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_flag_d3d_Pts_color_flag_d3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptColorFlagD3d deadCopy IfFail: fb ).


  pts_color_flag_d3d: t0  = (

       pts_color_flag_d3d: t0 IfFail: 
        [|:e| ^error: 'pts_color_flag_d3d: failed: ', e] ).

  pts_color_flag_d3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_flag_d3d_Pts_color_flag_d3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_color_flag_data_f3d = (

       pts_color_flag_data_f3dIfFail: 
        [|:e| ^error: 'pts_color_flag_data_f3d failed: ', e] ).

  pts_color_flag_data_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_flag_data_f3d_Pts_color_flag_data_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptColorFlagDataF3d deadCopy IfFail: fb ).


  pts_color_flag_data_f3d: t0  = (

       pts_color_flag_data_f3d: t0 IfFail: 
        [|:e| ^error: 'pts_color_flag_data_f3d: failed: ', e] ).

  pts_color_flag_data_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_flag_data_f3d_Pts_color_flag_data_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_color_flag_f3d = (

       pts_color_flag_f3dIfFail: 
        [|:e| ^error: 'pts_color_flag_f3d failed: ', e] ).

  pts_color_flag_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_flag_f3d_Pts_color_flag_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptColorFlagF3d deadCopy IfFail: fb ).


  pts_color_flag_f3d: t0  = (

       pts_color_flag_f3d: t0 IfFail: 
        [|:e| ^error: 'pts_color_flag_f3d: failed: ', e] ).

  pts_color_flag_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_flag_f3d_Pts_color_flag_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_color_i2d = (

       pts_color_i2dIfFail: 
        [|:e| ^error: 'pts_color_i2d failed: ', e] ).

  pts_color_i2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_color_i2d_Pts_color_i2d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptColorI2d deadCopy IfFail: fb ).


  pts_color_i2d: t0  = (

       pts_color_i2d: t0 IfFail: 
        [|:e| ^error: 'pts_color_i2d: failed: ', e] ).

  pts_color_i2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_color_i2d_Pts_color_i2d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_color_normal_d3d = (

       pts_color_normal_d3dIfFail: 
        [|:e| ^error: 'pts_color_normal_d3d failed: ', e] ).

  pts_color_normal_d3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_normal_d3d_Pts_color_normal_d3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptColorNormalD3d deadCopy IfFail: fb ).


  pts_color_normal_d3d: t0  = (

       pts_color_normal_d3d: t0 IfFail: 
        [|:e| ^error: 'pts_color_normal_d3d: failed: ', e] ).

  pts_color_normal_d3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_normal_d3d_Pts_color_normal_d3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_color_normal_data_f3d = (

       pts_color_normal_data_f3dIfFail: 
        [|:e| ^error: 'pts_color_normal_data_f3d failed: ', e] ).

  pts_color_normal_data_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_normal_data_f3d_Pts_color_normal_data_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptColorNormalDataF3d deadCopy IfFail: 
        fb ).


  pts_color_normal_data_f3d: t0  = (

       pts_color_normal_data_f3d: t0 IfFail: 
        [|:e| ^error: 'pts_color_normal_data_f3d: failed: ', e] ).

  pts_color_normal_data_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_normal_data_f3d_Pts_color_normal_data_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_color_normal_f3d = (

       pts_color_normal_f3dIfFail: 
        [|:e| ^error: 'pts_color_normal_f3d failed: ', e] ).

  pts_color_normal_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_normal_f3d_Pts_color_normal_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptColorNormalF3d deadCopy IfFail: fb ).


  pts_color_normal_f3d: t0  = (

       pts_color_normal_f3d: t0 IfFail: 
        [|:e| ^error: 'pts_color_normal_f3d: failed: ', e] ).

  pts_color_normal_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_normal_f3d_Pts_color_normal_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_color_normal_flag_d3d = (

       pts_color_normal_flag_d3dIfFail: 
        [|:e| ^error: 'pts_color_normal_flag_d3d failed: ', e] ).

  pts_color_normal_flag_d3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_normal_flag_d3d_Pts_color_normal_flag_d3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptColorNormalFlagD3d deadCopy IfFail: 
        fb ).


  pts_color_normal_flag_d3d: t0  = (

       pts_color_normal_flag_d3d: t0 IfFail: 
        [|:e| ^error: 'pts_color_normal_flag_d3d: failed: ', e] ).

  pts_color_normal_flag_d3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_normal_flag_d3d_Pts_color_normal_flag_d3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_color_normal_flag_data_f3d = (

       pts_color_normal_flag_data_f3dIfFail: 
        [|:e| ^error: 'pts_color_normal_flag_data_f3d failed: ', e] ).

  pts_color_normal_flag_data_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_normal_flag_data_f3d_Pts_color_normal_flag_data_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptColorNormalFlagDataF3d deadCopy 
        IfFail: fb ).


  pts_color_normal_flag_data_f3d: t0  = (

       pts_color_normal_flag_data_f3d: t0 IfFail: 
        [|:e| ^error: 'pts_color_normal_flag_data_f3d: failed: ', e] ).

  pts_color_normal_flag_data_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_normal_flag_data_f3d_Pts_color_normal_flag_data_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_color_normal_flag_f3d = (

       pts_color_normal_flag_f3dIfFail: 
        [|:e| ^error: 'pts_color_normal_flag_f3d failed: ', e] ).

  pts_color_normal_flag_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_normal_flag_f3d_Pts_color_normal_flag_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptColorNormalFlagF3d deadCopy IfFail: 
        fb ).


  pts_color_normal_flag_f3d: t0  = (

       pts_color_normal_flag_f3d: t0 IfFail: 
        [|:e| ^error: 'pts_color_normal_flag_f3d: failed: ', e] ).

  pts_color_normal_flag_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_color_normal_flag_f3d_Pts_color_normal_flag_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_d2d = (

       pts_d2dIfFail: [|:e| ^error: 'pts_d2d failed: ', e] ).

  pts_d2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_d2d_Pts_d2d_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptD2d deadCopy IfFail: fb ).


  pts_d2d: t0  = (

       pts_d2d: t0 IfFail: [|:e| ^error: 'pts_d2d: failed: ', e] ).

  pts_d2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_d2d_Pts_d2d__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_d2h = (

       pts_d2hIfFail: [|:e| ^error: 'pts_d2h failed: ', e] ).

  pts_d2hIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_d2h_Pts_d2h_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptD2h deadCopy IfFail: fb ).


  pts_d2h: t0  = (

       pts_d2h: t0 IfFail: [|:e| ^error: 'pts_d2h: failed: ', e] ).

  pts_d2h: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_d2h_Pts_d2h__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_d3d = (

       pts_d3dIfFail: [|:e| ^error: 'pts_d3d failed: ', e] ).

  pts_d3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_d3d_Pts_d3d_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptD3d deadCopy IfFail: fb ).


  pts_d3d: t0  = (

       pts_d3d: t0 IfFail: [|:e| ^error: 'pts_d3d: failed: ', e] ).

  pts_d3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_d3d_Pts_d3d__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_d3h = (

       pts_d3hIfFail: [|:e| ^error: 'pts_d3h failed: ', e] ).

  pts_d3hIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_d3h_Pts_d3h_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptD3h deadCopy IfFail: fb ).


  pts_d3h: t0  = (

       pts_d3h: t0 IfFail: [|:e| ^error: 'pts_d3h: failed: ', e] ).

  pts_d3h: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_d3h_Pts_d3h__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_data_f3d = (

       pts_data_f3dIfFail: 
        [|:e| ^error: 'pts_data_f3d failed: ', e] ).

  pts_data_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_data_f3d_Pts_data_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptDataF3d deadCopy IfFail: fb ).


  pts_data_f3d: t0  = (

       pts_data_f3d: t0 IfFail: 
        [|:e| ^error: 'pts_data_f3d: failed: ', e] ).

  pts_data_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_data_f3d_Pts_data_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_f2d = (

       pts_f2dIfFail: [|:e| ^error: 'pts_f2d failed: ', e] ).

  pts_f2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_f2d_Pts_f2d_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF2d deadCopy IfFail: fb ).


  pts_f2d: t0  = (

       pts_f2d: t0 IfFail: [|:e| ^error: 'pts_f2d: failed: ', e] ).

  pts_f2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_f2d_Pts_f2d__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_f2h = (

       pts_f2hIfFail: [|:e| ^error: 'pts_f2h failed: ', e] ).

  pts_f2hIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_f2h_Pts_f2h_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF2h deadCopy IfFail: fb ).


  pts_f2h: t0  = (

       pts_f2h: t0 IfFail: [|:e| ^error: 'pts_f2h: failed: ', e] ).

  pts_f2h: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_f2h_Pts_f2h__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_f3d = (

       pts_f3dIfFail: [|:e| ^error: 'pts_f3d failed: ', e] ).

  pts_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_f3d_Pts_f3d_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  pts_f3d: t0  = (

       pts_f3d: t0 IfFail: [|:e| ^error: 'pts_f3d: failed: ', e] ).

  pts_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_f3d_Pts_f3d__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_f3h = (

       pts_f3hIfFail: [|:e| ^error: 'pts_f3h failed: ', e] ).

  pts_f3hIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_f3h_Pts_f3h_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3h deadCopy IfFail: fb ).


  pts_f3h: t0  = (

       pts_f3h: t0 IfFail: [|:e| ^error: 'pts_f3h: failed: ', e] ).

  pts_f3h: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_f3h_Pts_f3h__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_flag_d2d = (

       pts_flag_d2dIfFail: 
        [|:e| ^error: 'pts_flag_d2d failed: ', e] ).

  pts_flag_d2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_flag_d2d_Pts_flag_d2d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagD2d deadCopy IfFail: fb ).


  pts_flag_d2d: t0  = (

       pts_flag_d2d: t0 IfFail: 
        [|:e| ^error: 'pts_flag_d2d: failed: ', e] ).

  pts_flag_d2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_flag_d2d_Pts_flag_d2d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_flag_d3d = (

       pts_flag_d3dIfFail: 
        [|:e| ^error: 'pts_flag_d3d failed: ', e] ).

  pts_flag_d3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_flag_d3d_Pts_flag_d3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagD3d deadCopy IfFail: fb ).


  pts_flag_d3d: t0  = (

       pts_flag_d3d: t0 IfFail: 
        [|:e| ^error: 'pts_flag_d3d: failed: ', e] ).

  pts_flag_d3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_flag_d3d_Pts_flag_d3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_flag_data_f3d = (

       pts_flag_data_f3dIfFail: 
        [|:e| ^error: 'pts_flag_data_f3d failed: ', e] ).

  pts_flag_data_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_flag_data_f3d_Pts_flag_data_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagDataF3d deadCopy IfFail: fb ).


  pts_flag_data_f3d: t0  = (

       pts_flag_data_f3d: t0 IfFail: 
        [|:e| ^error: 'pts_flag_data_f3d: failed: ', e] ).

  pts_flag_data_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_flag_data_f3d_Pts_flag_data_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_flag_f2d = (

       pts_flag_f2dIfFail: 
        [|:e| ^error: 'pts_flag_f2d failed: ', e] ).

  pts_flag_f2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_flag_f2d_Pts_flag_f2d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagF2d deadCopy IfFail: fb ).


  pts_flag_f2d: t0  = (

       pts_flag_f2d: t0 IfFail: 
        [|:e| ^error: 'pts_flag_f2d: failed: ', e] ).

  pts_flag_f2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_flag_f2d_Pts_flag_f2d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_flag_f3d = (

       pts_flag_f3dIfFail: 
        [|:e| ^error: 'pts_flag_f3d failed: ', e] ).

  pts_flag_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_flag_f3d_Pts_flag_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagF3d deadCopy IfFail: fb ).


  pts_flag_f3d: t0  = (

       pts_flag_f3d: t0 IfFail: 
        [|:e| ^error: 'pts_flag_f3d: failed: ', e] ).

  pts_flag_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_flag_f3d_Pts_flag_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_flag_i2d = (

       pts_flag_i2dIfFail: 
        [|:e| ^error: 'pts_flag_i2d failed: ', e] ).

  pts_flag_i2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_flag_i2d_Pts_flag_i2d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagI2d deadCopy IfFail: fb ).


  pts_flag_i2d: t0  = (

       pts_flag_i2d: t0 IfFail: 
        [|:e| ^error: 'pts_flag_i2d: failed: ', e] ).

  pts_flag_i2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_flag_i2d_Pts_flag_i2d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_i2d = (

       pts_i2dIfFail: [|:e| ^error: 'pts_i2d failed: ', e] ).

  pts_i2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_i2d_Pts_i2d_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptI2d deadCopy IfFail: fb ).


  pts_i2d: t0  = (

       pts_i2d: t0 IfFail: [|:e| ^error: 'pts_i2d: failed: ', e] ).

  pts_i2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_i2d_Pts_i2d__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_i2h = (

       pts_i2hIfFail: [|:e| ^error: 'pts_i2h failed: ', e] ).

  pts_i2hIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_i2h_Pts_i2h_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptI2h deadCopy IfFail: fb ).


  pts_i2h: t0  = (

       pts_i2h: t0 IfFail: [|:e| ^error: 'pts_i2h: failed: ', e] ).

  pts_i2h: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_i2h_Pts_i2h__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_normal_d3d = (

       pts_normal_d3dIfFail: 
        [|:e| ^error: 'pts_normal_d3d failed: ', e] ).

  pts_normal_d3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_normal_d3d_Pts_normal_d3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptNormalD3d deadCopy IfFail: fb ).


  pts_normal_d3d: t0  = (

       pts_normal_d3d: t0 IfFail: 
        [|:e| ^error: 'pts_normal_d3d: failed: ', e] ).

  pts_normal_d3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_normal_d3d_Pts_normal_d3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_normal_data_f3d = (

       pts_normal_data_f3dIfFail: 
        [|:e| ^error: 'pts_normal_data_f3d failed: ', e] ).

  pts_normal_data_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_normal_data_f3d_Pts_normal_data_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptNormalDataF3d deadCopy IfFail: fb ).


  pts_normal_data_f3d: t0  = (

       pts_normal_data_f3d: t0 IfFail: 
        [|:e| ^error: 'pts_normal_data_f3d: failed: ', e] ).

  pts_normal_data_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_normal_data_f3d_Pts_normal_data_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_normal_f3d = (

       pts_normal_f3dIfFail: 
        [|:e| ^error: 'pts_normal_f3d failed: ', e] ).

  pts_normal_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_normal_f3d_Pts_normal_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptNormalF3d deadCopy IfFail: fb ).


  pts_normal_f3d: t0  = (

       pts_normal_f3d: t0 IfFail: 
        [|:e| ^error: 'pts_normal_f3d: failed: ', e] ).

  pts_normal_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_pts_normal_f3d_Pts_normal_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_normal_flag_d3d = (

       pts_normal_flag_d3dIfFail: 
        [|:e| ^error: 'pts_normal_flag_d3d failed: ', e] ).

  pts_normal_flag_d3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_normal_flag_d3d_Pts_normal_flag_d3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptNormalFlagD3d deadCopy IfFail: fb ).


  pts_normal_flag_d3d: t0  = (

       pts_normal_flag_d3d: t0 IfFail: 
        [|:e| ^error: 'pts_normal_flag_d3d: failed: ', e] ).

  pts_normal_flag_d3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_normal_flag_d3d_Pts_normal_flag_d3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_normal_flag_data_f3d = (

       pts_normal_flag_data_f3dIfFail: 
        [|:e| ^error: 'pts_normal_flag_data_f3d failed: ', e] ).

  pts_normal_flag_data_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_normal_flag_data_f3d_Pts_normal_flag_data_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptNormalFlagDataF3d deadCopy IfFail: 
        fb ).


  pts_normal_flag_data_f3d: t0  = (

       pts_normal_flag_data_f3d: t0 IfFail: 
        [|:e| ^error: 'pts_normal_flag_data_f3d: failed: ', e] ).

  pts_normal_flag_data_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_normal_flag_data_f3d_Pts_normal_flag_data_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pts_normal_flag_f3d = (

       pts_normal_flag_f3dIfFail: 
        [|:e| ^error: 'pts_normal_flag_f3d failed: ', e] ).

  pts_normal_flag_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_normal_flag_f3d_Pts_normal_flag_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptNormalFlagF3d deadCopy IfFail: fb ).


  pts_normal_flag_f3d: t0  = (

       pts_normal_flag_f3d: t0 IfFail: 
        [|:e| ^error: 'pts_normal_flag_f3d: failed: ', e] ).

  pts_normal_flag_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_pts_normal_flag_f3d_Pts_normal_flag_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_d2d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_color_d2d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_color_d2d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_d2d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_color_d2d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_d3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_color_d3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_color_d3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_d3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_color_d3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_data_f3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_color_data_f3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_color_data_f3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_data_f3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_color_data_f3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_f2d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_color_f2d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_color_f2d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_f2d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_color_f2d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_f3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_color_f3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_color_f3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_f3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_color_f3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_flag_d3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_color_flag_d3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_color_flag_d3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_flag_d3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_color_flag_d3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_flag_data_f3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_color_flag_data_f3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_color_flag_data_f3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_flag_data_f3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_color_flag_data_f3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_flag_f3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_color_flag_f3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_color_flag_f3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_flag_f3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_color_flag_f3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_i2d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_color_i2d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_color_i2d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_i2d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_color_i2d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_normal_d3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_color_normal_d3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_color_normal_d3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_normal_d3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_color_normal_d3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_normal_data_f3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_color_normal_data_f3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_color_normal_data_f3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_normal_data_f3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_color_normal_data_f3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_normal_f3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_color_normal_f3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_color_normal_f3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_normal_f3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_color_normal_f3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_normal_flag_d3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_color_normal_flag_d3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_color_normal_flag_d3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_normal_flag_d3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_color_normal_flag_d3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_normal_flag_data_f3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_color_normal_flag_data_f3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_color_normal_flag_data_f3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_normal_flag_data_f3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_color_normal_flag_data_f3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_normal_flag_f3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_color_normal_flag_f3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_color_normal_flag_f3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_color_normal_flag_f3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_color_normal_flag_f3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_d2d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_d2d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_d2d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_d2d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_d2d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_d2h: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_d2h: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_d2h: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_d2h: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_d2h__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_d3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_d3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_d3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_d3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_d3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_d3h: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_d3h: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_d3h: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_d3h: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_d3h__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_data_f3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_data_f3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_data_f3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_data_f3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_data_f3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_f2d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_f2d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_f2d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_f2d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_f2d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_f2h: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_f2h: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_f2h: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_f2h: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_f2h__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_f3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_f3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_f3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_f3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_f3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_f3h: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_f3h: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_f3h: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_f3h: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_f3h__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_flag_d2d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_flag_d2d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_flag_d2d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_flag_d2d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_flag_d2d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_flag_d3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_flag_d3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_flag_d3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_flag_d3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_flag_d3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_flag_data_f3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_flag_data_f3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_flag_data_f3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_flag_data_f3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_flag_data_f3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_flag_f2d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_flag_f2d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_flag_f2d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_flag_f2d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_flag_f2d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_flag_f3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_flag_f3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_flag_f3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_flag_f3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_flag_f3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_flag_i2d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_flag_i2d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_flag_i2d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_flag_i2d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_flag_i2d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_i2d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_i2d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_i2d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_i2d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_i2d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_i2h: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_i2h: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_i2h: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_i2h: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_i2h__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_normal_d3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_normal_d3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_normal_d3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_normal_d3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_normal_d3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_normal_data_f3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_normal_data_f3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_normal_data_f3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_normal_data_f3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_normal_data_f3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_normal_f3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_normal_f3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_normal_f3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_normal_f3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_normal_f3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_normal_flag_d3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_normal_flag_d3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_normal_flag_d3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_normal_flag_d3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_normal_flag_d3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_normal_flag_data_f3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_normal_flag_data_f3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_normal_flag_data_f3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_normal_flag_data_f3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_normal_flag_data_f3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_normal_flag_f3d: t4  = (

       set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
        Pts_normal_flag_f3d: t4 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_data_values:Num_pts:Pt_type:Pts_normal_flag_f3d: failed: ', e] ).

  set_Bbox: t0 Num_data_values: t1 Num_pts: t2 Pt_type: t3 
    Pts_normal_flag_f3d: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_set_Set_Bbox_Num_data_values_Num_pts_Pt_type_Pts_normal_flag_f3d__glue' 
        ArgCoercions: 'ppii ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        With: t4 IfFail: fb .
    self).


	}
| )

traits xgl raw ptListList _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_list_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptListList deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_list_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtListList = (

       nilPtListListIfFail: 
        [|:e| ^error: 'nilPtListList failed: ', e] ).

  nilPtListListIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtListList_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptListList deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_list_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptListList deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_list_list_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  bbox = (

       bboxIfFail: [|:e| ^error: 'bbox failed: ', e] ).

  bboxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_list_list_bbox_Bbox_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl bbox deadCopy IfFail: fb ).


  bbox: t0  = (

       bbox: t0 IfFail: [|:e| ^error: 'bbox: failed: ', e] ).

  bbox: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_list_list_bbox_Bbox__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_pt_lists = (

       num_pt_listsIfFail: 
        [|:e| ^error: 'num_pt_lists failed: ', e] ).

  num_pt_listsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_list_list_num_pt_lists_Num_pt_lists_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_pt_lists: t0  = (

       num_pt_lists: t0 IfFail: 
        [|:e| ^error: 'num_pt_lists: failed: ', e] ).

  num_pt_lists: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_pt_list_list_num_pt_lists_Num_pt_lists__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pt_lists = (

       pt_listsIfFail: [|:e| ^error: 'pt_lists failed: ', e] ).

  pt_listsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_list_list_pt_lists_Pt_lists_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptList deadCopy IfFail: fb ).


  pt_lists: t0  = (

       pt_lists: t0 IfFail: [|:e| ^error: 'pt_lists: failed: ', e] ).

  pt_lists: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_list_list_pt_lists_Pt_lists__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Bbox: t0 Num_pt_lists: t1 Pt_lists: t2  = (

       set_Bbox: t0 Num_pt_lists: t1 Pt_lists: t2 IfFail: 
        [|:e| ^error: 'set_Bbox:Num_pt_lists:Pt_lists: failed: ', e] ).

  set_Bbox: t0 Num_pt_lists: t1 Pt_lists: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_list_list_set_Set_Bbox_Num_pt_lists_Pt_lists__glue' 
        ArgCoercions: 'ppip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw ptNormalD3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_d3d_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptNormalD3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_d3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtNormalD3d = (

       nilPtNormalD3dIfFail: 
        [|:e| ^error: 'nilPtNormalD3d failed: ', e] ).

  nilPtNormalD3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtNormalD3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptNormalD3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_d3d_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptNormalD3d deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_d3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  normal = (

       normalIfFail: [|:e| ^error: 'normal failed: ', e] ).

  normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_d3d_normal_Normal_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  normal: t0  = (

       normal: t0 IfFail: [|:e| ^error: 'normal: failed: ', e] ).

  normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_d3d_normal_Normal__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_d3d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_d3d_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_d3d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_d3d_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_d3d_z_Z_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_d3d_z_Z__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Normal: t0 X: t1 Y: t2 Z: t3  = (

       set_Normal: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_Normal:X:Y:Z: failed: ', e] ).

  set_Normal: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_d3d_set_Set_Normal_X_Y_Z__glue' 
        ArgCoercions: 'ppfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw ptNormalDataF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_data_f3d_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptNormalDataF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_data_f3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtNormalDataF3d = (

       nilPtNormalDataF3dIfFail: 
        [|:e| ^error: 'nilPtNormalDataF3d failed: ', e] ).

  nilPtNormalDataF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtNormalDataF3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptNormalDataF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_data_f3d_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptNormalDataF3d deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_data_f3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  data = (

       dataIfFail: [|:e| ^error: 'data failed: ', e] ).

  dataIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_data_f3d_data_Data_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  normal = (

       normalIfFail: [|:e| ^error: 'normal failed: ', e] ).

  normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_data_f3d_normal_Normal_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  normal: t0  = (

       normal: t0 IfFail: [|:e| ^error: 'normal: failed: ', e] ).

  normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_data_f3d_normal_Normal__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_data_f3d_x_X_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_data_f3d_x_X__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_data_f3d_y_Y_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_data_f3d_y_Y__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_data_f3d_z_Z_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_data_f3d_z_Z__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Normal: t0 X: t1 Y: t2 Z: t3  = (

       set_Normal: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_Normal:X:Y:Z: failed: ', e] ).

  set_Normal: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_normal_data_f3d_set_Set_Normal_X_Y_Z__glue' 
        ArgCoercions: 'ppfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw ptNormalF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_f3d_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptNormalF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_f3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtNormalF3d = (

       nilPtNormalF3dIfFail: 
        [|:e| ^error: 'nilPtNormalF3d failed: ', e] ).

  nilPtNormalF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtNormalF3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptNormalF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_f3d_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptNormalF3d deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_f3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  normal = (

       normalIfFail: [|:e| ^error: 'normal failed: ', e] ).

  normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_f3d_normal_Normal_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  normal: t0  = (

       normal: t0 IfFail: [|:e| ^error: 'normal: failed: ', e] ).

  normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_f3d_normal_Normal__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_f3d_x_X_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_f3d_x_X__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_f3d_y_Y_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_f3d_y_Y__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_f3d_z_Z_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_f3d_z_Z__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Normal: t0 X: t1 Y: t2 Z: t3  = (

       set_Normal: t0 X: t1 Y: t2 Z: t3 IfFail: 
        [|:e| ^error: 'set_Normal:X:Y:Z: failed: ', e] ).

  set_Normal: t0 X: t1 Y: t2 Z: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_f3d_set_Set_Normal_X_Y_Z__glue' 
        ArgCoercions: 'ppfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw ptNormalFlagD3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_d3d_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptNormalFlagD3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_d3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtNormalFlagD3d = (

       nilPtNormalFlagD3dIfFail: 
        [|:e| ^error: 'nilPtNormalFlagD3d failed: ', e] ).

  nilPtNormalFlagD3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtNormalFlagD3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptNormalFlagD3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_d3d_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptNormalFlagD3d deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_d3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  flag = (

       flagIfFail: [|:e| ^error: 'flag failed: ', e] ).

  flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_d3d_flag_Flag_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  flag: t0  = (

       flag: t0 IfFail: [|:e| ^error: 'flag: failed: ', e] ).

  flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_d3d_flag_Flag__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  normal = (

       normalIfFail: [|:e| ^error: 'normal failed: ', e] ).

  normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_d3d_normal_Normal_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  normal: t0  = (

       normal: t0 IfFail: [|:e| ^error: 'normal: failed: ', e] ).

  normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_d3d_normal_Normal__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_d3d_x_X_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_d3d_x_X__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_d3d_y_Y_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_d3d_y_Y__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_d3d_z_Z_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_d3d_z_Z__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Flag: t0 Normal: t1 X: t2 Y: t3 Z: t4  = (

       set_Flag: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Flag:Normal:X:Y:Z: failed: ', e] ).

  set_Flag: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_normal_flag_d3d_set_Set_Flag_Normal_X_Y_Z__glue' 
        ArgCoercions: 'pipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


	}
| )

traits xgl raw ptNormalFlagDataF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_data_f3d_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptNormalFlagDataF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_data_f3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtNormalFlagDataF3d = (

       nilPtNormalFlagDataF3dIfFail: 
        [|:e| ^error: 'nilPtNormalFlagDataF3d failed: ', e] ).

  nilPtNormalFlagDataF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtNormalFlagDataF3d_glue' ArgCoercions: 
        ' ' ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptNormalFlagDataF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_data_f3d_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptNormalFlagDataF3d deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_data_f3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  data = (

       dataIfFail: [|:e| ^error: 'data failed: ', e] ).

  dataIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_data_f3d_data_Data_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  flag = (

       flagIfFail: [|:e| ^error: 'flag failed: ', e] ).

  flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_data_f3d_flag_Flag_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  flag: t0  = (

       flag: t0 IfFail: [|:e| ^error: 'flag: failed: ', e] ).

  flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_data_f3d_flag_Flag__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  normal = (

       normalIfFail: [|:e| ^error: 'normal failed: ', e] ).

  normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_data_f3d_normal_Normal_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  normal: t0  = (

       normal: t0 IfFail: [|:e| ^error: 'normal: failed: ', e] ).

  normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_data_f3d_normal_Normal__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_data_f3d_x_X_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_data_f3d_x_X__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_data_f3d_y_Y_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_data_f3d_y_Y__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_data_f3d_z_Z_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_data_f3d_z_Z__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Flag: t0 Normal: t1 X: t2 Y: t3 Z: t4  = (

       set_Flag: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Flag:Normal:X:Y:Z: failed: ', e] ).

  set_Flag: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_normal_flag_data_f3d_set_Set_Flag_Normal_X_Y_Z__glue' 
        ArgCoercions: 'pipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


	}
| )

traits xgl raw ptNormalFlagF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_f3d_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptNormalFlagF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_f3d_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtNormalFlagF3d = (

       nilPtNormalFlagF3dIfFail: 
        [|:e| ^error: 'nilPtNormalFlagF3d failed: ', e] ).

  nilPtNormalFlagF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtNormalFlagF3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptNormalFlagF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_f3d_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptNormalFlagF3d deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_f3d_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  flag = (

       flagIfFail: [|:e| ^error: 'flag failed: ', e] ).

  flagIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_f3d_flag_Flag_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  flag: t0  = (

       flag: t0 IfFail: [|:e| ^error: 'flag: failed: ', e] ).

  flag: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_f3d_flag_Flag__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  normal = (

       normalIfFail: [|:e| ^error: 'normal failed: ', e] ).

  normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_f3d_normal_Normal_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  normal: t0  = (

       normal: t0 IfFail: [|:e| ^error: 'normal: failed: ', e] ).

  normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_normal_flag_f3d_normal_Normal__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  x = (

       xIfFail: [|:e| ^error: 'x failed: ', e] ).

  xIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_f3d_x_X_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  x: t0  = (

       x: t0 IfFail: [|:e| ^error: 'x: failed: ', e] ).

  x: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_f3d_x_X__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  y = (

       yIfFail: [|:e| ^error: 'y failed: ', e] ).

  yIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_f3d_y_Y_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  y: t0  = (

       y: t0 IfFail: [|:e| ^error: 'y: failed: ', e] ).

  y: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_f3d_y_Y__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  z = (

       zIfFail: [|:e| ^error: 'z failed: ', e] ).

  zIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_f3d_z_Z_glue' ArgCoercions: 
        'p' ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  z: t0  = (

       z: t0 IfFail: [|:e| ^error: 'z: failed: ', e] ).

  z: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_normal_flag_f3d_z_Z__glue' ArgCoercions: 
        'pf' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Flag: t0 Normal: t1 X: t2 Y: t3 Z: t4  = (

       set_Flag: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: 
        [|:e| ^error: 'set_Flag:Normal:X:Y:Z: failed: ', e] ).

  set_Flag: t0 Normal: t1 X: t2 Y: t3 Z: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_normal_flag_f3d_set_Set_Flag_Normal_X_Y_Z__glue' 
        ArgCoercions: 'pipfff' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


	}
| )

traits xgl raw ptTypeSupported _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_type_supported_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl ptTypeSupported deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_type_supported_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilPtTypeSupported = (

       nilPtTypeSupportedIfFail: 
        [|:e| ^error: 'nilPtTypeSupported failed: ', e] ).

  nilPtTypeSupportedIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilPtTypeSupported_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl ptTypeSupported deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_type_supported_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl ptTypeSupported deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_pt_type_supported_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  pt_dim_2d = (

       pt_dim_2dIfFail: [|:e| ^error: 'pt_dim_2d failed: ', e] ).

  pt_dim_2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_type_supported_pt_dim_2d_Pt_dim_2d_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  pt_dim_2d: t0  = (

       pt_dim_2d: t0 IfFail: 
        [|:e| ^error: 'pt_dim_2d: failed: ', e] ).

  pt_dim_2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_type_supported_pt_dim_2d_Pt_dim_2d__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pt_dim_3d = (

       pt_dim_3dIfFail: [|:e| ^error: 'pt_dim_3d failed: ', e] ).

  pt_dim_3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_type_supported_pt_dim_3d_Pt_dim_3d_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  pt_dim_3d: t0  = (

       pt_dim_3d: t0 IfFail: 
        [|:e| ^error: 'pt_dim_3d: failed: ', e] ).

  pt_dim_3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_pt_type_supported_pt_dim_3d_Pt_dim_3d__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pt_type_double = (

       pt_type_doubleIfFail: 
        [|:e| ^error: 'pt_type_double failed: ', e] ).

  pt_type_doubleIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_pt_type_supported_pt_type_double_Pt_type_double_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  pt_type_double: t0  = (

       pt_type_double: t0 IfFail: 
        [|:e| ^error: 'pt_type_double: failed: ', e] ).

  pt_type_double: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_pt_type_supported_pt_type_double_Pt_type_double__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pt_type_float = (

       pt_type_floatIfFail: 
        [|:e| ^error: 'pt_type_float failed: ', e] ).

  pt_type_floatIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_pt_type_supported_pt_type_float_Pt_type_float_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  pt_type_float: t0  = (

       pt_type_float: t0 IfFail: 
        [|:e| ^error: 'pt_type_float: failed: ', e] ).

  pt_type_float: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_pt_type_supported_pt_type_float_Pt_type_float__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  pt_type_int = (

       pt_type_intIfFail: [|:e| ^error: 'pt_type_int failed: ', e] ).

  pt_type_intIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_pt_type_supported_pt_type_int_Pt_type_int_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  pt_type_int: t0  = (

       pt_type_int: t0 IfFail: 
        [|:e| ^error: 'pt_type_int: failed: ', e] ).

  pt_type_int: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_pt_type_supported_pt_type_int_Pt_type_int__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Pt_dim_2d: t0 Pt_dim_3d: t1 Pt_type_double: t2 
    Pt_type_float: t3 Pt_type_int: t4  = (

       set_Pt_dim_2d: t0 Pt_dim_3d: t1 Pt_type_double: t2 
        Pt_type_float: t3 Pt_type_int: t4 IfFail: 
        [|:e| ^error: 'set_Pt_dim_2d:Pt_dim_3d:Pt_type_double:Pt_type_float:Pt_type_int: failed: ', e] ).

  set_Pt_dim_2d: t0 Pt_dim_3d: t1 Pt_type_double: t2 
    Pt_type_float: t3 Pt_type_int: t4 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_pt_type_supported_set_Set_Pt_dim_2d_Pt_dim_3d_Pt_type_double_Pt_type_float_Pt_type_int__glue' 
        ArgCoercions: 'piiiii' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        IfFail: fb .
    self).


	}
| )

traits xgl raw rectAd3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_ad3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl rectAd3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_ad3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilRectAd3d = (

       nilRectAd3dIfFail: [|:e| ^error: 'nilRectAd3d failed: ', e] ).

  nilRectAd3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilRectAd3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl rectAd3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_ad3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl rectAd3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_ad3d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  corner_max = (

       corner_maxIfFail: [|:e| ^error: 'corner_max failed: ', e] ).

  corner_maxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_ad3d_corner_max_Corner_max_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptD2d deadCopy IfFail: fb ).


  corner_max: t0  = (

       corner_max: t0 IfFail: 
        [|:e| ^error: 'corner_max: failed: ', e] ).

  corner_max: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_ad3d_corner_max_Corner_max__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  corner_min = (

       corner_minIfFail: [|:e| ^error: 'corner_min failed: ', e] ).

  corner_minIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_ad3d_corner_min_Corner_min_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagD3d deadCopy IfFail: fb ).


  corner_min: t0  = (

       corner_min: t0 IfFail: 
        [|:e| ^error: 'corner_min: failed: ', e] ).

  corner_min: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_ad3d_corner_min_Corner_min__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw rectAf3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_af3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl rectAf3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_af3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilRectAf3d = (

       nilRectAf3dIfFail: [|:e| ^error: 'nilRectAf3d failed: ', e] ).

  nilRectAf3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilRectAf3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl rectAf3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_af3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl rectAf3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_af3d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  corner_max = (

       corner_maxIfFail: [|:e| ^error: 'corner_max failed: ', e] ).

  corner_maxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_af3d_corner_max_Corner_max_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF2d deadCopy IfFail: fb ).


  corner_max: t0  = (

       corner_max: t0 IfFail: 
        [|:e| ^error: 'corner_max: failed: ', e] ).

  corner_max: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_af3d_corner_max_Corner_max__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  corner_min = (

       corner_minIfFail: [|:e| ^error: 'corner_min failed: ', e] ).

  corner_minIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_af3d_corner_min_Corner_min_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagF3d deadCopy IfFail: fb ).


  corner_min: t0  = (

       corner_min: t0 IfFail: 
        [|:e| ^error: 'corner_min: failed: ', e] ).

  corner_min: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_af3d_corner_min_Corner_min__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw rectD2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_d2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl rectD2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_d2d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilRectD2d = (

       nilRectD2dIfFail: [|:e| ^error: 'nilRectD2d failed: ', e] ).

  nilRectD2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilRectD2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl rectD2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_d2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl rectD2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_d2d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  corner_max = (

       corner_maxIfFail: [|:e| ^error: 'corner_max failed: ', e] ).

  corner_maxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_d2d_corner_max_Corner_max_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptD2d deadCopy IfFail: fb ).


  corner_max: t0  = (

       corner_max: t0 IfFail: 
        [|:e| ^error: 'corner_max: failed: ', e] ).

  corner_max: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_d2d_corner_max_Corner_max__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  corner_min = (

       corner_minIfFail: [|:e| ^error: 'corner_min failed: ', e] ).

  corner_minIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_d2d_corner_min_Corner_min_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagD2d deadCopy IfFail: fb ).


  corner_min: t0  = (

       corner_min: t0 IfFail: 
        [|:e| ^error: 'corner_min: failed: ', e] ).

  corner_min: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_d2d_corner_min_Corner_min__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw rectD3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_d3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl rectD3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_d3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilRectD3d = (

       nilRectD3dIfFail: [|:e| ^error: 'nilRectD3d failed: ', e] ).

  nilRectD3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilRectD3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl rectD3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_d3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl rectD3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_d3d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  corner_max = (

       corner_maxIfFail: [|:e| ^error: 'corner_max failed: ', e] ).

  corner_maxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_d3d_corner_max_Corner_max_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptD2d deadCopy IfFail: fb ).


  corner_max: t0  = (

       corner_max: t0 IfFail: 
        [|:e| ^error: 'corner_max: failed: ', e] ).

  corner_max: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_d3d_corner_max_Corner_max__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  corner_min = (

       corner_minIfFail: [|:e| ^error: 'corner_min failed: ', e] ).

  corner_minIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_d3d_corner_min_Corner_min_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagD3d deadCopy IfFail: fb ).


  corner_min: t0  = (

       corner_min: t0 IfFail: 
        [|:e| ^error: 'corner_min: failed: ', e] ).

  corner_min: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_d3d_corner_min_Corner_min__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  dir = (

       dirIfFail: [|:e| ^error: 'dir failed: ', e] ).

  dirIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_d3d_dir_Dir_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptD3d deadCopy IfFail: fb ).


  dir_normal = (

       dir_normalIfFail: [|:e| ^error: 'dir_normal failed: ', e] ).

  dir_normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_rect_d3d_dir_normal_Dir_normal_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  dir_normal: t0  = (

       dir_normal: t0 IfFail: 
        [|:e| ^error: 'dir_normal: failed: ', e] ).

  dir_normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_rect_d3d_dir_normal_Dir_normal__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  dir_normalized = (

       dir_normalizedIfFail: 
        [|:e| ^error: 'dir_normalized failed: ', e] ).

  dir_normalizedIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_rect_d3d_dir_normalized_Dir_normalized_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  dir_normalized: t0  = (

       dir_normalized: t0 IfFail: 
        [|:e| ^error: 'dir_normalized: failed: ', e] ).

  dir_normalized: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_rect_d3d_dir_normalized_Dir_normalized__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Corner_max: t0 Corner_min: t1 Dir_normal: t2 
    Dir_normalized: t3  = (

       set_Corner_max: t0 Corner_min: t1 Dir_normal: t2 
        Dir_normalized: t3 IfFail: 
        [|:e| ^error: 'set_Corner_max:Corner_min:Dir_normal:Dir_normalized: failed: ', e] ).

  set_Corner_max: t0 Corner_min: t1 Dir_normal: t2 
    Dir_normalized: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_rect_d3d_set_Set_Corner_max_Corner_min_Dir_normal_Dir_normalized__glue' 
        ArgCoercions: 'ppp  ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw rectF2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_f2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl rectF2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_f2d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilRectF2d = (

       nilRectF2dIfFail: [|:e| ^error: 'nilRectF2d failed: ', e] ).

  nilRectF2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilRectF2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl rectF2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_f2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl rectF2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_f2d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  corner_max = (

       corner_maxIfFail: [|:e| ^error: 'corner_max failed: ', e] ).

  corner_maxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_f2d_corner_max_Corner_max_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF2d deadCopy IfFail: fb ).


  corner_max: t0  = (

       corner_max: t0 IfFail: 
        [|:e| ^error: 'corner_max: failed: ', e] ).

  corner_max: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_f2d_corner_max_Corner_max__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  corner_min = (

       corner_minIfFail: [|:e| ^error: 'corner_min failed: ', e] ).

  corner_minIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_f2d_corner_min_Corner_min_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagF2d deadCopy IfFail: fb ).


  corner_min: t0  = (

       corner_min: t0 IfFail: 
        [|:e| ^error: 'corner_min: failed: ', e] ).

  corner_min: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_f2d_corner_min_Corner_min__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw rectF3d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_f3d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl rectF3d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_f3d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilRectF3d = (

       nilRectF3dIfFail: [|:e| ^error: 'nilRectF3d failed: ', e] ).

  nilRectF3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilRectF3d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl rectF3d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_f3d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl rectF3d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_f3d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  corner_max = (

       corner_maxIfFail: [|:e| ^error: 'corner_max failed: ', e] ).

  corner_maxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_f3d_corner_max_Corner_max_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF2d deadCopy IfFail: fb ).


  corner_max: t0  = (

       corner_max: t0 IfFail: 
        [|:e| ^error: 'corner_max: failed: ', e] ).

  corner_max: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_f3d_corner_max_Corner_max__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  corner_min = (

       corner_minIfFail: [|:e| ^error: 'corner_min failed: ', e] ).

  corner_minIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_f3d_corner_min_Corner_min_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagF3d deadCopy IfFail: fb ).


  corner_min: t0  = (

       corner_min: t0 IfFail: 
        [|:e| ^error: 'corner_min: failed: ', e] ).

  corner_min: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_f3d_corner_min_Corner_min__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  dir = (

       dirIfFail: [|:e| ^error: 'dir failed: ', e] ).

  dirIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_f3d_dir_Dir_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptF3d deadCopy IfFail: fb ).


  dir_normal = (

       dir_normalIfFail: [|:e| ^error: 'dir_normal failed: ', e] ).

  dir_normalIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_rect_f3d_dir_normal_Dir_normal_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  dir_normal: t0  = (

       dir_normal: t0 IfFail: 
        [|:e| ^error: 'dir_normal: failed: ', e] ).

  dir_normal: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_rect_f3d_dir_normal_Dir_normal__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  dir_normalized = (

       dir_normalizedIfFail: 
        [|:e| ^error: 'dir_normalized failed: ', e] ).

  dir_normalizedIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_rect_f3d_dir_normalized_Dir_normalized_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  dir_normalized: t0  = (

       dir_normalized: t0 IfFail: 
        [|:e| ^error: 'dir_normalized: failed: ', e] ).

  dir_normalized: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_rect_f3d_dir_normalized_Dir_normalized__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Corner_max: t0 Corner_min: t1 Dir_normal: t2 
    Dir_normalized: t3  = (

       set_Corner_max: t0 Corner_min: t1 Dir_normal: t2 
        Dir_normalized: t3 IfFail: 
        [|:e| ^error: 'set_Corner_max:Corner_min:Dir_normal:Dir_normalized: failed: ', e] ).

  set_Corner_max: t0 Corner_min: t1 Dir_normal: t2 
    Dir_normalized: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_rect_f3d_set_Set_Corner_max_Corner_min_Dir_normal_Dir_normalized__glue' 
        ArgCoercions: 'ppp  ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 IfFail: fb .
    self).


	}
| )

traits xgl raw rectI2d _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_i2d_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl rectI2d deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_i2d_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilRectI2d = (

       nilRectI2dIfFail: [|:e| ^error: 'nilRectI2d failed: ', e] ).

  nilRectI2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilRectI2d_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl rectI2d deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_i2d_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl rectI2d deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_i2d_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  corner_max = (

       corner_maxIfFail: [|:e| ^error: 'corner_max failed: ', e] ).

  corner_maxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_i2d_corner_max_Corner_max_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptI2d deadCopy IfFail: fb ).


  corner_max: t0  = (

       corner_max: t0 IfFail: 
        [|:e| ^error: 'corner_max: failed: ', e] ).

  corner_max: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_i2d_corner_max_Corner_max__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  corner_min = (

       corner_minIfFail: [|:e| ^error: 'corner_min failed: ', e] ).

  corner_minIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_i2d_corner_min_Corner_min_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptFlagI2d deadCopy IfFail: fb ).


  corner_min: t0  = (

       corner_min: t0 IfFail: 
        [|:e| ^error: 'corner_min: failed: ', e] ).

  corner_min: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_i2d_corner_min_Corner_min__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw rectList _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_list_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl rectList deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_list_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilRectList = (

       nilRectListIfFail: [|:e| ^error: 'nilRectList failed: ', e] ).

  nilRectListIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilRectList_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl rectList deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_list_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl rectList deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_list_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  bbox = (

       bboxIfFail: [|:e| ^error: 'bbox failed: ', e] ).

  bboxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_rect_list_bbox_Bbox_glue' ArgCoercions: 'p ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl bbox deadCopy IfFail: fb ).


  bbox: t0  = (

       bbox: t0 IfFail: [|:e| ^error: 'bbox: failed: ', e] ).

  bbox: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_rect_list_bbox_Bbox__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_rects = (

       num_rectsIfFail: [|:e| ^error: 'num_rects failed: ', e] ).

  num_rectsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_rect_list_num_rects_Num_rects_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_rects: t0  = (

       num_rects: t0 IfFail: 
        [|:e| ^error: 'num_rects: failed: ', e] ).

  num_rects: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_rect_list_num_rects_Num_rects__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  rect_type = (

       rect_typeIfFail: [|:e| ^error: 'rect_type failed: ', e] ).

  rect_typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_rect_list_rect_type_Rect_type_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  rect_type: t0  = (

       rect_type: t0 IfFail: 
        [|:e| ^error: 'rect_type: failed: ', e] ).

  rect_type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_rect_list_rect_type_Rect_type__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  rects_ad3d = (

       rects_ad3dIfFail: [|:e| ^error: 'rects_ad3d failed: ', e] ).

  rects_ad3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_list_rects_ad3d_Rects_ad3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl rectAd3d deadCopy IfFail: fb ).


  rects_ad3d: t0  = (

       rects_ad3d: t0 IfFail: 
        [|:e| ^error: 'rects_ad3d: failed: ', e] ).

  rects_ad3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_list_rects_ad3d_Rects_ad3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  rects_af3d = (

       rects_af3dIfFail: [|:e| ^error: 'rects_af3d failed: ', e] ).

  rects_af3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_list_rects_af3d_Rects_af3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl rectAf3d deadCopy IfFail: fb ).


  rects_af3d: t0  = (

       rects_af3d: t0 IfFail: 
        [|:e| ^error: 'rects_af3d: failed: ', e] ).

  rects_af3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_list_rects_af3d_Rects_af3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  rects_d2d = (

       rects_d2dIfFail: [|:e| ^error: 'rects_d2d failed: ', e] ).

  rects_d2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_list_rects_d2d_Rects_d2d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl rectD2d deadCopy IfFail: fb ).


  rects_d2d: t0  = (

       rects_d2d: t0 IfFail: 
        [|:e| ^error: 'rects_d2d: failed: ', e] ).

  rects_d2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_list_rects_d2d_Rects_d2d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  rects_d3d = (

       rects_d3dIfFail: [|:e| ^error: 'rects_d3d failed: ', e] ).

  rects_d3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_list_rects_d3d_Rects_d3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl rectD3d deadCopy IfFail: fb ).


  rects_d3d: t0  = (

       rects_d3d: t0 IfFail: 
        [|:e| ^error: 'rects_d3d: failed: ', e] ).

  rects_d3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_list_rects_d3d_Rects_d3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  rects_f2d = (

       rects_f2dIfFail: [|:e| ^error: 'rects_f2d failed: ', e] ).

  rects_f2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_list_rects_f2d_Rects_f2d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl rectF2d deadCopy IfFail: fb ).


  rects_f2d: t0  = (

       rects_f2d: t0 IfFail: 
        [|:e| ^error: 'rects_f2d: failed: ', e] ).

  rects_f2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_list_rects_f2d_Rects_f2d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  rects_f3d = (

       rects_f3dIfFail: [|:e| ^error: 'rects_f3d failed: ', e] ).

  rects_f3dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_list_rects_f3d_Rects_f3d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl rectF3d deadCopy IfFail: fb ).


  rects_f3d: t0  = (

       rects_f3d: t0 IfFail: 
        [|:e| ^error: 'rects_f3d: failed: ', e] ).

  rects_f3d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_list_rects_f3d_Rects_f3d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  rects_i2d = (

       rects_i2dIfFail: [|:e| ^error: 'rects_i2d failed: ', e] ).

  rects_i2dIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_list_rects_i2d_Rects_i2d_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl rectI2d deadCopy IfFail: fb ).


  rects_i2d: t0  = (

       rects_i2d: t0 IfFail: 
        [|:e| ^error: 'rects_i2d: failed: ', e] ).

  rects_i2d: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_rect_list_rects_i2d_Rects_i2d__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_ad3d: t3  = (

       set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_ad3d: t3 
        IfFail: 
        [|:e| ^error: 'set_Bbox:Num_rects:Rect_type:Rects_ad3d: failed: ', e] ).

  set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_ad3d: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_rect_list_set_Set_Bbox_Num_rects_Rect_type_Rects_ad3d__glue' 
        ArgCoercions: 'ppi ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: 0 With: t3 
        IfFail: fb .
    self).


  set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_af3d: t3  = (

       set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_af3d: t3 
        IfFail: 
        [|:e| ^error: 'set_Bbox:Num_rects:Rect_type:Rects_af3d: failed: ', e] ).

  set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_af3d: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_rect_list_set_Set_Bbox_Num_rects_Rect_type_Rects_af3d__glue' 
        ArgCoercions: 'ppi ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: 0 With: t3 
        IfFail: fb .
    self).


  set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_d2d: t3  = (

       set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_d2d: t3 
        IfFail: 
        [|:e| ^error: 'set_Bbox:Num_rects:Rect_type:Rects_d2d: failed: ', e] ).

  set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_d2d: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_rect_list_set_Set_Bbox_Num_rects_Rect_type_Rects_d2d__glue' 
        ArgCoercions: 'ppi ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: 0 With: t3 
        IfFail: fb .
    self).


  set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_d3d: t3  = (

       set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_d3d: t3 
        IfFail: 
        [|:e| ^error: 'set_Bbox:Num_rects:Rect_type:Rects_d3d: failed: ', e] ).

  set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_d3d: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_rect_list_set_Set_Bbox_Num_rects_Rect_type_Rects_d3d__glue' 
        ArgCoercions: 'ppi ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: 0 With: t3 
        IfFail: fb .
    self).


  set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_f2d: t3  = (

       set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_f2d: t3 
        IfFail: 
        [|:e| ^error: 'set_Bbox:Num_rects:Rect_type:Rects_f2d: failed: ', e] ).

  set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_f2d: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_rect_list_set_Set_Bbox_Num_rects_Rect_type_Rects_f2d__glue' 
        ArgCoercions: 'ppi ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: 0 With: t3 
        IfFail: fb .
    self).


  set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_f3d: t3  = (

       set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_f3d: t3 
        IfFail: 
        [|:e| ^error: 'set_Bbox:Num_rects:Rect_type:Rects_f3d: failed: ', e] ).

  set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_f3d: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_rect_list_set_Set_Bbox_Num_rects_Rect_type_Rects_f3d__glue' 
        ArgCoercions: 'ppi ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: 0 With: t3 
        IfFail: fb .
    self).


  set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_i2d: t3  = (

       set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_i2d: t3 
        IfFail: 
        [|:e| ^error: 'set_Bbox:Num_rects:Rect_type:Rects_i2d: failed: ', e] ).

  set_Bbox: t0 Num_rects: t1 Rect_type: t2 Rects_i2d: t3 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_rect_list_set_Set_Bbox_Num_rects_Rect_type_Rects_i2d__glue' 
        ArgCoercions: 'ppi ip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: 0 With: t3 
        IfFail: fb .
    self).


	}
| )

traits xgl raw renderComponentDesc _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_render_component_desc_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl renderComponentDesc deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_render_component_desc_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilRenderComponentDesc = (

       nilRenderComponentDescIfFail: 
        [|:e| ^error: 'nilRenderComponentDesc failed: ', e] ).

  nilRenderComponentDescIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilRenderComponentDesc_glue' ArgCoercions: 
        ' ' ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl renderComponentDesc deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_render_component_desc_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl renderComponentDesc deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_render_component_desc_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  comp = (

       compIfFail: [|:e| ^error: 'comp failed: ', e] ).

  compIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_render_component_desc_comp_Comp_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  comp: t0  = (

       comp: t0 IfFail: [|:e| ^error: 'comp: failed: ', e] ).

  comp: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_render_component_desc_comp_Comp__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  op_blend_rgb = (

       op_blend_rgbIfFail: 
        [|:e| ^error: 'op_blend_rgb failed: ', e] ).

  op_blend_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_render_component_desc_op_blend_rgb_Op_blend_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl textureBlendRgb deadCopy IfFail: fb ).


  op_blend_rgb: t0  = (

       op_blend_rgb: t0 IfFail: 
        [|:e| ^error: 'op_blend_rgb: failed: ', e] ).

  op_blend_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_render_component_desc_op_blend_rgb_Op_blend_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  op_decal_rgb = (

       op_decal_rgbIfFail: 
        [|:e| ^error: 'op_decal_rgb failed: ', e] ).

  op_decal_rgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_render_component_desc_op_decal_rgb_Op_decal_rgb_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl textureDecalRgb deadCopy IfFail: fb ).


  op_decal_rgb: t0  = (

       op_decal_rgb: t0 IfFail: 
        [|:e| ^error: 'op_decal_rgb: failed: ', e] ).

  op_decal_rgb: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_render_component_desc_op_decal_rgb_Op_decal_rgb__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  texture_op = (

       texture_opIfFail: [|:e| ^error: 'texture_op failed: ', e] ).

  texture_opIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_render_component_desc_texture_op_Texture_op_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  texture_op: t0  = (

       texture_op: t0 IfFail: 
        [|:e| ^error: 'texture_op: failed: ', e] ).

  texture_op: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_render_component_desc_texture_op_Texture_op__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Comp: t0 Op_blend_rgb: t1 Texture_op: t2  = (

       set_Comp: t0 Op_blend_rgb: t1 Texture_op: t2 IfFail: 
        [|:e| ^error: 'set_Comp:Op_blend_rgb:Texture_op: failed: ', e] ).

  set_Comp: t0 Op_blend_rgb: t1 Texture_op: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_render_component_desc_set_Set_Comp_Op_blend_rgb_Texture_op__glue' 
        ArgCoercions: 'p ip i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 With: t2 With: 0 
        IfFail: fb .
    self).


  set_Comp: t0 Op_decal_rgb: t1 Texture_op: t2  = (

       set_Comp: t0 Op_decal_rgb: t1 Texture_op: t2 IfFail: 
        [|:e| ^error: 'set_Comp:Op_decal_rgb:Texture_op: failed: ', e] ).

  set_Comp: t0 Op_decal_rgb: t1 Texture_op: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_render_component_desc_set_Set_Comp_Op_decal_rgb_Texture_op__glue' 
        ArgCoercions: 'p ip i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 With: t2 With: 0 
        IfFail: fb .
    self).


	}
| )

traits xgl raw segment _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_segment_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl segment deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_segment_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilSegment = (

       nilSegmentIfFail: [|:e| ^error: 'nilSegment failed: ', e] ).

  nilSegmentIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilSegment_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl segment deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_segment_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl segment deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_segment_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  length = (

       lengthIfFail: [|:e| ^error: 'length failed: ', e] ).

  lengthIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_segment_length_Length_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  length: t0  = (

       length: t0 IfFail: [|:e| ^error: 'length: failed: ', e] ).

  length: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_segment_length_Length__glue' ArgCoercions: 
        'pi' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  offset = (

       offsetIfFail: [|:e| ^error: 'offset failed: ', e] ).

  offsetIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_segment_offset_Offset_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  offset: t0  = (

       offset: t0 IfFail: [|:e| ^error: 'offset: failed: ', e] ).

  offset: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_segment_offset_Offset__glue' ArgCoercions: 
        'pi' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw splineData _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_spline_data_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl splineData deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_spline_data_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilSplineData = (

       nilSplineDataIfFail: 
        [|:e| ^error: 'nilSplineData failed: ', e] ).

  nilSplineDataIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilSplineData_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl splineData deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_spline_data_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl splineData deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_spline_data_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  data = (

       dataIfFail: [|:e| ^error: 'data failed: ', e] ).

  dataIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_spline_data_data_Data_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  w = (

       wIfFail: [|:e| ^error: 'w failed: ', e] ).

  wIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_spline_data_w_W_glue' ArgCoercions: 'p' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  w: t0  = (

       w: t0 IfFail: [|:e| ^error: 'w: failed: ', e] ).

  w: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_spline_data_w_W__glue' ArgCoercions: 'pf' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw surfColorSpline _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_surf_color_spline_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl surfColorSpline deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_surf_color_spline_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilSurfColorSpline = (

       nilSurfColorSplineIfFail: 
        [|:e| ^error: 'nilSurfColorSpline failed: ', e] ).

  nilSurfColorSplineIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilSurfColorSpline_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl surfColorSpline deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_surf_color_spline_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl surfColorSpline deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_surf_color_spline_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  colors = (

       colorsIfFail: [|:e| ^error: 'colors failed: ', e] ).

  colorsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_surf_color_spline_colors_Colors_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorHomogeneous deadCopy IfFail: fb ).


  colors: t0  = (

       colors: t0 IfFail: [|:e| ^error: 'colors: failed: ', e] ).

  colors: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_surf_color_spline_colors_Colors__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  knot_vector_u = (

       knot_vector_uIfFail: 
        [|:e| ^error: 'knot_vector_u failed: ', e] ).

  knot_vector_uIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_color_spline_knot_vector_u_Knot_vector_u_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  knot_vector_u: t0  = (

       knot_vector_u: t0 IfFail: 
        [|:e| ^error: 'knot_vector_u: failed: ', e] ).

  knot_vector_u: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_color_spline_knot_vector_u_Knot_vector_u__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  knot_vector_v = (

       knot_vector_vIfFail: 
        [|:e| ^error: 'knot_vector_v failed: ', e] ).

  knot_vector_vIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_color_spline_knot_vector_v_Knot_vector_v_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  knot_vector_v: t0  = (

       knot_vector_v: t0 IfFail: 
        [|:e| ^error: 'knot_vector_v: failed: ', e] ).

  knot_vector_v: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_color_spline_knot_vector_v_Knot_vector_v__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_knots_u = (

       num_knots_uIfFail: [|:e| ^error: 'num_knots_u failed: ', e] ).

  num_knots_uIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_color_spline_num_knots_u_Num_knots_u_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_knots_u: t0  = (

       num_knots_u: t0 IfFail: 
        [|:e| ^error: 'num_knots_u: failed: ', e] ).

  num_knots_u: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_color_spline_num_knots_u_Num_knots_u__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_knots_v = (

       num_knots_vIfFail: [|:e| ^error: 'num_knots_v failed: ', e] ).

  num_knots_vIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_color_spline_num_knots_v_Num_knots_v_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_knots_v: t0  = (

       num_knots_v: t0 IfFail: 
        [|:e| ^error: 'num_knots_v: failed: ', e] ).

  num_knots_v: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_color_spline_num_knots_v_Num_knots_v__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  order_u = (

       order_uIfFail: [|:e| ^error: 'order_u failed: ', e] ).

  order_uIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_surf_color_spline_order_u_Order_u_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  order_u: t0  = (

       order_u: t0 IfFail: [|:e| ^error: 'order_u: failed: ', e] ).

  order_u: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_surf_color_spline_order_u_Order_u__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  order_v = (

       order_vIfFail: [|:e| ^error: 'order_v failed: ', e] ).

  order_vIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_surf_color_spline_order_v_Order_v_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  order_v: t0  = (

       order_v: t0 IfFail: [|:e| ^error: 'order_v: failed: ', e] ).

  order_v: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_surf_color_spline_order_v_Order_v__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Colors: t0 Knot_vector_u: t1 Knot_vector_v: t2 
    Num_knots_u: t3 Num_knots_v: t4 Order_u: t5 Order_v: t6  = (

       set_Colors: t0 Knot_vector_u: t1 Knot_vector_v: t2 
        Num_knots_u: t3 Num_knots_v: t4 Order_u: t5 
        Order_v: t6 IfFail: 
        [|:e| ^error: 'set_Colors:Knot_vector_u:Knot_vector_v:Num_knots_u:Num_knots_v:Order_u:Order_v: failed: ', e] ).

  set_Colors: t0 Knot_vector_u: t1 Knot_vector_v: t2 
    Num_knots_u: t3 Num_knots_v: t4 Order_u: t5 Order_v: t6 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_surf_color_spline_set_Set_Colors_Knot_vector_u_Knot_vector_v_Num_knots_u_Num_knots_v_Order_u_Order_v__glue' 
        ArgCoercions: 'pp i iiiii' ResultType: 'integer' 
        Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 With: t2 With: 0 With: 
        t3 With: t4 With: t5 With: t6 IfFail: fb .
    self).


	}
| )

traits xgl raw surfDataSpline _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_surf_data_spline_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl surfDataSpline deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_surf_data_spline_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilSurfDataSpline = (

       nilSurfDataSplineIfFail: 
        [|:e| ^error: 'nilSurfDataSpline failed: ', e] ).

  nilSurfDataSplineIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilSurfDataSpline_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl surfDataSpline deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_surf_data_spline_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl surfDataSpline deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_surf_data_spline_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  data = (

       dataIfFail: [|:e| ^error: 'data failed: ', e] ).

  dataIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_surf_data_spline_data_Data_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl splineData deadCopy IfFail: fb ).


  data: t0  = (

       data: t0 IfFail: [|:e| ^error: 'data: failed: ', e] ).

  data: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_surf_data_spline_data_Data__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  knot_vector_u = (

       knot_vector_uIfFail: 
        [|:e| ^error: 'knot_vector_u failed: ', e] ).

  knot_vector_uIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_data_spline_knot_vector_u_Knot_vector_u_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  knot_vector_u: t0  = (

       knot_vector_u: t0 IfFail: 
        [|:e| ^error: 'knot_vector_u: failed: ', e] ).

  knot_vector_u: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_data_spline_knot_vector_u_Knot_vector_u__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  knot_vector_v = (

       knot_vector_vIfFail: 
        [|:e| ^error: 'knot_vector_v failed: ', e] ).

  knot_vector_vIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_data_spline_knot_vector_v_Knot_vector_v_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  knot_vector_v: t0  = (

       knot_vector_v: t0 IfFail: 
        [|:e| ^error: 'knot_vector_v: failed: ', e] ).

  knot_vector_v: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_data_spline_knot_vector_v_Knot_vector_v__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_knots_u = (

       num_knots_uIfFail: [|:e| ^error: 'num_knots_u failed: ', e] ).

  num_knots_uIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_data_spline_num_knots_u_Num_knots_u_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_knots_u: t0  = (

       num_knots_u: t0 IfFail: 
        [|:e| ^error: 'num_knots_u: failed: ', e] ).

  num_knots_u: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_data_spline_num_knots_u_Num_knots_u__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_knots_v = (

       num_knots_vIfFail: [|:e| ^error: 'num_knots_v failed: ', e] ).

  num_knots_vIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_data_spline_num_knots_v_Num_knots_v_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_knots_v: t0  = (

       num_knots_v: t0 IfFail: 
        [|:e| ^error: 'num_knots_v: failed: ', e] ).

  num_knots_v: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_data_spline_num_knots_v_Num_knots_v__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  order_u = (

       order_uIfFail: [|:e| ^error: 'order_u failed: ', e] ).

  order_uIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_surf_data_spline_order_u_Order_u_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  order_u: t0  = (

       order_u: t0 IfFail: [|:e| ^error: 'order_u: failed: ', e] ).

  order_u: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_surf_data_spline_order_u_Order_u__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  order_v = (

       order_vIfFail: [|:e| ^error: 'order_v failed: ', e] ).

  order_vIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_surf_data_spline_order_v_Order_v_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  order_v: t0  = (

       order_v: t0 IfFail: [|:e| ^error: 'order_v: failed: ', e] ).

  order_v: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_surf_data_spline_order_v_Order_v__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Data: t0 Knot_vector_u: t1 Knot_vector_v: t2 
    Num_knots_u: t3 Num_knots_v: t4 Order_u: t5 Order_v: t6  = (

       set_Data: t0 Knot_vector_u: t1 Knot_vector_v: t2 
        Num_knots_u: t3 Num_knots_v: t4 Order_u: t5 
        Order_v: t6 IfFail: 
        [|:e| ^error: 'set_Data:Knot_vector_u:Knot_vector_v:Num_knots_u:Num_knots_v:Order_u:Order_v: failed: ', e] ).

  set_Data: t0 Knot_vector_u: t1 Knot_vector_v: t2 
    Num_knots_u: t3 Num_knots_v: t4 Order_u: t5 Order_v: t6 
    IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_surf_data_spline_set_Set_Data_Knot_vector_u_Knot_vector_v_Num_knots_u_Num_knots_v_Order_u_Order_v__glue' 
        ArgCoercions: 'pp i iiiii' ResultType: 'integer' 
        Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: 0 With: t2 With: 0 With: 
        t3 With: t4 With: t5 With: t6 IfFail: fb .
    self).


	}
| )

traits xgl raw surfDataSplineList _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_surf_data_spline_list_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl surfDataSplineList deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_surf_data_spline_list_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilSurfDataSplineList = (

       nilSurfDataSplineListIfFail: 
        [|:e| ^error: 'nilSurfDataSplineList failed: ', e] ).

  nilSurfDataSplineListIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilSurfDataSplineList_glue' ArgCoercions: 
        ' ' ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl surfDataSplineList deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_surf_data_spline_list_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl surfDataSplineList deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_surf_data_spline_list_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  data_splines = (

       data_splinesIfFail: 
        [|:e| ^error: 'data_splines failed: ', e] ).

  data_splinesIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_data_spline_list_data_splines_Data_splines_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl surfDataSpline deadCopy IfFail: fb ).


  data_splines: t0  = (

       data_splines: t0 IfFail: 
        [|:e| ^error: 'data_splines: failed: ', e] ).

  data_splines: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_data_spline_list_data_splines_Data_splines__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_data_splines = (

       num_data_splinesIfFail: 
        [|:e| ^error: 'num_data_splines failed: ', e] ).

  num_data_splinesIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_data_spline_list_num_data_splines_Num_data_splines_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_data_splines: t0  = (

       num_data_splines: t0 IfFail: 
        [|:e| ^error: 'num_data_splines: failed: ', e] ).

  num_data_splines: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_surf_data_spline_list_num_data_splines_Num_data_splines__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw textureBlendRgb _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_blend_rgb_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl textureBlendRgb deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_blend_rgb_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilTextureBlendRgb = (

       nilTextureBlendRgbIfFail: 
        [|:e| ^error: 'nilTextureBlendRgb failed: ', e] ).

  nilTextureBlendRgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilTextureBlendRgb_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl textureBlendRgb deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_blend_rgb_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl textureBlendRgb deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_blend_rgb_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  c1 = (

       c1IfFail: [|:e| ^error: 'c1 failed: ', e] ).

  c1IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_blend_rgb_c1_C1_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  c1: t0  = (

       c1: t0 IfFail: [|:e| ^error: 'c1: failed: ', e] ).

  c1: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_blend_rgb_c1_C1__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  c2 = (

       c2IfFail: [|:e| ^error: 'c2 failed: ', e] ).

  c2IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_blend_rgb_c2_C2_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  c2: t0  = (

       c2: t0 IfFail: [|:e| ^error: 'c2: failed: ', e] ).

  c2: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_blend_rgb_c2_C2__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw textureColorCompInfo _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_color_comp_info_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl textureColorCompInfo deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_color_comp_info_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilTextureColorCompInfo = (

       nilTextureColorCompInfoIfFail: 
        [|:e| ^error: 'nilTextureColorCompInfo failed: ', e] ).

  nilTextureColorCompInfoIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilTextureColorCompInfo_glue' ArgCoercions: 
        ' ' ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl textureColorCompInfo deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_color_comp_info_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl textureColorCompInfo deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_color_comp_info_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  num_render_comp_desc = (

       num_render_comp_descIfFail: 
        [|:e| ^error: 'num_render_comp_desc failed: ', e] ).

  num_render_comp_descIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_texture_color_comp_info_num_render_comp_desc_Num_render_comp_desc_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_render_comp_desc: t0  = (

       num_render_comp_desc: t0 IfFail: 
        [|:e| ^error: 'num_render_comp_desc: failed: ', e] ).

  num_render_comp_desc: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_texture_color_comp_info_num_render_comp_desc_Num_render_comp_desc__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  render_component_desc = (

       render_component_descIfFail: 
        [|:e| ^error: 'render_component_desc failed: ', e] ).

  render_component_descIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_texture_color_comp_info_render_component_desc_Render_component_desc_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl renderComponentDesc deadCopy IfFail: 
        fb ).


	}
| )

traits xgl raw textureDecalRgb _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_decal_rgb_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl textureDecalRgb deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_decal_rgb_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilTextureDecalRgb = (

       nilTextureDecalRgbIfFail: 
        [|:e| ^error: 'nilTextureDecalRgb failed: ', e] ).

  nilTextureDecalRgbIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilTextureDecalRgb_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl textureDecalRgb deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_decal_rgb_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl textureDecalRgb deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_decal_rgb_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  c = (

       cIfFail: [|:e| ^error: 'c failed: ', e] ).

  cIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_decal_rgb_c_C_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl colorRgb deadCopy IfFail: fb ).


  c: t0  = (

       c: t0 IfFail: [|:e| ^error: 'c: failed: ', e] ).

  c: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_decal_rgb_c_C__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw textureDesc _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_desc_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl textureDesc deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_desc_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilTextureDesc = (

       nilTextureDescIfFail: 
        [|:e| ^error: 'nilTextureDesc failed: ', e] ).

  nilTextureDescIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilTextureDesc_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl textureDesc deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_desc_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl textureDesc deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_desc_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  comp_info = (

       comp_infoIfFail: [|:e| ^error: 'comp_info failed: ', e] ).

  comp_infoIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_desc_comp_info_Comp_info_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl textureColorCompInfo deadCopy IfFail: 
        fb ).


  comp_info: t0  = (

       comp_info: t0 IfFail: 
        [|:e| ^error: 'comp_info: failed: ', e] ).

  comp_info: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_desc_comp_info_Comp_info__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  info_mipmap = (

       info_mipmapIfFail: [|:e| ^error: 'info_mipmap failed: ', e] ).

  info_mipmapIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_desc_info_mipmap_Info_mipmap_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl textureMipmapDesc deadCopy IfFail: fb ).


  info_mipmap: t0  = (

       info_mipmap: t0 IfFail: 
        [|:e| ^error: 'info_mipmap: failed: ', e] ).

  info_mipmap: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_desc_info_mipmap_Info_mipmap__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  interp_info = (

       interp_infoIfFail: [|:e| ^error: 'interp_info failed: ', e] ).

  interp_infoIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_desc_interp_info_Interp_info_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl textureInterpInfo deadCopy IfFail: fb ).


  interp_info: t0  = (

       interp_info: t0 IfFail: 
        [|:e| ^error: 'interp_info: failed: ', e] ).

  interp_info: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_desc_interp_info_Interp_info__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  texture_type = (

       texture_typeIfFail: 
        [|:e| ^error: 'texture_type failed: ', e] ).

  texture_typeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_texture_desc_texture_type_Texture_type_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  texture_type: t0  = (

       texture_type: t0 IfFail: 
        [|:e| ^error: 'texture_type: failed: ', e] ).

  texture_type: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_texture_desc_texture_type_Texture_type__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Comp_info: t0 Info_mipmap: t1 Interp_info: t2 
    Texture_type: t3  = (

       set_Comp_info: t0 Info_mipmap: t1 Interp_info: t2 
        Texture_type: t3 IfFail: 
        [|:e| ^error: 'set_Comp_info:Info_mipmap:Interp_info:Texture_type: failed: ', e] ).

  set_Comp_info: t0 Info_mipmap: t1 Interp_info: t2 
    Texture_type: t3 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_texture_desc_set_Set_Comp_info_Info_mipmap_Interp_info_Texture_type__glue' 
        ArgCoercions: 'pppp i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: 0 
        IfFail: fb .
    self).


	}
| )

traits xgl raw textureInterpInfo _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_interp_info_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl textureInterpInfo deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_interp_info_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilTextureInterpInfo = (

       nilTextureInterpInfoIfFail: 
        [|:e| ^error: 'nilTextureInterpInfo failed: ', e] ).

  nilTextureInterpInfoIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilTextureInterpInfo_glue' ArgCoercions: 
        ' ' ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl textureInterpInfo deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_interp_info_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl textureInterpInfo deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_interp_info_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  filter1 = (

       filter1IfFail: [|:e| ^error: 'filter1 failed: ', e] ).

  filter1IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_texture_interp_info_filter1_Filter1_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  filter1: t0  = (

       filter1: t0 IfFail: [|:e| ^error: 'filter1: failed: ', e] ).

  filter1: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_texture_interp_info_filter1_Filter1__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  filter2 = (

       filter2IfFail: [|:e| ^error: 'filter2 failed: ', e] ).

  filter2IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_texture_interp_info_filter2_Filter2_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  filter2: t0  = (

       filter2: t0 IfFail: [|:e| ^error: 'filter2: failed: ', e] ).

  filter2: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_texture_interp_info_filter2_Filter2__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Filter1: t0 Filter2: t1  = (

       set_Filter1: t0 Filter2: t1 IfFail: 
        [|:e| ^error: 'set_Filter1:Filter2: failed: ', e] ).

  set_Filter1: t0 Filter2: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_texture_interp_info_set_Set_Filter1_Filter2__glue' 
        ArgCoercions: 'p i i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 With: t1 With: 0 IfFail: fb .
    self).


	}
| )

traits xgl raw textureMipmapDesc _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_mipmap_desc_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl textureMipmapDesc deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_mipmap_desc_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilTextureMipmapDesc = (

       nilTextureMipmapDescIfFail: 
        [|:e| ^error: 'nilTextureMipmapDesc failed: ', e] ).

  nilTextureMipmapDescIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilTextureMipmapDesc_glue' ArgCoercions: 
        ' ' ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl textureMipmapDesc deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_mipmap_desc_at_At__glue' 
        ArgCoercions: 'pi ' ResultType: 'arg3' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl textureMipmapDesc deadCopy 
        IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_texture_mipmap_desc_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  boundary_values = (

       boundary_valuesIfFail: 
        [|:e| ^error: 'boundary_values failed: ', e] ).

  boundary_valuesIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_texture_mipmap_desc_boundary_values_Boundary_values_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl unsignedCharVecProxy deadCopy IfFail: 
        fb ).


  depth_interp_factor = (

       depth_interp_factorIfFail: 
        [|:e| ^error: 'depth_interp_factor failed: ', e] ).

  depth_interp_factorIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_texture_mipmap_desc_depth_interp_factor_Depth_interp_factor_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  depth_interp_factor: t0  = (

       depth_interp_factor: t0 IfFail: 
        [|:e| ^error: 'depth_interp_factor: failed: ', e] ).

  depth_interp_factor: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_texture_mipmap_desc_depth_interp_factor_Depth_interp_factor__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  max_u_freq = (

       max_u_freqIfFail: [|:e| ^error: 'max_u_freq failed: ', e] ).

  max_u_freqIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_texture_mipmap_desc_max_u_freq_Max_u_freq_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  max_u_freq: t0  = (

       max_u_freq: t0 IfFail: 
        [|:e| ^error: 'max_u_freq: failed: ', e] ).

  max_u_freq: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_texture_mipmap_desc_max_u_freq_Max_u_freq__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  max_v_freq = (

       max_v_freqIfFail: [|:e| ^error: 'max_v_freq failed: ', e] ).

  max_v_freqIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_texture_mipmap_desc_max_v_freq_Max_v_freq_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  max_v_freq: t0  = (

       max_v_freq: t0 IfFail: 
        [|:e| ^error: 'max_v_freq: failed: ', e] ).

  max_v_freq: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_texture_mipmap_desc_max_v_freq_Max_v_freq__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  texture_map = (

       texture_mapIfFail: [|:e| ^error: 'texture_map failed: ', e] ).

  texture_mapIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_texture_mipmap_desc_texture_map_Texture_map_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl genericObject deadCopy IfFail: fb ).


  texture_map: t0  = (

       texture_map: t0 IfFail: 
        [|:e| ^error: 'texture_map: failed: ', e] ).

  texture_map: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_texture_mipmap_desc_texture_map_Texture_map__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  u_boundary = (

       u_boundaryIfFail: [|:e| ^error: 'u_boundary failed: ', e] ).

  u_boundaryIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_texture_mipmap_desc_u_boundary_U_boundary_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  u_boundary: t0  = (

       u_boundary: t0 IfFail: 
        [|:e| ^error: 'u_boundary: failed: ', e] ).

  u_boundary: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_texture_mipmap_desc_u_boundary_U_boundary__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  v_boundary = (

       v_boundaryIfFail: [|:e| ^error: 'v_boundary failed: ', e] ).

  v_boundaryIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_texture_mipmap_desc_v_boundary_V_boundary_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  v_boundary: t0  = (

       v_boundary: t0 IfFail: 
        [|:e| ^error: 'v_boundary: failed: ', e] ).

  v_boundary: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_texture_mipmap_desc_v_boundary_V_boundary__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Depth_interp_factor: t0 Max_u_freq: t1 Max_v_freq: t2 
    Texture_map: t3 U_boundary: t4 V_boundary: t5  = (

       set_Depth_interp_factor: t0 Max_u_freq: t1 Max_v_freq: t2 
        Texture_map: t3 U_boundary: t4 V_boundary: t5 
        IfFail: 
        [|:e| ^error: 'set_Depth_interp_factor:Max_u_freq:Max_v_freq:Texture_map:U_boundary:V_boundary: failed: ', e] ).

  set_Depth_interp_factor: t0 Max_u_freq: t1 Max_v_freq: t2 
    Texture_map: t3 U_boundary: t4 V_boundary: t5 IfFail: 
    fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_texture_mipmap_desc_set_Set_Depth_interp_factor_Max_u_freq_Max_v_freq_Texture_map_U_boundary_V_boundary__glue' 
        ArgCoercions: 'pfffp i i' ResultType: 'integer' 
        Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 With: t3 With: t4 
        With: 0 With: t5 With: 0 IfFail: fb .
    self).


	}
| )

traits xgl raw threshold _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_threshold_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl threshold deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_threshold_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilThreshold = (

       nilThresholdIfFail: 
        [|:e| ^error: 'nilThreshold failed: ', e] ).

  nilThresholdIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilThreshold_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl threshold deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_threshold_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl threshold deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_threshold_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  circles = (

       circlesIfFail: [|:e| ^error: 'circles failed: ', e] ).

  circlesIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_threshold_circles_Circles_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  circles: t0  = (

       circles: t0 IfFail: [|:e| ^error: 'circles: failed: ', e] ).

  circles: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_threshold_circles_Circles__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  polygons = (

       polygonsIfFail: [|:e| ^error: 'polygons failed: ', e] ).

  polygonsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_threshold_polygons_Polygons_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  polygons: t0  = (

       polygons: t0 IfFail: [|:e| ^error: 'polygons: failed: ', e] ).

  polygons: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_threshold_polygons_Polygons__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  vectors = (

       vectorsIfFail: [|:e| ^error: 'vectors failed: ', e] ).

  vectorsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_threshold_vectors_Vectors_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  vectors: t0  = (

       vectors: t0 IfFail: [|:e| ^error: 'vectors: failed: ', e] ).

  vectors: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_threshold_vectors_Vectors__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


" efficiency message: set a bunch of fields at once  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  set_Circles: t0 Polygons: t1 Vectors: t2  = (

       set_Circles: t0 Polygons: t1 Vectors: t2 IfFail: 
        [|:e| ^error: 'set_Circles:Polygons:Vectors: failed: ', e] ).

  set_Circles: t0 Polygons: t1 Vectors: t2 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'xgl_threshold_set_Set_Circles_Polygons_Vectors__glue' 
        ArgCoercions: 'piii' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 With: t2 IfFail: fb .
    self).


	}
| )

traits xgl raw trimCurve _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_trim_curve_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl trimCurve deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_trim_curve_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilTrimCurve = (

       nilTrimCurveIfFail: 
        [|:e| ^error: 'nilTrimCurve failed: ', e] ).

  nilTrimCurveIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilTrimCurve_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl trimCurve deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_trim_curve_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl trimCurve deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_trim_curve_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  ctrl_pts = (

       ctrl_ptsIfFail: [|:e| ^error: 'ctrl_pts failed: ', e] ).

  ctrl_ptsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_trim_curve_ctrl_pts_Ctrl_pts_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl ptList deadCopy IfFail: fb ).


  ctrl_pts: t0  = (

       ctrl_pts: t0 IfFail: [|:e| ^error: 'ctrl_pts: failed: ', e] ).

  ctrl_pts: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_trim_curve_ctrl_pts_Ctrl_pts__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  knot_vector = (

       knot_vectorIfFail: [|:e| ^error: 'knot_vector failed: ', e] ).

  knot_vectorIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_trim_curve_knot_vector_Knot_vector_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl floatVecProxy deadCopy IfFail: fb ).


  knot_vector: t0  = (

       knot_vector: t0 IfFail: 
        [|:e| ^error: 'knot_vector: failed: ', e] ).

  knot_vector: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_trim_curve_knot_vector_Knot_vector__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_knots = (

       num_knotsIfFail: [|:e| ^error: 'num_knots failed: ', e] ).

  num_knotsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_trim_curve_num_knots_Num_knots_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_knots: t0  = (

       num_knots: t0 IfFail: 
        [|:e| ^error: 'num_knots: failed: ', e] ).

  num_knots: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_trim_curve_num_knots_Num_knots__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  order = (

       orderIfFail: [|:e| ^error: 'order failed: ', e] ).

  orderIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_trim_curve_order_Order_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  order: t0  = (

       order: t0 IfFail: [|:e| ^error: 'order: failed: ', e] ).

  order: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_trim_curve_order_Order__glue' ArgCoercions: 
        'pi' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  range = (

       rangeIfFail: [|:e| ^error: 'range failed: ', e] ).

  rangeIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_trim_curve_range_Range_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl boundsF1d deadCopy IfFail: fb ).


  range: t0  = (

       range: t0 IfFail: [|:e| ^error: 'range: failed: ', e] ).

  range: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_trim_curve_range_Range__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  trim_curve_approx = (

       trim_curve_approxIfFail: 
        [|:e| ^error: 'trim_curve_approx failed: ', e] ).

  trim_curve_approxIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_trim_curve_trim_curve_approx_Trim_curve_approx_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  trim_curve_approx: t0  = (

       trim_curve_approx: t0 IfFail: 
        [|:e| ^error: 'trim_curve_approx: failed: ', e] ).

  trim_curve_approx: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_trim_curve_trim_curve_approx_Trim_curve_approx__glue' 
        ArgCoercions: 'p i' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: 0 IfFail: fb .
    self).


  trim_curve_approx_value = (

       trim_curve_approx_valueIfFail: 
        [|:e| ^error: 'trim_curve_approx_value failed: ', e] ).

  trim_curve_approx_valueIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_trim_curve_trim_curve_approx_value_Trim_curve_approx_value_glue' 
        ArgCoercions: 'p' ResultType: 'float' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  trim_curve_approx_value: t0  = (

       trim_curve_approx_value: t0 IfFail: 
        [|:e| ^error: 'trim_curve_approx_value: failed: ', e] ).

  trim_curve_approx_value: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_trim_curve_trim_curve_approx_value_Trim_curve_approx_value__glue' 
        ArgCoercions: 'pf' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  trim_curve_vis = (

       trim_curve_visIfFail: 
        [|:e| ^error: 'trim_curve_vis failed: ', e] ).

  trim_curve_visIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_trim_curve_trim_curve_vis_Trim_curve_vis_glue' 
        ArgCoercions: 'p' ResultType: 'boolean' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  trim_curve_vis: t0  = (

       trim_curve_vis: t0 IfFail: 
        [|:e| ^error: 'trim_curve_vis: failed: ', e] ).

  trim_curve_vis: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 
        'Xgl_trim_curve_trim_curve_vis_Trim_curve_vis__glue' 
        ArgCoercions: 'p ' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw trimLoop _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_trim_loop_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl trimLoop deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_trim_loop_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilTrimLoop = (

       nilTrimLoopIfFail: [|:e| ^error: 'nilTrimLoop failed: ', e] ).

  nilTrimLoopIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilTrimLoop_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl trimLoop deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_trim_loop_at_At__glue' ArgCoercions: 'pi ' 
        ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl trimLoop deadCopy IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_trim_loop_at_put_At_Put__glue' ArgCoercions: 
        'pip' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  curves = (

       curvesIfFail: [|:e| ^error: 'curves failed: ', e] ).

  curvesIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_trim_loop_curves_Curves_glue' ArgCoercions: 
        'p ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: xgl trimCurve deadCopy IfFail: fb ).


  curves: t0  = (

       curves: t0 IfFail: [|:e| ^error: 'curves: failed: ', e] ).

  curves: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_trim_loop_curves_Curves__glue' ArgCoercions: 
        'pp' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  num_curves = (

       num_curvesIfFail: [|:e| ^error: 'num_curves failed: ', e] ).

  num_curvesIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_trim_loop_num_curves_Num_curves_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_curves: t0  = (

       num_curves: t0 IfFail: 
        [|:e| ^error: 'num_curves: failed: ', e] ).

  num_curves: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_trim_loop_num_curves_Num_curves__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw trimLoopList _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation and deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_trim_loop_list_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl trimLoopList deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_trim_loop_list_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" create nil proxy  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  nilTrimLoopList = (

       nilTrimLoopListIfFail: 
        [|:e| ^error: 'nilTrimLoopList failed: ', e] ).

  nilTrimLoopListIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'NULL_NilTrimLoopList_glue' ArgCoercions: ' ' 
        ResultType: 'arg1' Path: 'xgl_glue.so' .

    |

      myFctObj call: xgl trimLoopList deadCopy IfFail: fb ).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_trim_loop_list_at_At__glue' ArgCoercions: 
        'pi ' ResultType: 'arg3' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: xgl trimLoopList deadCopy IfFail: 
        fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'xgl_trim_loop_list_at_put_At_Put__glue' 
        ArgCoercions: 'pip' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


" accessor messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  num_loops = (

       num_loopsIfFail: [|:e| ^error: 'num_loops failed: ', e] ).

  num_loopsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_trim_loop_list_num_loops_Num_loops_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb ).


  num_loops: t0  = (

       num_loops: t0 IfFail: 
        [|:e| ^error: 'num_loops: failed: ', e] ).

  num_loops: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_trim_loop_list_num_loops_Num_loops__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


  trim_loops = (

       trim_loopsIfFail: [|:e| ^error: 'trim_loops failed: ', e] ).

  trim_loopsIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_trim_loop_list_trim_loops_Trim_loops_glue' 
        ArgCoercions: 'p ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: xgl trimLoop deadCopy IfFail: fb ).


  trim_loops: t0  = (

       trim_loops: t0 IfFail: 
        [|:e| ^error: 'trim_loops: failed: ', e] ).

  trim_loops: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'Xgl_trim_loop_list_trim_loops_Trim_loops__glue' 
        ArgCoercions: 'pp' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb .
    self).


	}
| )

traits xgl raw intVecProxy _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation/deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'int_vec_proxy_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl intVecProxy deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'int_vec_proxy_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'int_vec_proxy_at_At__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'int_vec_proxy_at_put_At_Put__glue' ArgCoercions: 
        'pii' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


	}
| )

traits xgl raw longVecProxy _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation/deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'long_vec_proxy_new_New__glue' ArgCoercions: 'i ' 
        ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl longVecProxy deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'long_vec_proxy_delete_Delete_glue' ArgCoercions: 
        'p' ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'long_vec_proxy_at_At__glue' ArgCoercions: 'pi' 
        ResultType: 'integer' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'long_vec_proxy_at_put_At_Put__glue' 
        ArgCoercions: 'pii' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


	}
| )

traits xgl raw floatVecProxy _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation/deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'float_vec_proxy_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl floatVecProxy deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'float_vec_proxy_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'float_vec_proxy_at_At__glue' ArgCoercions: 'pi' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'float_vec_proxy_at_put_At_Put__glue' 
        ArgCoercions: 'pif' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


	}
| )

traits xgl raw doubleVecProxy _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation/deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'double_vec_proxy_new_New__glue' ArgCoercions: 
        'i ' ResultType: 'arg2' Path: 'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl doubleVecProxy deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'double_vec_proxy_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'double_vec_proxy_at_At__glue' ArgCoercions: 'pi' 
        ResultType: 'float' Path: 'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'double_vec_proxy_at_put_At_Put__glue' 
        ArgCoercions: 'pif' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


	}
| )

traits xgl raw unsignedCharVecProxy _AddSlots: ( |

{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot'

" creation/deletion messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  new: t0  = (

       new: t0 IfFail: [|:e| ^error: 'new: failed: ', e] ).

  new: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'unsigned_char_vec_proxy_new_New__glue' 
        ArgCoercions: 'i ' ResultType: 'arg2' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: t0 With: xgl unsignedCharVecProxy deadCopy IfFail: fb ).


  delete = (

       deleteIfFail: [|:e| ^error: 'delete failed: ', e] ).

  deleteIfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'unsigned_char_vec_proxy_delete_Delete_glue' 
        ArgCoercions: 'p' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self IfFail: fb .
    self).


" vector-ish messages  "

	}
{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

  at: t0  = (

       at: t0 IfFail: [|:e| ^error: 'at: failed: ', e] ).

  at: t0 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'unsigned_char_vec_proxy_at_At__glue' 
        ArgCoercions: 'pi' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 IfFail: fb ).


  at: t0 Put: t1  = (

       at: t0 Put: t1 IfFail: [|:e| ^error: 'at:Put: failed: ', e] ).

  at: t0 Put: t1 IfFail: fb = (
    |

      myFctObj =
      foreignFct copyName: 'unsigned_char_vec_proxy_at_put_At_Put__glue' 
        ArgCoercions: 'pii' ResultType: 'integer' Path: 
        'xgl_glue.so' .

    |

      myFctObj call: self With: t0 With: t1 IfFail: fb .
    self).


	}
| )

modules _AddSlots: ( |
	{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

		xgl_wrappers = ()
	}
| )

modules xgl_wrappers _AddSlots: (
	bootstrap remove: 'comment' From:
	bootstrap remove: 'directory' From:
	bootstrap remove: 'fileInTimeString' From:
	bootstrap remove: 'postFileIn' From:
	bootstrap remove: 'revision' From:
	bootstrap remove: 'subpartNames' From:
	globals modules init copy) _AddSlots: ( |
	{} = 'Comment: This information was generated by the primitive maker (primitiveMaker.self).
Please do not change it manually. -- dmu 12/91 \x7fModuleInfo: 
CopyDowns:
globals modules init. copy 
SlotsToOmit: comment directory fileInTimeString myComment postFileIn revision subpartNames.

\x7fIsComplete: '.

	{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: InitializeToExpression: (_CurrentTimeString)\x7fVisibility: public'

		fileInTimeString <- _CurrentTimeString.
	}
	{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: private'

		myComment <- '
		This information was generated by the primitive maker (primitiveMaker.self).
Please do not change it manually. -- dmu 12/91 .'.
	}
	{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

		directory <- 'glue'.
	}
	{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

		revision <- 'No revision; generated file'.
	}
	{ 'Category: generated by primitiveMaker\x7fModuleInfo: Module: xgl_wrappers InitialContents: FollowSlot\x7fVisibility: public'

		subpartNames <- ''.
	}
| )


