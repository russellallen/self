// This file was generated from the xgl header file and contains
// C++ wrapper functions around xgl structure accesses from Self.
// Do NOT edit this file by hand!

// Copyright 1992-2012 AUTHORS.
// See the LICENSE file for license information.

#include <_glueDefs.c.incl> // for glue preprocessor macros
#include <X11/Xlib.h>             // for Window and Display definitions
#include <xgl/xgl.h>              // duh
#include "xgl.primMaker.h"        // definitions generated by primitiveMaker

VERIFYCHECKSUM

#define WHAT_GLUE C_DECLS
   // xgl_entries (apparently this prints the C comments in your templates)
#undef WHAT_GLUE

// apparently the C_DECLS preprocessor macro is supposed to do this
extern char * Display_seal;
char * Window_seal = "Window_seal";  // this seal will not actually match 
                                     // Window_seal defined in xlib


// these are simple here to make it easier to template these things 
// - should match those in <xgl/xgl.h>
typedef void Xgl_object_obj;
typedef Xgl_object_obj Xgl_sys_state_obj;

// these are the seals for the previous types - names must match
char* Xgl_object_seal = "Xgl_object_seal";
char* Xgl_object_obj_seal = "Xgl_object_obj_seal";
char* Xgl_sys_state_obj_seal = "Xgl_sys_state_obj_seal";


// these are convenience typedefs so we can have c-style vectors
// - they are not as powerful as byteVectors, but they remove one 
// layer of extra copying
typedef int Int_vec_proxy;
typedef long Long_vec_proxy;
typedef float Float_vec_proxy;
typedef double Double_vec_proxy;
typedef unsigned char Unsigned_char_vec_proxy;

// These are seals for the previous types - names must match
char* Int_vec_proxy_seal = "Int_vec_proxy_seal";
char* Long_vec_proxy_seal = "Long_vec_proxy_seal";
char* Float_vec_proxy_seal = "Float_vec_proxy_seal";
char* Double_vec_proxy_seal = "Double_vec_proxy_seal";
char* Unsigned_char_vec_proxy_seal = "Unsigned_char_vec_proxy_seal";


// this is a hack, but I do not know what stream info xgl is expecting here
char * Xgl_stream_info_seal = "Xgl_stream_info_seal";

// These are seals for the Xgl types that will become proxies.
char* Xgl_X_window_seal = "Xgl_X_window_seal";
char* Xgl_arc_ad3d_seal = "Xgl_arc_ad3d_seal";
char* Xgl_arc_af3d_seal = "Xgl_arc_af3d_seal";
char* Xgl_arc_d2d_seal = "Xgl_arc_d2d_seal";
char* Xgl_arc_d3d_seal = "Xgl_arc_d3d_seal";
char* Xgl_arc_f2d_seal = "Xgl_arc_f2d_seal";
char* Xgl_arc_f3d_seal = "Xgl_arc_f3d_seal";
char* Xgl_arc_i2d_seal = "Xgl_arc_i2d_seal";
char* Xgl_arc_list_seal = "Xgl_arc_list_seal";
char* Xgl_bbox_seal = "Xgl_bbox_seal";
char* Xgl_bbox_d2d_seal = "Xgl_bbox_d2d_seal";
char* Xgl_bbox_d3d_seal = "Xgl_bbox_d3d_seal";
char* Xgl_bbox_f2d_seal = "Xgl_bbox_f2d_seal";
char* Xgl_bbox_f3d_seal = "Xgl_bbox_f3d_seal";
char* Xgl_bbox_i2d_seal = "Xgl_bbox_i2d_seal";
char* Xgl_bbox_status_seal = "Xgl_bbox_status_seal";
char* Xgl_bounds_d1d_seal = "Xgl_bounds_d1d_seal";
char* Xgl_bounds_d2d_seal = "Xgl_bounds_d2d_seal";
char* Xgl_bounds_d3d_seal = "Xgl_bounds_d3d_seal";
char* Xgl_bounds_f1d_seal = "Xgl_bounds_f1d_seal";
char* Xgl_bounds_f2d_seal = "Xgl_bounds_f2d_seal";
char* Xgl_bounds_f3d_seal = "Xgl_bounds_f3d_seal";
char* Xgl_bounds_i2d_seal = "Xgl_bounds_i2d_seal";
char* Xgl_circle_ad3d_seal = "Xgl_circle_ad3d_seal";
char* Xgl_circle_af3d_seal = "Xgl_circle_af3d_seal";
char* Xgl_circle_d2d_seal = "Xgl_circle_d2d_seal";
char* Xgl_circle_d3d_seal = "Xgl_circle_d3d_seal";
char* Xgl_circle_f2d_seal = "Xgl_circle_f2d_seal";
char* Xgl_circle_f3d_seal = "Xgl_circle_f3d_seal";
char* Xgl_circle_i2d_seal = "Xgl_circle_i2d_seal";
char* Xgl_circle_list_seal = "Xgl_circle_list_seal";
char* Xgl_color_seal = "Xgl_color_seal";
char* Xgl_color_facet_seal = "Xgl_color_facet_seal";
char* Xgl_color_homogeneous_seal = "Xgl_color_homogeneous_seal";
char* Xgl_color_list_seal = "Xgl_color_list_seal";
char* Xgl_color_normal_facet_seal = "Xgl_color_normal_facet_seal";
char* Xgl_color_rgb_seal = "Xgl_color_rgb_seal";
char* Xgl_color_rgbw_seal = "Xgl_color_rgbw_seal";
char* Xgl_color_type_supported_seal = "Xgl_color_type_supported_seal";
char* Xgl_curve_color_spline_seal = "Xgl_curve_color_spline_seal";
char* Xgl_ell_ad3d_seal = "Xgl_ell_ad3d_seal";
char* Xgl_ell_af3d_seal = "Xgl_ell_af3d_seal";
char* Xgl_ell_d3d_seal = "Xgl_ell_d3d_seal";
char* Xgl_ell_f3d_seal = "Xgl_ell_f3d_seal";
char* Xgl_ell_list_seal = "Xgl_ell_list_seal";
char* Xgl_error_info_seal = "Xgl_error_info_seal";
char* Xgl_facet_seal = "Xgl_facet_seal";
char* Xgl_facet_list_seal = "Xgl_facet_list_seal";
char* Xgl_facet_list_list_seal = "Xgl_facet_list_list_seal";
char* Xgl_inquire_seal = "Xgl_inquire_seal";
char* Xgl_irect_seal = "Xgl_irect_seal";
char* Xgl_irect_list_seal = "Xgl_irect_list_seal";
char* Xgl_matrix_d2d_seal = "Xgl_matrix_d2d_seal";
char* Xgl_matrix_d3d_seal = "Xgl_matrix_d3d_seal";
char* Xgl_matrix_f2d_seal = "Xgl_matrix_f2d_seal";
char* Xgl_matrix_f3d_seal = "Xgl_matrix_f3d_seal";
char* Xgl_matrix_i2d_seal = "Xgl_matrix_i2d_seal";
char* Xgl_mono_text_seal = "Xgl_mono_text_seal";
char* Xgl_mono_text_list_seal = "Xgl_mono_text_list_seal";
char* Xgl_normal_facet_seal = "Xgl_normal_facet_seal";
char* Xgl_nu_bspline_curve_seal = "Xgl_nu_bspline_curve_seal";
char* Xgl_nurbs_curve_seal = "Xgl_nurbs_curve_seal";
char* Xgl_nurbs_surf_seal = "Xgl_nurbs_surf_seal";
char* Xgl_nurbs_surf_simple_geom_seal = "Xgl_nurbs_surf_simple_geom_seal";
char* Xgl_obj_desc_seal = "Xgl_obj_desc_seal";
char* Xgl_pick_info_seal = "Xgl_pick_info_seal";
char* Xgl_plane_seal = "Xgl_plane_seal";
char* Xgl_plane_list_seal = "Xgl_plane_list_seal";
char* Xgl_pt_seal = "Xgl_pt_seal";
char* Xgl_pt_color_d2d_seal = "Xgl_pt_color_d2d_seal";
char* Xgl_pt_color_d3d_seal = "Xgl_pt_color_d3d_seal";
char* Xgl_pt_color_data_f3d_seal = "Xgl_pt_color_data_f3d_seal";
char* Xgl_pt_color_f2d_seal = "Xgl_pt_color_f2d_seal";
char* Xgl_pt_color_f3d_seal = "Xgl_pt_color_f3d_seal";
char* Xgl_pt_color_flag_d3d_seal = "Xgl_pt_color_flag_d3d_seal";
char* Xgl_pt_color_flag_data_f3d_seal = "Xgl_pt_color_flag_data_f3d_seal";
char* Xgl_pt_color_flag_f3d_seal = "Xgl_pt_color_flag_f3d_seal";
char* Xgl_pt_color_i2d_seal = "Xgl_pt_color_i2d_seal";
char* Xgl_pt_color_normal_d3d_seal = "Xgl_pt_color_normal_d3d_seal";
char* Xgl_pt_color_normal_data_f3d_seal = "Xgl_pt_color_normal_data_f3d_seal";
char* Xgl_pt_color_normal_f3d_seal = "Xgl_pt_color_normal_f3d_seal";
char* Xgl_pt_color_normal_flag_d3d_seal = "Xgl_pt_color_normal_flag_d3d_seal";
char* Xgl_pt_color_normal_flag_data_f3d_seal = "Xgl_pt_color_normal_flag_data_f3d_seal";
char* Xgl_pt_color_normal_flag_f3d_seal = "Xgl_pt_color_normal_flag_f3d_seal";
char* Xgl_pt_d2d_seal = "Xgl_pt_d2d_seal";
char* Xgl_pt_d2h_seal = "Xgl_pt_d2h_seal";
char* Xgl_pt_d3d_seal = "Xgl_pt_d3d_seal";
char* Xgl_pt_d3h_seal = "Xgl_pt_d3h_seal";
char* Xgl_pt_data_f3d_seal = "Xgl_pt_data_f3d_seal";
char* Xgl_pt_f2d_seal = "Xgl_pt_f2d_seal";
char* Xgl_pt_f2h_seal = "Xgl_pt_f2h_seal";
char* Xgl_pt_f3d_seal = "Xgl_pt_f3d_seal";
char* Xgl_pt_f3h_seal = "Xgl_pt_f3h_seal";
char* Xgl_pt_flag_d2d_seal = "Xgl_pt_flag_d2d_seal";
char* Xgl_pt_flag_d3d_seal = "Xgl_pt_flag_d3d_seal";
char* Xgl_pt_flag_data_f3d_seal = "Xgl_pt_flag_data_f3d_seal";
char* Xgl_pt_flag_f2d_seal = "Xgl_pt_flag_f2d_seal";
char* Xgl_pt_flag_f3d_seal = "Xgl_pt_flag_f3d_seal";
char* Xgl_pt_flag_i2d_seal = "Xgl_pt_flag_i2d_seal";
char* Xgl_pt_i2d_seal = "Xgl_pt_i2d_seal";
char* Xgl_pt_i2h_seal = "Xgl_pt_i2h_seal";
char* Xgl_pt_list_seal = "Xgl_pt_list_seal";
char* Xgl_pt_list_list_seal = "Xgl_pt_list_list_seal";
char* Xgl_pt_normal_d3d_seal = "Xgl_pt_normal_d3d_seal";
char* Xgl_pt_normal_data_f3d_seal = "Xgl_pt_normal_data_f3d_seal";
char* Xgl_pt_normal_f3d_seal = "Xgl_pt_normal_f3d_seal";
char* Xgl_pt_normal_flag_d3d_seal = "Xgl_pt_normal_flag_d3d_seal";
char* Xgl_pt_normal_flag_data_f3d_seal = "Xgl_pt_normal_flag_data_f3d_seal";
char* Xgl_pt_normal_flag_f3d_seal = "Xgl_pt_normal_flag_f3d_seal";
char* Xgl_pt_type_supported_seal = "Xgl_pt_type_supported_seal";
char* Xgl_rect_ad3d_seal = "Xgl_rect_ad3d_seal";
char* Xgl_rect_af3d_seal = "Xgl_rect_af3d_seal";
char* Xgl_rect_d2d_seal = "Xgl_rect_d2d_seal";
char* Xgl_rect_d3d_seal = "Xgl_rect_d3d_seal";
char* Xgl_rect_f2d_seal = "Xgl_rect_f2d_seal";
char* Xgl_rect_f3d_seal = "Xgl_rect_f3d_seal";
char* Xgl_rect_i2d_seal = "Xgl_rect_i2d_seal";
char* Xgl_rect_list_seal = "Xgl_rect_list_seal";
char* Xgl_render_component_desc_seal = "Xgl_render_component_desc_seal";
char* Xgl_segment_seal = "Xgl_segment_seal";
char* Xgl_spline_data_seal = "Xgl_spline_data_seal";
char* Xgl_surf_color_spline_seal = "Xgl_surf_color_spline_seal";
char* Xgl_surf_data_spline_seal = "Xgl_surf_data_spline_seal";
char* Xgl_surf_data_spline_list_seal = "Xgl_surf_data_spline_list_seal";
char* Xgl_texture_blend_rgb_seal = "Xgl_texture_blend_rgb_seal";
char* Xgl_texture_color_comp_info_seal = "Xgl_texture_color_comp_info_seal";
char* Xgl_texture_decal_rgb_seal = "Xgl_texture_decal_rgb_seal";
char* Xgl_texture_desc_seal = "Xgl_texture_desc_seal";
char* Xgl_texture_interp_info_seal = "Xgl_texture_interp_info_seal";
char* Xgl_texture_mipmap_desc_seal = "Xgl_texture_mipmap_desc_seal";
char* Xgl_threshold_seal = "Xgl_threshold_seal";
char* Xgl_trim_curve_seal = "Xgl_trim_curve_seal";
char* Xgl_trim_loop_seal = "Xgl_trim_loop_seal";
char* Xgl_trim_loop_list_seal = "Xgl_trim_loop_list_seal";


// accessor wrappers for various xgl structures
// for Xgl_X_window
Xgl_X_window* xgl_x_window_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_X_window, count);
}
void xgl_x_window_delete (Xgl_X_window* rcvr) {
  delete [] rcvr;
}

Xgl_X_window* xgl_x_window_at (Xgl_X_window* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_x_window_at_put (Xgl_X_window* rcvr, fint which, Xgl_X_window* xWindow) {
  rcvr[which] = *xWindow;
}

void xgl_x_window_set (Xgl_X_window* rcvr,
  void* xDisplay,
  int xScreen,
  unsigned long xWindow) {
  rcvr->X_display = xDisplay;
  rcvr->X_screen = xScreen;
  rcvr->X_window = xWindow;
}


// for Xgl_arc_ad3d
Xgl_arc_ad3d* xgl_arc_ad3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_arc_ad3d, count);
}
void xgl_arc_ad3d_delete (Xgl_arc_ad3d* rcvr) {
  delete [] rcvr;
}

Xgl_arc_ad3d* xgl_arc_ad3d_at (Xgl_arc_ad3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_arc_ad3d_at_put (Xgl_arc_ad3d* rcvr, fint which, Xgl_arc_ad3d* arcAd3d) {
  rcvr[which] = *arcAd3d;
}

Xgl_pt_flag_d3d* xgl_arc_ad3d_center (Xgl_arc_ad3d* rcvr) {
   return &(rcvr->center);
}
void xgl_arc_ad3d_center (Xgl_arc_ad3d* rcvr, Xgl_pt_flag_d3d* center) {
   rcvr->center = *center;
}

void xgl_arc_ad3d_set (Xgl_arc_ad3d* rcvr,
                      Xgl_pt_flag_d3d* center,
                      double radius,
                      double startAngle,
                      double stopAngle) {
  rcvr->center = *center;
  rcvr->radius = radius;
  rcvr->start_angle = startAngle;
  rcvr->stop_angle = stopAngle;
}


// for Xgl_arc_af3d
Xgl_arc_af3d* xgl_arc_af3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_arc_af3d, count);
}
void xgl_arc_af3d_delete (Xgl_arc_af3d* rcvr) {
  delete [] rcvr;
}

Xgl_arc_af3d* xgl_arc_af3d_at (Xgl_arc_af3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_arc_af3d_at_put (Xgl_arc_af3d* rcvr, fint which, Xgl_arc_af3d* arcAf3d) {
  rcvr[which] = *arcAf3d;
}

Xgl_pt_flag_f3d* xgl_arc_af3d_center (Xgl_arc_af3d* rcvr) {
   return &(rcvr->center);
}
void xgl_arc_af3d_center (Xgl_arc_af3d* rcvr, Xgl_pt_flag_f3d* center) {
   rcvr->center = *center;
}

void xgl_arc_af3d_set (Xgl_arc_af3d* rcvr,
	Xgl_pt_flag_f3d* center,
	float radius,
	float startAngle,
	float stopAngle) {
  rcvr->center = *center;
  rcvr->radius = radius;
  rcvr->start_angle = startAngle;
  rcvr->stop_angle = stopAngle;
}


// for Xgl_arc_d2d
Xgl_arc_d2d* xgl_arc_d2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_arc_d2d, count);
}
void xgl_arc_d2d_delete (Xgl_arc_d2d* rcvr) {
  delete [] rcvr;
}

Xgl_arc_d2d* xgl_arc_d2d_at (Xgl_arc_d2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_arc_d2d_at_put (Xgl_arc_d2d* rcvr, fint which, Xgl_arc_d2d* arcD2d) {
  rcvr[which] = *arcD2d;
}

Xgl_pt_flag_d2d* xgl_arc_d2d_center (Xgl_arc_d2d* rcvr) {
   return &(rcvr->center);
}
void xgl_arc_d2d_center (Xgl_arc_d2d* rcvr, Xgl_pt_flag_d2d* center) {
   rcvr->center = *center;
}

void xgl_arc_d2d_set (Xgl_arc_d2d* rcvr,
	Xgl_pt_flag_d2d* center,
	double radius,
	double startAngle,
	double stopAngle) {
  rcvr->center = *center;
  rcvr->radius = radius;
  rcvr->start_angle = startAngle;
  rcvr->stop_angle = stopAngle;
}


// for Xgl_arc_d3d
Xgl_arc_d3d* xgl_arc_d3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_arc_d3d, count);
}
void xgl_arc_d3d_delete (Xgl_arc_d3d* rcvr) {
  delete [] rcvr;
}

Xgl_arc_d3d* xgl_arc_d3d_at (Xgl_arc_d3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_arc_d3d_at_put (Xgl_arc_d3d* rcvr, fint which, Xgl_arc_d3d* arcD3d) {
  rcvr[which] = *arcD3d;
}

Xgl_pt_flag_d3d* xgl_arc_d3d_center (Xgl_arc_d3d* rcvr) {
   return &(rcvr->center);
}
void xgl_arc_d3d_center (Xgl_arc_d3d* rcvr, Xgl_pt_flag_d3d* center) {
   rcvr->center = *center;
}

Xgl_pt_d3d* xgl_arc_d3d_dir (Xgl_arc_d3d* rcvr) {
   return rcvr->dir;
}
void xgl_arc_d3d_set (Xgl_arc_d3d* rcvr,
	Xgl_pt_flag_d3d* center,
	bool dirNormal,
	bool dirNormalized,
	double radius,
	double startAngle,
	double stopAngle) {
  rcvr->center = *center;
  rcvr->dir_normal = dirNormal;
  rcvr->dir_normalized = dirNormalized;
  rcvr->radius = radius;
  rcvr->start_angle = startAngle;
  rcvr->stop_angle = stopAngle;
}


// for Xgl_arc_f2d
Xgl_arc_f2d* xgl_arc_f2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_arc_f2d, count);
}
void xgl_arc_f2d_delete (Xgl_arc_f2d* rcvr) {
  delete [] rcvr;
}

Xgl_arc_f2d* xgl_arc_f2d_at (Xgl_arc_f2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_arc_f2d_at_put (Xgl_arc_f2d* rcvr, fint which, Xgl_arc_f2d* arcF2d) {
  rcvr[which] = *arcF2d;
}

Xgl_pt_flag_f2d* xgl_arc_f2d_center (Xgl_arc_f2d* rcvr) {
   return &(rcvr->center);
}
void xgl_arc_f2d_center (Xgl_arc_f2d* rcvr, Xgl_pt_flag_f2d* center) {
   rcvr->center = *center;
}

void xgl_arc_f2d_set (Xgl_arc_f2d* rcvr,
	Xgl_pt_flag_f2d* center,
	float radius,
	float startAngle,
	float stopAngle) {
  rcvr->center = *center;
  rcvr->radius = radius;
  rcvr->start_angle = startAngle;
  rcvr->stop_angle = stopAngle;
}


// for Xgl_arc_f3d
Xgl_arc_f3d* xgl_arc_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_arc_f3d, count);
}
void xgl_arc_f3d_delete (Xgl_arc_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_arc_f3d* xgl_arc_f3d_at (Xgl_arc_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_arc_f3d_at_put (Xgl_arc_f3d* rcvr, fint which, Xgl_arc_f3d* arcF3d) {
  rcvr[which] = *arcF3d;
}

Xgl_pt_flag_f3d* xgl_arc_f3d_center (Xgl_arc_f3d* rcvr) {
   return &(rcvr->center);
}
void xgl_arc_f3d_center (Xgl_arc_f3d* rcvr, Xgl_pt_flag_f3d* center) {
   rcvr->center = *center;
}

Xgl_pt_f3d* xgl_arc_f3d_dir (Xgl_arc_f3d* rcvr) {
   return rcvr->dir;
}
void xgl_arc_f3d_set (Xgl_arc_f3d* rcvr,
	Xgl_pt_flag_f3d* center,
	bool dirNormal,
	bool dirNormalized,
	float radius,
	float startAngle,
	float stopAngle) {
  rcvr->center = *center;
  rcvr->dir_normal = dirNormal;
  rcvr->dir_normalized = dirNormalized;
  rcvr->radius = radius;
  rcvr->start_angle = startAngle;
  rcvr->stop_angle = stopAngle;
}


// for Xgl_arc_i2d
Xgl_arc_i2d* xgl_arc_i2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_arc_i2d, count);
}
void xgl_arc_i2d_delete (Xgl_arc_i2d* rcvr) {
  delete [] rcvr;
}

Xgl_arc_i2d* xgl_arc_i2d_at (Xgl_arc_i2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_arc_i2d_at_put (Xgl_arc_i2d* rcvr, fint which, Xgl_arc_i2d* arcI2d) {
  rcvr[which] = *arcI2d;
}

Xgl_pt_flag_i2d* xgl_arc_i2d_center (Xgl_arc_i2d* rcvr) {
   return &(rcvr->center);
}
void xgl_arc_i2d_center (Xgl_arc_i2d* rcvr, Xgl_pt_flag_i2d* center) {
   rcvr->center = *center;
}

void xgl_arc_i2d_set (Xgl_arc_i2d* rcvr,
	Xgl_pt_flag_i2d* center,
	unsigned long radius,
	float startAngle,
	float stopAngle) {
  rcvr->center = *center;
  rcvr->radius = radius;
  rcvr->start_angle = startAngle;
  rcvr->stop_angle = stopAngle;
}


// for Xgl_arc_list
Xgl_arc_list* xgl_arc_list_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_arc_list, count);
}
void xgl_arc_list_delete (Xgl_arc_list* rcvr) {
  delete [] rcvr;
}

Xgl_arc_list* xgl_arc_list_at (Xgl_arc_list* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_arc_list_at_put (Xgl_arc_list* rcvr, fint which, Xgl_arc_list* arcList) {
  rcvr[which] = *arcList;
}

Xgl_arc_ad3d* xgl_arc_list_arcs_ad3d (Xgl_arc_list* rcvr) {
   return rcvr->arcs.ad3d;
}
void xgl_arc_list_arcs_ad3d (Xgl_arc_list* rcvr, Xgl_arc_ad3d* ad3d) {
   rcvr->arcs.ad3d = ad3d;
}

Xgl_arc_af3d* xgl_arc_list_arcs_af3d (Xgl_arc_list* rcvr) {
   return rcvr->arcs.af3d;
}
void xgl_arc_list_arcs_af3d (Xgl_arc_list* rcvr, Xgl_arc_af3d* af3d) {
   rcvr->arcs.af3d = af3d;
}

Xgl_arc_d2d* xgl_arc_list_arcs_d2d (Xgl_arc_list* rcvr) {
   return rcvr->arcs.d2d;
}
void xgl_arc_list_arcs_d2d (Xgl_arc_list* rcvr, Xgl_arc_d2d* d2d) {
   rcvr->arcs.d2d = d2d;
}

Xgl_arc_d3d* xgl_arc_list_arcs_d3d (Xgl_arc_list* rcvr) {
   return rcvr->arcs.d3d;
}
void xgl_arc_list_arcs_d3d (Xgl_arc_list* rcvr, Xgl_arc_d3d* d3d) {
   rcvr->arcs.d3d = d3d;
}

Xgl_arc_f2d* xgl_arc_list_arcs_f2d (Xgl_arc_list* rcvr) {
   return rcvr->arcs.f2d;
}
void xgl_arc_list_arcs_f2d (Xgl_arc_list* rcvr, Xgl_arc_f2d* f2d) {
   rcvr->arcs.f2d = f2d;
}

Xgl_arc_f3d* xgl_arc_list_arcs_f3d (Xgl_arc_list* rcvr) {
   return rcvr->arcs.f3d;
}
void xgl_arc_list_arcs_f3d (Xgl_arc_list* rcvr, Xgl_arc_f3d* f3d) {
   rcvr->arcs.f3d = f3d;
}

Xgl_arc_i2d* xgl_arc_list_arcs_i2d (Xgl_arc_list* rcvr) {
   return rcvr->arcs.i2d;
}
void xgl_arc_list_arcs_i2d (Xgl_arc_list* rcvr, Xgl_arc_i2d* i2d) {
   rcvr->arcs.i2d = i2d;
}

void xgl_arc_list_set (Xgl_arc_list* rcvr,
	Xgl_arc_ad3d* ad3d,
	Xgl_bbox* bbox,
	unsigned long numArcs,
	Xgl_multiarc_type type) {
  rcvr->arcs.ad3d = ad3d;
  rcvr->bbox = bbox;
  rcvr->num_arcs = numArcs;
  rcvr->type = type;
}

void xgl_arc_list_set (Xgl_arc_list* rcvr,
	Xgl_arc_af3d* af3d,
	Xgl_bbox* bbox,
	unsigned long numArcs,
	Xgl_multiarc_type type) {
  rcvr->arcs.af3d = af3d;
  rcvr->bbox = bbox;
  rcvr->num_arcs = numArcs;
  rcvr->type = type;
}

void xgl_arc_list_set (Xgl_arc_list* rcvr,
	Xgl_arc_d2d* d2d,
	Xgl_bbox* bbox,
	unsigned long numArcs,
	Xgl_multiarc_type type) {
  rcvr->arcs.d2d = d2d;
  rcvr->bbox = bbox;
  rcvr->num_arcs = numArcs;
  rcvr->type = type;
}

void xgl_arc_list_set (Xgl_arc_list* rcvr,
	Xgl_arc_d3d* d3d,
	Xgl_bbox* bbox,
	unsigned long numArcs,
	Xgl_multiarc_type type) {
  rcvr->arcs.d3d = d3d;
  rcvr->bbox = bbox;
  rcvr->num_arcs = numArcs;
  rcvr->type = type;
}

void xgl_arc_list_set (Xgl_arc_list* rcvr,
	Xgl_arc_f2d* f2d,
	Xgl_bbox* bbox,
	unsigned long numArcs,
	Xgl_multiarc_type type) {
  rcvr->arcs.f2d = f2d;
  rcvr->bbox = bbox;
  rcvr->num_arcs = numArcs;
  rcvr->type = type;
}

void xgl_arc_list_set (Xgl_arc_list* rcvr,
	Xgl_arc_f3d* f3d,
	Xgl_bbox* bbox,
	unsigned long numArcs,
	Xgl_multiarc_type type) {
  rcvr->arcs.f3d = f3d;
  rcvr->bbox = bbox;
  rcvr->num_arcs = numArcs;
  rcvr->type = type;
}

void xgl_arc_list_set (Xgl_arc_list* rcvr,
	Xgl_arc_i2d* i2d,
	Xgl_bbox* bbox,
	unsigned long numArcs,
	Xgl_multiarc_type type) {
  rcvr->arcs.i2d = i2d;
  rcvr->bbox = bbox;
  rcvr->num_arcs = numArcs;
  rcvr->type = type;
}


// for Xgl_bbox
Xgl_bbox* xgl_bbox_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_bbox, count);
}
void xgl_bbox_delete (Xgl_bbox* rcvr) {
  delete [] rcvr;
}

Xgl_bbox* xgl_bbox_at (Xgl_bbox* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_bbox_at_put (Xgl_bbox* rcvr, fint which, Xgl_bbox* bbox) {
  rcvr[which] = *bbox;
}

Xgl_bounds_f2d* xgl_bbox_box_f2d (Xgl_bbox* rcvr) {
   return &(rcvr->box.f2d);
}
void xgl_bbox_box_f2d (Xgl_bbox* rcvr, Xgl_bounds_f2d* f2d) {
   rcvr->box.f2d = *f2d;
}

Xgl_bounds_f3d* xgl_bbox_box_f3d (Xgl_bbox* rcvr) {
   return &(rcvr->box.f3d);
}
void xgl_bbox_box_f3d (Xgl_bbox* rcvr, Xgl_bounds_f3d* f3d) {
   rcvr->box.f3d = *f3d;
}

Xgl_bounds_i2d* xgl_bbox_box_i2d (Xgl_bbox* rcvr) {
   return &(rcvr->box.i2d);
}
void xgl_bbox_box_i2d (Xgl_bbox* rcvr, Xgl_bounds_i2d* i2d) {
   rcvr->box.i2d = *i2d;
}

void xgl_bbox_set (Xgl_bbox* rcvr,
	Xgl_bbox_type bboxType,
	Xgl_bounds_f2d* box_f2d) {
  rcvr->bbox_type = bboxType;
  rcvr->box.f2d = *box_f2d;
}

void xgl_bbox_set (Xgl_bbox* rcvr,
	Xgl_bbox_type bboxType,
	Xgl_bounds_f3d* box_f3d) {
  rcvr->bbox_type = bboxType;
  rcvr->box.f3d = *box_f3d;
}

void xgl_bbox_set (Xgl_bbox* rcvr,
	Xgl_bbox_type bboxType,
	Xgl_bounds_i2d* box_i2d) {
  rcvr->bbox_type = bboxType;
  rcvr->box.i2d = *box_i2d;
}


// for Xgl_bbox_d2d
Xgl_bbox_d2d* xgl_bbox_d2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_bbox_d2d, count);
}
void xgl_bbox_d2d_delete (Xgl_bbox_d2d* rcvr) {
  delete [] rcvr;
}

Xgl_bbox_d2d* xgl_bbox_d2d_at (Xgl_bbox_d2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_bbox_d2d_at_put (Xgl_bbox_d2d* rcvr, fint which, Xgl_bbox_d2d* bboxD2d) {
  rcvr[which] = *bboxD2d;
}

Xgl_bounds_d2d* xgl_bbox_d2d_box_d2d (Xgl_bbox_d2d* rcvr) {
   return &(rcvr->box.d2d);
}
void xgl_bbox_d2d_box_d2d (Xgl_bbox_d2d* rcvr, Xgl_bounds_d2d* d2d) {
   rcvr->box.d2d = *d2d;
}

void xgl_bbox_d2d_set (Xgl_bbox_d2d* rcvr,
	Xgl_bbox_type bboxType,
	Xgl_bounds_d2d* box_d2d) {
  rcvr->bbox_type = bboxType;
  rcvr->box.d2d = *box_d2d;
}


// for Xgl_bbox_d3d
Xgl_bbox_d3d* xgl_bbox_d3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_bbox_d3d, count);
}
void xgl_bbox_d3d_delete (Xgl_bbox_d3d* rcvr) {
  delete [] rcvr;
}

Xgl_bbox_d3d* xgl_bbox_d3d_at (Xgl_bbox_d3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_bbox_d3d_at_put (Xgl_bbox_d3d* rcvr, fint which, Xgl_bbox_d3d* bboxD3d) {
  rcvr[which] = *bboxD3d;
}

Xgl_bounds_d3d* xgl_bbox_d3d_box_d3d (Xgl_bbox_d3d* rcvr) {
   return &(rcvr->box.d3d);
}
void xgl_bbox_d3d_box_d3d (Xgl_bbox_d3d* rcvr, Xgl_bounds_d3d* d3d) {
   rcvr->box.d3d = *d3d;
}

void xgl_bbox_d3d_set (Xgl_bbox_d3d* rcvr,
	Xgl_bbox_type bboxType,
	Xgl_bounds_d3d* box_d3d) {
  rcvr->bbox_type = bboxType;
  rcvr->box.d3d = *box_d3d;
}


// for Xgl_bbox_f2d
Xgl_bbox_f2d* xgl_bbox_f2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_bbox_f2d, count);
}
void xgl_bbox_f2d_delete (Xgl_bbox_f2d* rcvr) {
  delete [] rcvr;
}

Xgl_bbox_f2d* xgl_bbox_f2d_at (Xgl_bbox_f2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_bbox_f2d_at_put (Xgl_bbox_f2d* rcvr, fint which, Xgl_bbox_f2d* bboxF2d) {
  rcvr[which] = *bboxF2d;
}

Xgl_bounds_f2d* xgl_bbox_f2d_box_f2d (Xgl_bbox_f2d* rcvr) {
   return &(rcvr->box.f2d);
}
void xgl_bbox_f2d_box_f2d (Xgl_bbox_f2d* rcvr, Xgl_bounds_f2d* f2d) {
   rcvr->box.f2d = *f2d;
}

void xgl_bbox_f2d_set (Xgl_bbox_f2d* rcvr,
	Xgl_bbox_type bboxType,
	Xgl_bounds_f2d* box_f2d) {
  rcvr->bbox_type = bboxType;
  rcvr->box.f2d = *box_f2d;
}


// for Xgl_bbox_f3d
Xgl_bbox_f3d* xgl_bbox_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_bbox_f3d, count);
}
void xgl_bbox_f3d_delete (Xgl_bbox_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_bbox_f3d* xgl_bbox_f3d_at (Xgl_bbox_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_bbox_f3d_at_put (Xgl_bbox_f3d* rcvr, fint which, Xgl_bbox_f3d* bboxF3d) {
  rcvr[which] = *bboxF3d;
}

Xgl_bounds_f3d* xgl_bbox_f3d_box_f3d (Xgl_bbox_f3d* rcvr) {
   return &(rcvr->box.f3d);
}
void xgl_bbox_f3d_box_f3d (Xgl_bbox_f3d* rcvr, Xgl_bounds_f3d* f3d) {
   rcvr->box.f3d = *f3d;
}

void xgl_bbox_f3d_set (Xgl_bbox_f3d* rcvr,
	Xgl_bbox_type bboxType,
	Xgl_bounds_f3d* box_f3d) {
  rcvr->bbox_type = bboxType;
  rcvr->box.f3d = *box_f3d;
}


// for Xgl_bbox_i2d
Xgl_bbox_i2d* xgl_bbox_i2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_bbox_i2d, count);
}
void xgl_bbox_i2d_delete (Xgl_bbox_i2d* rcvr) {
  delete [] rcvr;
}

Xgl_bbox_i2d* xgl_bbox_i2d_at (Xgl_bbox_i2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_bbox_i2d_at_put (Xgl_bbox_i2d* rcvr, fint which, Xgl_bbox_i2d* bboxI2d) {
  rcvr[which] = *bboxI2d;
}

Xgl_bounds_i2d* xgl_bbox_i2d_box_i2d (Xgl_bbox_i2d* rcvr) {
   return &(rcvr->box.i2d);
}
void xgl_bbox_i2d_box_i2d (Xgl_bbox_i2d* rcvr, Xgl_bounds_i2d* i2d) {
   rcvr->box.i2d = *i2d;
}

void xgl_bbox_i2d_set (Xgl_bbox_i2d* rcvr,
	Xgl_bbox_type bboxType,
	Xgl_bounds_i2d* box_i2d) {
  rcvr->bbox_type = bboxType;
  rcvr->box.i2d = *box_i2d;
}


// for Xgl_bbox_status
Xgl_bbox_status* xgl_bbox_status_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_bbox_status, count);
}
void xgl_bbox_status_delete (Xgl_bbox_status* rcvr) {
  delete [] rcvr;
}

Xgl_bbox_status* xgl_bbox_status_at (Xgl_bbox_status* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_bbox_status_at_put (Xgl_bbox_status* rcvr, fint which, Xgl_bbox_status* bboxStatus) {
  rcvr[which] = *bboxStatus;
}

Xgl_geom_status xgl_bbox_status_box_status (Xgl_bbox_status* rcvr) {
   return rcvr->box.status;
}
void xgl_bbox_status_box_status (Xgl_bbox_status* rcvr, Xgl_geom_status status) {
   rcvr->box.status = status;
}

void xgl_bbox_status_set (Xgl_bbox_status* rcvr,
	Xgl_bbox_type bboxType,
	Xgl_geom_status box_status) {
  rcvr->bbox_type = bboxType;
  rcvr->box.status = box_status;
}


// for Xgl_bounds_d1d
Xgl_bounds_d1d* xgl_bounds_d1d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_bounds_d1d, count);
}
void xgl_bounds_d1d_delete (Xgl_bounds_d1d* rcvr) {
  delete [] rcvr;
}

Xgl_bounds_d1d* xgl_bounds_d1d_at (Xgl_bounds_d1d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_bounds_d1d_at_put (Xgl_bounds_d1d* rcvr, fint which, Xgl_bounds_d1d* boundsD1d) {
  rcvr[which] = *boundsD1d;
}


// for Xgl_bounds_d2d
Xgl_bounds_d2d* xgl_bounds_d2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_bounds_d2d, count);
}
void xgl_bounds_d2d_delete (Xgl_bounds_d2d* rcvr) {
  delete [] rcvr;
}

Xgl_bounds_d2d* xgl_bounds_d2d_at (Xgl_bounds_d2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_bounds_d2d_at_put (Xgl_bounds_d2d* rcvr, fint which, Xgl_bounds_d2d* boundsD2d) {
  rcvr[which] = *boundsD2d;
}

void xgl_bounds_d2d_set (Xgl_bounds_d2d* rcvr,
	double xmax,
	double xmin,
	double ymax,
	double ymin) {
  rcvr->xmax = xmax;
  rcvr->xmin = xmin;
  rcvr->ymax = ymax;
  rcvr->ymin = ymin;
}


// for Xgl_bounds_d3d
Xgl_bounds_d3d* xgl_bounds_d3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_bounds_d3d, count);
}
void xgl_bounds_d3d_delete (Xgl_bounds_d3d* rcvr) {
  delete [] rcvr;
}

Xgl_bounds_d3d* xgl_bounds_d3d_at (Xgl_bounds_d3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_bounds_d3d_at_put (Xgl_bounds_d3d* rcvr, fint which, Xgl_bounds_d3d* boundsD3d) {
  rcvr[which] = *boundsD3d;
}

void xgl_bounds_d3d_set (Xgl_bounds_d3d* rcvr,
	double xmax,
	double xmin,
	double ymax,
	double ymin,
	double zmax,
	double zmin) {
  rcvr->xmax = xmax;
  rcvr->xmin = xmin;
  rcvr->ymax = ymax;
  rcvr->ymin = ymin;
  rcvr->zmax = zmax;
  rcvr->zmin = zmin;
}


// for Xgl_bounds_f1d
Xgl_bounds_f1d* xgl_bounds_f1d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_bounds_f1d, count);
}
void xgl_bounds_f1d_delete (Xgl_bounds_f1d* rcvr) {
  delete [] rcvr;
}

Xgl_bounds_f1d* xgl_bounds_f1d_at (Xgl_bounds_f1d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_bounds_f1d_at_put (Xgl_bounds_f1d* rcvr, fint which, Xgl_bounds_f1d* boundsF1d) {
  rcvr[which] = *boundsF1d;
}


// for Xgl_bounds_f2d
Xgl_bounds_f2d* xgl_bounds_f2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_bounds_f2d, count);
}
void xgl_bounds_f2d_delete (Xgl_bounds_f2d* rcvr) {
  delete [] rcvr;
}

Xgl_bounds_f2d* xgl_bounds_f2d_at (Xgl_bounds_f2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_bounds_f2d_at_put (Xgl_bounds_f2d* rcvr, fint which, Xgl_bounds_f2d* boundsF2d) {
  rcvr[which] = *boundsF2d;
}

void xgl_bounds_f2d_set (Xgl_bounds_f2d* rcvr,
	float xmax,
	float xmin,
	float ymax,
	float ymin) {
  rcvr->xmax = xmax;
  rcvr->xmin = xmin;
  rcvr->ymax = ymax;
  rcvr->ymin = ymin;
}


// for Xgl_bounds_f3d
Xgl_bounds_f3d* xgl_bounds_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_bounds_f3d, count);
}
void xgl_bounds_f3d_delete (Xgl_bounds_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_bounds_f3d* xgl_bounds_f3d_at (Xgl_bounds_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_bounds_f3d_at_put (Xgl_bounds_f3d* rcvr, fint which, Xgl_bounds_f3d* boundsF3d) {
  rcvr[which] = *boundsF3d;
}

void xgl_bounds_f3d_set (Xgl_bounds_f3d* rcvr,
	float xmax,
	float xmin,
	float ymax,
	float ymin,
	float zmax,
	float zmin) {
  rcvr->xmax = xmax;
  rcvr->xmin = xmin;
  rcvr->ymax = ymax;
  rcvr->ymin = ymin;
  rcvr->zmax = zmax;
  rcvr->zmin = zmin;
}


// for Xgl_bounds_i2d
Xgl_bounds_i2d* xgl_bounds_i2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_bounds_i2d, count);
}
void xgl_bounds_i2d_delete (Xgl_bounds_i2d* rcvr) {
  delete [] rcvr;
}

Xgl_bounds_i2d* xgl_bounds_i2d_at (Xgl_bounds_i2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_bounds_i2d_at_put (Xgl_bounds_i2d* rcvr, fint which, Xgl_bounds_i2d* boundsI2d) {
  rcvr[which] = *boundsI2d;
}

void xgl_bounds_i2d_set (Xgl_bounds_i2d* rcvr,
	long xmax,
	long xmin,
	long ymax,
	long ymin) {
  rcvr->xmax = xmax;
  rcvr->xmin = xmin;
  rcvr->ymax = ymax;
  rcvr->ymin = ymin;
}


// for Xgl_circle_ad3d
Xgl_circle_ad3d* xgl_circle_ad3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_circle_ad3d, count);
}
void xgl_circle_ad3d_delete (Xgl_circle_ad3d* rcvr) {
  delete [] rcvr;
}

Xgl_circle_ad3d* xgl_circle_ad3d_at (Xgl_circle_ad3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_circle_ad3d_at_put (Xgl_circle_ad3d* rcvr, fint which, Xgl_circle_ad3d* circleAd3d) {
  rcvr[which] = *circleAd3d;
}

Xgl_pt_flag_d3d* xgl_circle_ad3d_center (Xgl_circle_ad3d* rcvr) {
   return &(rcvr->center);
}
void xgl_circle_ad3d_center (Xgl_circle_ad3d* rcvr, Xgl_pt_flag_d3d* center) {
   rcvr->center = *center;
}


// for Xgl_circle_af3d
Xgl_circle_af3d* xgl_circle_af3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_circle_af3d, count);
}
void xgl_circle_af3d_delete (Xgl_circle_af3d* rcvr) {
  delete [] rcvr;
}

Xgl_circle_af3d* xgl_circle_af3d_at (Xgl_circle_af3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_circle_af3d_at_put (Xgl_circle_af3d* rcvr, fint which, Xgl_circle_af3d* circleAf3d) {
  rcvr[which] = *circleAf3d;
}

Xgl_pt_flag_f3d* xgl_circle_af3d_center (Xgl_circle_af3d* rcvr) {
   return &(rcvr->center);
}
void xgl_circle_af3d_center (Xgl_circle_af3d* rcvr, Xgl_pt_flag_f3d* center) {
   rcvr->center = *center;
}


// for Xgl_circle_d2d
Xgl_circle_d2d* xgl_circle_d2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_circle_d2d, count);
}
void xgl_circle_d2d_delete (Xgl_circle_d2d* rcvr) {
  delete [] rcvr;
}

Xgl_circle_d2d* xgl_circle_d2d_at (Xgl_circle_d2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_circle_d2d_at_put (Xgl_circle_d2d* rcvr, fint which, Xgl_circle_d2d* circleD2d) {
  rcvr[which] = *circleD2d;
}

Xgl_pt_flag_d2d* xgl_circle_d2d_center (Xgl_circle_d2d* rcvr) {
   return &(rcvr->center);
}
void xgl_circle_d2d_center (Xgl_circle_d2d* rcvr, Xgl_pt_flag_d2d* center) {
   rcvr->center = *center;
}


// for Xgl_circle_d3d
Xgl_circle_d3d* xgl_circle_d3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_circle_d3d, count);
}
void xgl_circle_d3d_delete (Xgl_circle_d3d* rcvr) {
  delete [] rcvr;
}

Xgl_circle_d3d* xgl_circle_d3d_at (Xgl_circle_d3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_circle_d3d_at_put (Xgl_circle_d3d* rcvr, fint which, Xgl_circle_d3d* circleD3d) {
  rcvr[which] = *circleD3d;
}

Xgl_pt_flag_d3d* xgl_circle_d3d_center (Xgl_circle_d3d* rcvr) {
   return &(rcvr->center);
}
void xgl_circle_d3d_center (Xgl_circle_d3d* rcvr, Xgl_pt_flag_d3d* center) {
   rcvr->center = *center;
}

Xgl_pt_d3d* xgl_circle_d3d_dir (Xgl_circle_d3d* rcvr) {
   return rcvr->dir;
}
void xgl_circle_d3d_set (Xgl_circle_d3d* rcvr,
	Xgl_pt_flag_d3d* center,
	bool dirNormal,
	bool dirNormalized,
	double radius) {
  rcvr->center = *center;
  rcvr->dir_normal = dirNormal;
  rcvr->dir_normalized = dirNormalized;
  rcvr->radius = radius;
}


// for Xgl_circle_f2d
Xgl_circle_f2d* xgl_circle_f2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_circle_f2d, count);
}
void xgl_circle_f2d_delete (Xgl_circle_f2d* rcvr) {
  delete [] rcvr;
}

Xgl_circle_f2d* xgl_circle_f2d_at (Xgl_circle_f2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_circle_f2d_at_put (Xgl_circle_f2d* rcvr, fint which, Xgl_circle_f2d* circleF2d) {
  rcvr[which] = *circleF2d;
}

Xgl_pt_flag_f2d* xgl_circle_f2d_center (Xgl_circle_f2d* rcvr) {
   return &(rcvr->center);
}
void xgl_circle_f2d_center (Xgl_circle_f2d* rcvr, Xgl_pt_flag_f2d* center) {
   rcvr->center = *center;
}


// for Xgl_circle_f3d
Xgl_circle_f3d* xgl_circle_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_circle_f3d, count);
}
void xgl_circle_f3d_delete (Xgl_circle_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_circle_f3d* xgl_circle_f3d_at (Xgl_circle_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_circle_f3d_at_put (Xgl_circle_f3d* rcvr, fint which, Xgl_circle_f3d* circleF3d) {
  rcvr[which] = *circleF3d;
}

Xgl_pt_flag_f3d* xgl_circle_f3d_center (Xgl_circle_f3d* rcvr) {
   return &(rcvr->center);
}
void xgl_circle_f3d_center (Xgl_circle_f3d* rcvr, Xgl_pt_flag_f3d* center) {
   rcvr->center = *center;
}

Xgl_pt_f3d* xgl_circle_f3d_dir (Xgl_circle_f3d* rcvr) {
   return rcvr->dir;
}
void xgl_circle_f3d_set (Xgl_circle_f3d* rcvr,
	Xgl_pt_flag_f3d* center,
	bool dirNormal,
	bool dirNormalized,
	float radius) {
  rcvr->center = *center;
  rcvr->dir_normal = dirNormal;
  rcvr->dir_normalized = dirNormalized;
  rcvr->radius = radius;
}


// for Xgl_circle_i2d
Xgl_circle_i2d* xgl_circle_i2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_circle_i2d, count);
}
void xgl_circle_i2d_delete (Xgl_circle_i2d* rcvr) {
  delete [] rcvr;
}

Xgl_circle_i2d* xgl_circle_i2d_at (Xgl_circle_i2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_circle_i2d_at_put (Xgl_circle_i2d* rcvr, fint which, Xgl_circle_i2d* circleI2d) {
  rcvr[which] = *circleI2d;
}

Xgl_pt_flag_i2d* xgl_circle_i2d_center (Xgl_circle_i2d* rcvr) {
   return &(rcvr->center);
}
void xgl_circle_i2d_center (Xgl_circle_i2d* rcvr, Xgl_pt_flag_i2d* center) {
   rcvr->center = *center;
}


// for Xgl_circle_list
Xgl_circle_list* xgl_circle_list_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_circle_list, count);
}
void xgl_circle_list_delete (Xgl_circle_list* rcvr) {
  delete [] rcvr;
}

Xgl_circle_list* xgl_circle_list_at (Xgl_circle_list* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_circle_list_at_put (Xgl_circle_list* rcvr, fint which, Xgl_circle_list* circleList) {
  rcvr[which] = *circleList;
}

Xgl_circle_ad3d* xgl_circle_list_circles_ad3d (Xgl_circle_list* rcvr) {
   return rcvr->circles.ad3d;
}
void xgl_circle_list_circles_ad3d (Xgl_circle_list* rcvr, Xgl_circle_ad3d* ad3d) {
   rcvr->circles.ad3d = ad3d;
}

Xgl_circle_af3d* xgl_circle_list_circles_af3d (Xgl_circle_list* rcvr) {
   return rcvr->circles.af3d;
}
void xgl_circle_list_circles_af3d (Xgl_circle_list* rcvr, Xgl_circle_af3d* af3d) {
   rcvr->circles.af3d = af3d;
}

Xgl_circle_d2d* xgl_circle_list_circles_d2d (Xgl_circle_list* rcvr) {
   return rcvr->circles.d2d;
}
void xgl_circle_list_circles_d2d (Xgl_circle_list* rcvr, Xgl_circle_d2d* d2d) {
   rcvr->circles.d2d = d2d;
}

Xgl_circle_d3d* xgl_circle_list_circles_d3d (Xgl_circle_list* rcvr) {
   return rcvr->circles.d3d;
}
void xgl_circle_list_circles_d3d (Xgl_circle_list* rcvr, Xgl_circle_d3d* d3d) {
   rcvr->circles.d3d = d3d;
}

Xgl_circle_f2d* xgl_circle_list_circles_f2d (Xgl_circle_list* rcvr) {
   return rcvr->circles.f2d;
}
void xgl_circle_list_circles_f2d (Xgl_circle_list* rcvr, Xgl_circle_f2d* f2d) {
   rcvr->circles.f2d = f2d;
}

Xgl_circle_f3d* xgl_circle_list_circles_f3d (Xgl_circle_list* rcvr) {
   return rcvr->circles.f3d;
}
void xgl_circle_list_circles_f3d (Xgl_circle_list* rcvr, Xgl_circle_f3d* f3d) {
   rcvr->circles.f3d = f3d;
}

Xgl_circle_i2d* xgl_circle_list_circles_i2d (Xgl_circle_list* rcvr) {
   return rcvr->circles.i2d;
}
void xgl_circle_list_circles_i2d (Xgl_circle_list* rcvr, Xgl_circle_i2d* i2d) {
   rcvr->circles.i2d = i2d;
}

void xgl_circle_list_set (Xgl_circle_list* rcvr,
	Xgl_bbox* bbox,
	Xgl_circle_ad3d* ad3d,
	unsigned long numCircles,
	Xgl_multicircle_type type) {
  rcvr->bbox = bbox;
  rcvr->circles.ad3d = ad3d;
  rcvr->num_circles = numCircles;
  rcvr->type = type;
}

void xgl_circle_list_set (Xgl_circle_list* rcvr,
	Xgl_bbox* bbox,
	Xgl_circle_af3d* af3d,
	unsigned long numCircles,
	Xgl_multicircle_type type) {
  rcvr->bbox = bbox;
  rcvr->circles.af3d = af3d;
  rcvr->num_circles = numCircles;
  rcvr->type = type;
}

void xgl_circle_list_set (Xgl_circle_list* rcvr,
	Xgl_bbox* bbox,
	Xgl_circle_d2d* d2d,
	unsigned long numCircles,
	Xgl_multicircle_type type) {
  rcvr->bbox = bbox;
  rcvr->circles.d2d = d2d;
  rcvr->num_circles = numCircles;
  rcvr->type = type;
}

void xgl_circle_list_set (Xgl_circle_list* rcvr,
	Xgl_bbox* bbox,
	Xgl_circle_d3d* d3d,
	unsigned long numCircles,
	Xgl_multicircle_type type) {
  rcvr->bbox = bbox;
  rcvr->circles.d3d = d3d;
  rcvr->num_circles = numCircles;
  rcvr->type = type;
}

void xgl_circle_list_set (Xgl_circle_list* rcvr,
	Xgl_bbox* bbox,
	Xgl_circle_f2d* f2d,
	unsigned long numCircles,
	Xgl_multicircle_type type) {
  rcvr->bbox = bbox;
  rcvr->circles.f2d = f2d;
  rcvr->num_circles = numCircles;
  rcvr->type = type;
}

void xgl_circle_list_set (Xgl_circle_list* rcvr,
	Xgl_bbox* bbox,
	Xgl_circle_f3d* f3d,
	unsigned long numCircles,
	Xgl_multicircle_type type) {
  rcvr->bbox = bbox;
  rcvr->circles.f3d = f3d;
  rcvr->num_circles = numCircles;
  rcvr->type = type;
}

void xgl_circle_list_set (Xgl_circle_list* rcvr,
	Xgl_bbox* bbox,
	Xgl_circle_i2d* i2d,
	unsigned long numCircles,
	Xgl_multicircle_type type) {
  rcvr->bbox = bbox;
  rcvr->circles.i2d = i2d;
  rcvr->num_circles = numCircles;
  rcvr->type = type;
}


// for Xgl_color
Xgl_color* xgl_color_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_color, count);
}
void xgl_color_delete (Xgl_color* rcvr) {
  delete [] rcvr;
}

Xgl_color* xgl_color_at (Xgl_color* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_color_at_put (Xgl_color* rcvr, fint which, Xgl_color* color) {
  rcvr[which] = *color;
}

Xgl_color_rgb* xgl_color_rgb (Xgl_color* rcvr) {
   return &(rcvr->rgb);
}
void xgl_color_rgb (Xgl_color* rcvr, Xgl_color_rgb* rgb) {
   rcvr->rgb = *rgb;
}


// for Xgl_color_facet
Xgl_color_facet* xgl_color_facet_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_color_facet, count);
}
void xgl_color_facet_delete (Xgl_color_facet* rcvr) {
  delete [] rcvr;
}

Xgl_color_facet* xgl_color_facet_at (Xgl_color_facet* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_color_facet_at_put (Xgl_color_facet* rcvr, fint which, Xgl_color_facet* colorFacet) {
  rcvr[which] = *colorFacet;
}

float xgl_color_facet_color_gray (Xgl_color_facet* rcvr) {
   return rcvr->color.gray;
}
void xgl_color_facet_color_gray (Xgl_color_facet* rcvr, float gray) {
   rcvr->color.gray = gray;
}

unsigned long xgl_color_facet_color_index (Xgl_color_facet* rcvr) {
   return rcvr->color.index;
}
void xgl_color_facet_color_index (Xgl_color_facet* rcvr, unsigned long index) {
   rcvr->color.index = index;
}

Xgl_color_rgb* xgl_color_facet_color_rgb (Xgl_color_facet* rcvr) {
   return &(rcvr->color.rgb);
}
void xgl_color_facet_color_rgb (Xgl_color_facet* rcvr, Xgl_color_rgb* rgb) {
   rcvr->color.rgb = *rgb;
}

unsigned long xgl_color_facet_color_z (Xgl_color_facet* rcvr) {
   return rcvr->color.z;
}
void xgl_color_facet_color_z (Xgl_color_facet* rcvr, unsigned long z) {
   rcvr->color.z = z;
}


// for Xgl_color_homogeneous
Xgl_color_homogeneous* xgl_color_homogeneous_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_color_homogeneous, count);
}
void xgl_color_homogeneous_delete (Xgl_color_homogeneous* rcvr) {
  delete [] rcvr;
}

Xgl_color_homogeneous* xgl_color_homogeneous_at (Xgl_color_homogeneous* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_color_homogeneous_at_put (Xgl_color_homogeneous* rcvr, fint which, Xgl_color_homogeneous* colorHomogeneous) {
  rcvr[which] = *colorHomogeneous;
}

Xgl_color_rgbw* xgl_color_homogeneous_rgbw (Xgl_color_homogeneous* rcvr) {
   return &(rcvr->rgbw);
}
void xgl_color_homogeneous_rgbw (Xgl_color_homogeneous* rcvr, Xgl_color_rgbw* rgbw) {
   rcvr->rgbw = *rgbw;
}


// for Xgl_color_list
Xgl_color_list* xgl_color_list_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_color_list, count);
}
void xgl_color_list_delete (Xgl_color_list* rcvr) {
  delete [] rcvr;
}

Xgl_color_list* xgl_color_list_at (Xgl_color_list* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_color_list_at_put (Xgl_color_list* rcvr, fint which, Xgl_color_list* colorList) {
  rcvr[which] = *colorList;
}

void xgl_color_list_set (Xgl_color_list* rcvr,
	Xgl_color* colors,
	unsigned long length,
	unsigned long startIndex) {
  rcvr->colors = colors;
  rcvr->length = length;
  rcvr->start_index = startIndex;
}


// for Xgl_color_normal_facet
Xgl_color_normal_facet* xgl_color_normal_facet_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_color_normal_facet, count);
}
void xgl_color_normal_facet_delete (Xgl_color_normal_facet* rcvr) {
  delete [] rcvr;
}

Xgl_color_normal_facet* xgl_color_normal_facet_at (Xgl_color_normal_facet* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_color_normal_facet_at_put (Xgl_color_normal_facet* rcvr, fint which, Xgl_color_normal_facet* colorNormalFacet) {
  rcvr[which] = *colorNormalFacet;
}

float xgl_color_normal_facet_color_gray (Xgl_color_normal_facet* rcvr) {
   return rcvr->color.gray;
}
void xgl_color_normal_facet_color_gray (Xgl_color_normal_facet* rcvr, float gray) {
   rcvr->color.gray = gray;
}

unsigned long xgl_color_normal_facet_color_index (Xgl_color_normal_facet* rcvr) {
   return rcvr->color.index;
}
void xgl_color_normal_facet_color_index (Xgl_color_normal_facet* rcvr, unsigned long index) {
   rcvr->color.index = index;
}

Xgl_color_rgb* xgl_color_normal_facet_color_rgb (Xgl_color_normal_facet* rcvr) {
   return &(rcvr->color.rgb);
}
void xgl_color_normal_facet_color_rgb (Xgl_color_normal_facet* rcvr, Xgl_color_rgb* rgb) {
   rcvr->color.rgb = *rgb;
}

unsigned long xgl_color_normal_facet_color_z (Xgl_color_normal_facet* rcvr) {
   return rcvr->color.z;
}
void xgl_color_normal_facet_color_z (Xgl_color_normal_facet* rcvr, unsigned long z) {
   rcvr->color.z = z;
}

Xgl_pt_f3d* xgl_color_normal_facet_normal (Xgl_color_normal_facet* rcvr) {
   return &(rcvr->normal);
}
void xgl_color_normal_facet_normal (Xgl_color_normal_facet* rcvr, Xgl_pt_f3d* normal) {
   rcvr->normal = *normal;
}


// for Xgl_color_rgb
Xgl_color_rgb* xgl_color_rgb_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_color_rgb, count);
}
void xgl_color_rgb_delete (Xgl_color_rgb* rcvr) {
  delete [] rcvr;
}

Xgl_color_rgb* xgl_color_rgb_at (Xgl_color_rgb* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_color_rgb_at_put (Xgl_color_rgb* rcvr, fint which, Xgl_color_rgb* colorRgb) {
  rcvr[which] = *colorRgb;
}

void xgl_color_rgb_set (Xgl_color_rgb* rcvr,
	float b,
	float g,
	float r) {
  rcvr->b = b;
  rcvr->g = g;
  rcvr->r = r;
}


// for Xgl_color_rgbw
Xgl_color_rgbw* xgl_color_rgbw_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_color_rgbw, count);
}
void xgl_color_rgbw_delete (Xgl_color_rgbw* rcvr) {
  delete [] rcvr;
}

Xgl_color_rgbw* xgl_color_rgbw_at (Xgl_color_rgbw* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_color_rgbw_at_put (Xgl_color_rgbw* rcvr, fint which, Xgl_color_rgbw* colorRgbw) {
  rcvr[which] = *colorRgbw;
}

void xgl_color_rgbw_set (Xgl_color_rgbw* rcvr,
	float b,
	float g,
	float r,
	float w) {
  rcvr->b = b;
  rcvr->g = g;
  rcvr->r = r;
  rcvr->w = w;
}


// for Xgl_color_type_supported
Xgl_color_type_supported* xgl_color_type_supported_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_color_type_supported, count);
}
void xgl_color_type_supported_delete (Xgl_color_type_supported* rcvr) {
  delete [] rcvr;
}

Xgl_color_type_supported* xgl_color_type_supported_at (Xgl_color_type_supported* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_color_type_supported_at_put (Xgl_color_type_supported* rcvr, fint which, Xgl_color_type_supported* colorTypeSupported) {
  rcvr[which] = *colorTypeSupported;
}


// for Xgl_curve_color_spline
Xgl_curve_color_spline* xgl_curve_color_spline_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_curve_color_spline, count);
}
void xgl_curve_color_spline_delete (Xgl_curve_color_spline* rcvr) {
  delete [] rcvr;
}

Xgl_curve_color_spline* xgl_curve_color_spline_at (Xgl_curve_color_spline* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_curve_color_spline_at_put (Xgl_curve_color_spline* rcvr, fint which, Xgl_curve_color_spline* curveColorSpline) {
  rcvr[which] = *curveColorSpline;
}

void xgl_curve_color_spline_set (Xgl_curve_color_spline* rcvr,
	Xgl_color_homogeneous* colors,
	float* knotVector,
	unsigned long numKnots,
	unsigned long order) {
  rcvr->colors = colors;
  rcvr->knot_vector = knotVector;
  rcvr->num_knots = numKnots;
  rcvr->order = order;
}


// for Xgl_ell_ad3d
Xgl_ell_ad3d* xgl_ell_ad3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_ell_ad3d, count);
}
void xgl_ell_ad3d_delete (Xgl_ell_ad3d* rcvr) {
  delete [] rcvr;
}

Xgl_ell_ad3d* xgl_ell_ad3d_at (Xgl_ell_ad3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_ell_ad3d_at_put (Xgl_ell_ad3d* rcvr, fint which, Xgl_ell_ad3d* ellAd3d) {
  rcvr[which] = *ellAd3d;
}

Xgl_pt_flag_d3d* xgl_ell_ad3d_center (Xgl_ell_ad3d* rcvr) {
   return &(rcvr->center);
}
void xgl_ell_ad3d_center (Xgl_ell_ad3d* rcvr, Xgl_pt_flag_d3d* center) {
   rcvr->center = *center;
}

void xgl_ell_ad3d_set (Xgl_ell_ad3d* rcvr,
	Xgl_pt_flag_d3d* center,
	double majorAxis,
	double minorAxis,
	double rotAngle,
	double startAngle,
	double stopAngle) {
  rcvr->center = *center;
  rcvr->major_axis = majorAxis;
  rcvr->minor_axis = minorAxis;
  rcvr->rot_angle = rotAngle;
  rcvr->start_angle = startAngle;
  rcvr->stop_angle = stopAngle;
}


// for Xgl_ell_af3d
Xgl_ell_af3d* xgl_ell_af3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_ell_af3d, count);
}
void xgl_ell_af3d_delete (Xgl_ell_af3d* rcvr) {
  delete [] rcvr;
}

Xgl_ell_af3d* xgl_ell_af3d_at (Xgl_ell_af3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_ell_af3d_at_put (Xgl_ell_af3d* rcvr, fint which, Xgl_ell_af3d* ellAf3d) {
  rcvr[which] = *ellAf3d;
}

Xgl_pt_flag_f3d* xgl_ell_af3d_center (Xgl_ell_af3d* rcvr) {
   return &(rcvr->center);
}
void xgl_ell_af3d_center (Xgl_ell_af3d* rcvr, Xgl_pt_flag_f3d* center) {
   rcvr->center = *center;
}

void xgl_ell_af3d_set (Xgl_ell_af3d* rcvr,
	Xgl_pt_flag_f3d* center,
	float majorAxis,
	float minorAxis,
	float rotAngle,
	float startAngle,
	float stopAngle) {
  rcvr->center = *center;
  rcvr->major_axis = majorAxis;
  rcvr->minor_axis = minorAxis;
  rcvr->rot_angle = rotAngle;
  rcvr->start_angle = startAngle;
  rcvr->stop_angle = stopAngle;
}


// for Xgl_ell_d3d
Xgl_ell_d3d* xgl_ell_d3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_ell_d3d, count);
}
void xgl_ell_d3d_delete (Xgl_ell_d3d* rcvr) {
  delete [] rcvr;
}

Xgl_ell_d3d* xgl_ell_d3d_at (Xgl_ell_d3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_ell_d3d_at_put (Xgl_ell_d3d* rcvr, fint which, Xgl_ell_d3d* ellD3d) {
  rcvr[which] = *ellD3d;
}

Xgl_pt_flag_d3d* xgl_ell_d3d_center (Xgl_ell_d3d* rcvr) {
   return &(rcvr->center);
}
void xgl_ell_d3d_center (Xgl_ell_d3d* rcvr, Xgl_pt_flag_d3d* center) {
   rcvr->center = *center;
}

Xgl_pt_d3d* xgl_ell_d3d_dir (Xgl_ell_d3d* rcvr) {
   return rcvr->dir;
}
void xgl_ell_d3d_set (Xgl_ell_d3d* rcvr,
	Xgl_pt_flag_d3d* center,
	bool dirNormal,
	bool dirNormalized,
	double majorAxis,
	double minorAxis,
	double rotAngle,
	double startAngle,
	double stopAngle) {
  rcvr->center = *center;
  rcvr->dir_normal = dirNormal;
  rcvr->dir_normalized = dirNormalized;
  rcvr->major_axis = majorAxis;
  rcvr->minor_axis = minorAxis;
  rcvr->rot_angle = rotAngle;
  rcvr->start_angle = startAngle;
  rcvr->stop_angle = stopAngle;
}


// for Xgl_ell_f3d
Xgl_ell_f3d* xgl_ell_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_ell_f3d, count);
}
void xgl_ell_f3d_delete (Xgl_ell_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_ell_f3d* xgl_ell_f3d_at (Xgl_ell_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_ell_f3d_at_put (Xgl_ell_f3d* rcvr, fint which, Xgl_ell_f3d* ellF3d) {
  rcvr[which] = *ellF3d;
}

Xgl_pt_flag_f3d* xgl_ell_f3d_center (Xgl_ell_f3d* rcvr) {
   return &(rcvr->center);
}
void xgl_ell_f3d_center (Xgl_ell_f3d* rcvr, Xgl_pt_flag_f3d* center) {
   rcvr->center = *center;
}

Xgl_pt_f3d* xgl_ell_f3d_dir (Xgl_ell_f3d* rcvr) {
   return rcvr->dir;
}
void xgl_ell_f3d_set (Xgl_ell_f3d* rcvr,
	Xgl_pt_flag_f3d* center,
	bool dirNormal,
	bool dirNormalized,
	float majorAxis,
	float minorAxis,
	float rotAngle,
	float startAngle,
	float stopAngle) {
  rcvr->center = *center;
  rcvr->dir_normal = dirNormal;
  rcvr->dir_normalized = dirNormalized;
  rcvr->major_axis = majorAxis;
  rcvr->minor_axis = minorAxis;
  rcvr->rot_angle = rotAngle;
  rcvr->start_angle = startAngle;
  rcvr->stop_angle = stopAngle;
}


// for Xgl_ell_list
Xgl_ell_list* xgl_ell_list_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_ell_list, count);
}
void xgl_ell_list_delete (Xgl_ell_list* rcvr) {
  delete [] rcvr;
}

Xgl_ell_list* xgl_ell_list_at (Xgl_ell_list* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_ell_list_at_put (Xgl_ell_list* rcvr, fint which, Xgl_ell_list* ellList) {
  rcvr[which] = *ellList;
}

Xgl_ell_ad3d* xgl_ell_list_ells_ad3d (Xgl_ell_list* rcvr) {
   return rcvr->ells.ad3d;
}
void xgl_ell_list_ells_ad3d (Xgl_ell_list* rcvr, Xgl_ell_ad3d* ad3d) {
   rcvr->ells.ad3d = ad3d;
}

Xgl_ell_af3d* xgl_ell_list_ells_af3d (Xgl_ell_list* rcvr) {
   return rcvr->ells.af3d;
}
void xgl_ell_list_ells_af3d (Xgl_ell_list* rcvr, Xgl_ell_af3d* af3d) {
   rcvr->ells.af3d = af3d;
}

Xgl_ell_d3d* xgl_ell_list_ells_d3d (Xgl_ell_list* rcvr) {
   return rcvr->ells.d3d;
}
void xgl_ell_list_ells_d3d (Xgl_ell_list* rcvr, Xgl_ell_d3d* d3d) {
   rcvr->ells.d3d = d3d;
}

Xgl_ell_f3d* xgl_ell_list_ells_f3d (Xgl_ell_list* rcvr) {
   return rcvr->ells.f3d;
}
void xgl_ell_list_ells_f3d (Xgl_ell_list* rcvr, Xgl_ell_f3d* f3d) {
   rcvr->ells.f3d = f3d;
}

void xgl_ell_list_set (Xgl_ell_list* rcvr,
	Xgl_bbox* bbox,
	Xgl_ell_ad3d* ad3d,
	unsigned long numElls,
	Xgl_multiell_type type) {
  rcvr->bbox = bbox;
  rcvr->ells.ad3d = ad3d;
  rcvr->num_ells = numElls;
  rcvr->type = type;
}

void xgl_ell_list_set (Xgl_ell_list* rcvr,
	Xgl_bbox* bbox,
	Xgl_ell_af3d* af3d,
	unsigned long numElls,
	Xgl_multiell_type type) {
  rcvr->bbox = bbox;
  rcvr->ells.af3d = af3d;
  rcvr->num_ells = numElls;
  rcvr->type = type;
}

void xgl_ell_list_set (Xgl_ell_list* rcvr,
	Xgl_bbox* bbox,
	Xgl_ell_d3d* d3d,
	unsigned long numElls,
	Xgl_multiell_type type) {
  rcvr->bbox = bbox;
  rcvr->ells.d3d = d3d;
  rcvr->num_ells = numElls;
  rcvr->type = type;
}

void xgl_ell_list_set (Xgl_ell_list* rcvr,
	Xgl_bbox* bbox,
	Xgl_ell_f3d* f3d,
	unsigned long numElls,
	Xgl_multiell_type type) {
  rcvr->bbox = bbox;
  rcvr->ells.f3d = f3d;
  rcvr->num_ells = numElls;
  rcvr->type = type;
}


// for Xgl_error_info
Xgl_error_info* xgl_error_info_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_error_info, count);
}
void xgl_error_info_delete (Xgl_error_info* rcvr) {
  delete [] rcvr;
}

Xgl_error_info* xgl_error_info_at (Xgl_error_info* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_error_info_at_put (Xgl_error_info* rcvr, fint which, Xgl_error_info* errorInfo) {
  rcvr[which] = *errorInfo;
}


// for Xgl_facet
Xgl_facet* xgl_facet_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_facet, count);
}
void xgl_facet_delete (Xgl_facet* rcvr) {
  delete [] rcvr;
}

Xgl_facet* xgl_facet_at (Xgl_facet* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_facet_at_put (Xgl_facet* rcvr, fint which, Xgl_facet* facet) {
  rcvr[which] = *facet;
}

Xgl_color_facet* xgl_facet_color_facet (Xgl_facet* rcvr) {
   return &(rcvr->color_facet);
}
void xgl_facet_color_facet (Xgl_facet* rcvr, Xgl_color_facet* colorFacet) {
   rcvr->color_facet = *colorFacet;
}

Xgl_color_normal_facet* xgl_facet_color_normal_facet (Xgl_facet* rcvr) {
   return &(rcvr->color_normal_facet);
}
void xgl_facet_color_normal_facet (Xgl_facet* rcvr, Xgl_color_normal_facet* colorNormalFacet) {
   rcvr->color_normal_facet = *colorNormalFacet;
}

Xgl_normal_facet* xgl_facet_normal_facet (Xgl_facet* rcvr) {
   return &(rcvr->normal_facet);
}
void xgl_facet_normal_facet (Xgl_facet* rcvr, Xgl_normal_facet* normalFacet) {
   rcvr->normal_facet = *normalFacet;
}


// for Xgl_facet_list
Xgl_facet_list* xgl_facet_list_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_facet_list, count);
}
void xgl_facet_list_delete (Xgl_facet_list* rcvr) {
  delete [] rcvr;
}

Xgl_facet_list* xgl_facet_list_at (Xgl_facet_list* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_facet_list_at_put (Xgl_facet_list* rcvr, fint which, Xgl_facet_list* facetList) {
  rcvr[which] = *facetList;
}

Xgl_color_facet* xgl_facet_list_facets_color_facets (Xgl_facet_list* rcvr) {
   return rcvr->facets.color_facets;
}
void xgl_facet_list_facets_color_facets (Xgl_facet_list* rcvr, Xgl_color_facet* colorFacets) {
   rcvr->facets.color_facets = colorFacets;
}

Xgl_color_normal_facet* xgl_facet_list_facets_color_normal_facets (Xgl_facet_list* rcvr) {
   return rcvr->facets.color_normal_facets;
}
void xgl_facet_list_facets_color_normal_facets (Xgl_facet_list* rcvr, Xgl_color_normal_facet* colorNormalFacets) {
   rcvr->facets.color_normal_facets = colorNormalFacets;
}

Xgl_normal_facet* xgl_facet_list_facets_normal_facets (Xgl_facet_list* rcvr) {
   return rcvr->facets.normal_facets;
}
void xgl_facet_list_facets_normal_facets (Xgl_facet_list* rcvr, Xgl_normal_facet* normalFacets) {
   rcvr->facets.normal_facets = normalFacets;
}

void xgl_facet_list_set (Xgl_facet_list* rcvr,
	Xgl_facet_type facetType,
	Xgl_color_facet* colorFacets,
	unsigned long numFacets) {
  rcvr->facet_type = facetType;
  rcvr->facets.color_facets = colorFacets;
  rcvr->num_facets = numFacets;
}

void xgl_facet_list_set (Xgl_facet_list* rcvr,
	Xgl_facet_type facetType,
	Xgl_color_normal_facet* colorNormalFacets,
	unsigned long numFacets) {
  rcvr->facet_type = facetType;
  rcvr->facets.color_normal_facets = colorNormalFacets;
  rcvr->num_facets = numFacets;
}

void xgl_facet_list_set (Xgl_facet_list* rcvr,
	Xgl_facet_type facetType,
	Xgl_normal_facet* normalFacets,
	unsigned long numFacets) {
  rcvr->facet_type = facetType;
  rcvr->facets.normal_facets = normalFacets;
  rcvr->num_facets = numFacets;
}


// for Xgl_facet_list_list
Xgl_facet_list_list* xgl_facet_list_list_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_facet_list_list, count);
}
void xgl_facet_list_list_delete (Xgl_facet_list_list* rcvr) {
  delete [] rcvr;
}

Xgl_facet_list_list* xgl_facet_list_list_at (Xgl_facet_list_list* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_facet_list_list_at_put (Xgl_facet_list_list* rcvr, fint which, Xgl_facet_list_list* facetListList) {
  rcvr[which] = *facetListList;
}


// for Xgl_inquire
Xgl_inquire* xgl_inquire_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_inquire, count);
}
void xgl_inquire_delete (Xgl_inquire* rcvr) {
  delete [] rcvr;
}

Xgl_inquire* xgl_inquire_at (Xgl_inquire* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_inquire_at_put (Xgl_inquire* rcvr, fint which, Xgl_inquire* inquire) {
  rcvr[which] = *inquire;
}

Xgl_color_type_supported* xgl_inquire_color_type (Xgl_inquire* rcvr) {
   return &(rcvr->color_type);
}
void xgl_inquire_color_type (Xgl_inquire* rcvr, Xgl_color_type_supported* colorType) {
   rcvr->color_type = *colorType;
}

Xgl_pt_type_supported* xgl_inquire_pt_type (Xgl_inquire* rcvr) {
   return &(rcvr->pt_type);
}
void xgl_inquire_pt_type (Xgl_inquire* rcvr, Xgl_pt_type_supported* ptType) {
   rcvr->pt_type = *ptType;
}


// for Xgl_irect
Xgl_irect* xgl_irect_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_irect, count);
}
void xgl_irect_delete (Xgl_irect* rcvr) {
  delete [] rcvr;
}

Xgl_irect* xgl_irect_at (Xgl_irect* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_irect_at_put (Xgl_irect* rcvr, fint which, Xgl_irect* irect) {
  rcvr[which] = *irect;
}

void xgl_irect_set (Xgl_irect* rcvr,
	long xmax,
	long xmin,
	long ymax,
	long ymin) {
  rcvr->xmax = xmax;
  rcvr->xmin = xmin;
  rcvr->ymax = ymax;
  rcvr->ymin = ymin;
}


// for Xgl_irect_list
Xgl_irect_list* xgl_irect_list_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_irect_list, count);
}
void xgl_irect_list_delete (Xgl_irect_list* rcvr) {
  delete [] rcvr;
}

Xgl_irect_list* xgl_irect_list_at (Xgl_irect_list* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_irect_list_at_put (Xgl_irect_list* rcvr, fint which, Xgl_irect_list* irectList) {
  rcvr[which] = *irectList;
}


// for Xgl_matrix_d2d
Xgl_matrix_d2d* xgl_matrix_d2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_matrix_d2d, count);
}
void xgl_matrix_d2d_delete (Xgl_matrix_d2d* rcvr) {
  delete [] rcvr;
}

Xgl_matrix_d2d* xgl_matrix_d2d_at (Xgl_matrix_d2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_matrix_d2d_at_put (Xgl_matrix_d2d* rcvr, fint which, Xgl_matrix_d2d* matrixD2d) {
  rcvr[which] = *matrixD2d;
}

double xgl_matrix_d2d_row_column (Xgl_matrix_d2d* matrixD2d, fint row, fint column) {
  return (*matrixD2d)[row][column];
}
void xgl_matrix_d2d_row_column_put (Xgl_matrix_d2d* matrixD2d, fint row, fint column, double data) {
  (*matrixD2d)[row][column] = data;
}


// for Xgl_matrix_d3d
Xgl_matrix_d3d* xgl_matrix_d3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_matrix_d3d, count);
}
void xgl_matrix_d3d_delete (Xgl_matrix_d3d* rcvr) {
  delete [] rcvr;
}

Xgl_matrix_d3d* xgl_matrix_d3d_at (Xgl_matrix_d3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_matrix_d3d_at_put (Xgl_matrix_d3d* rcvr, fint which, Xgl_matrix_d3d* matrixD3d) {
  rcvr[which] = *matrixD3d;
}

double xgl_matrix_d3d_row_column (Xgl_matrix_d3d* matrixD3d, fint row, fint column) {
  return (*matrixD3d)[row][column];
}
void xgl_matrix_d3d_row_column_put (Xgl_matrix_d3d* matrixD3d, fint row, fint column, double data) {
  (*matrixD3d)[row][column] = data;
}


// for Xgl_matrix_f2d
Xgl_matrix_f2d* xgl_matrix_f2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_matrix_f2d, count);
}
void xgl_matrix_f2d_delete (Xgl_matrix_f2d* rcvr) {
  delete [] rcvr;
}

Xgl_matrix_f2d* xgl_matrix_f2d_at (Xgl_matrix_f2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_matrix_f2d_at_put (Xgl_matrix_f2d* rcvr, fint which, Xgl_matrix_f2d* matrixF2d) {
  rcvr[which] = *matrixF2d;
}

float xgl_matrix_f2d_row_column (Xgl_matrix_f2d* matrixF2d, fint row, fint column) {
  return (*matrixF2d)[row][column];
}
void xgl_matrix_f2d_row_column_put (Xgl_matrix_f2d* matrixF2d, fint row, fint column, float data) {
  (*matrixF2d)[row][column] = data;
}


// for Xgl_matrix_f3d
Xgl_matrix_f3d* xgl_matrix_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_matrix_f3d, count);
}
void xgl_matrix_f3d_delete (Xgl_matrix_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_matrix_f3d* xgl_matrix_f3d_at (Xgl_matrix_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_matrix_f3d_at_put (Xgl_matrix_f3d* rcvr, fint which, Xgl_matrix_f3d* matrixF3d) {
  rcvr[which] = *matrixF3d;
}

float xgl_matrix_f3d_row_column (Xgl_matrix_f3d* matrixF3d, fint row, fint column) {
  return (*matrixF3d)[row][column];
}
void xgl_matrix_f3d_row_column_put (Xgl_matrix_f3d* matrixF3d, fint row, fint column, float data) {
  (*matrixF3d)[row][column] = data;
}


// for Xgl_matrix_i2d
Xgl_matrix_i2d* xgl_matrix_i2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_matrix_i2d, count);
}
void xgl_matrix_i2d_delete (Xgl_matrix_i2d* rcvr) {
  delete [] rcvr;
}

Xgl_matrix_i2d* xgl_matrix_i2d_at (Xgl_matrix_i2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_matrix_i2d_at_put (Xgl_matrix_i2d* rcvr, fint which, Xgl_matrix_i2d* matrixI2d) {
  rcvr[which] = *matrixI2d;
}

long xgl_matrix_i2d_row_column (Xgl_matrix_i2d* matrixI2d, fint row, fint column) {
  return (*matrixI2d)[row][column];
}
void xgl_matrix_i2d_row_column_put (Xgl_matrix_i2d* matrixI2d, fint row, fint column, long data) {
  (*matrixI2d)[row][column] = data;
}


// for Xgl_mono_text
Xgl_mono_text* xgl_mono_text_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_mono_text, count);
}
void xgl_mono_text_delete (Xgl_mono_text* rcvr) {
  delete [] rcvr;
}

Xgl_mono_text* xgl_mono_text_at (Xgl_mono_text* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_mono_text_at_put (Xgl_mono_text* rcvr, fint which, Xgl_mono_text* monoText) {
  rcvr[which] = *monoText;
}


// for Xgl_mono_text_list
Xgl_mono_text_list* xgl_mono_text_list_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_mono_text_list, count);
}
void xgl_mono_text_list_delete (Xgl_mono_text_list* rcvr) {
  delete [] rcvr;
}

Xgl_mono_text_list* xgl_mono_text_list_at (Xgl_mono_text_list* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_mono_text_list_at_put (Xgl_mono_text_list* rcvr, fint which, Xgl_mono_text_list* monoTextList) {
  rcvr[which] = *monoTextList;
}


// for Xgl_normal_facet
Xgl_normal_facet* xgl_normal_facet_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_normal_facet, count);
}
void xgl_normal_facet_delete (Xgl_normal_facet* rcvr) {
  delete [] rcvr;
}

Xgl_normal_facet* xgl_normal_facet_at (Xgl_normal_facet* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_normal_facet_at_put (Xgl_normal_facet* rcvr, fint which, Xgl_normal_facet* normalFacet) {
  rcvr[which] = *normalFacet;
}

Xgl_pt_f3d* xgl_normal_facet_normal (Xgl_normal_facet* rcvr) {
   return &(rcvr->normal);
}
void xgl_normal_facet_normal (Xgl_normal_facet* rcvr, Xgl_pt_f3d* normal) {
   rcvr->normal = *normal;
}


// for Xgl_nu_bspline_curve
Xgl_nu_bspline_curve* xgl_nu_bspline_curve_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_nu_bspline_curve, count);
}
void xgl_nu_bspline_curve_delete (Xgl_nu_bspline_curve* rcvr) {
  delete [] rcvr;
}

Xgl_nu_bspline_curve* xgl_nu_bspline_curve_at (Xgl_nu_bspline_curve* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_nu_bspline_curve_at_put (Xgl_nu_bspline_curve* rcvr, fint which, Xgl_nu_bspline_curve* nuBsplineCurve) {
  rcvr[which] = *nuBsplineCurve;
}

Xgl_pt_list* xgl_nu_bspline_curve_ctrl_pts (Xgl_nu_bspline_curve* rcvr) {
   return &(rcvr->ctrl_pts);
}
void xgl_nu_bspline_curve_ctrl_pts (Xgl_nu_bspline_curve* rcvr, Xgl_pt_list* ctrlPts) {
   rcvr->ctrl_pts = *ctrlPts;
}

Xgl_bounds_f1d* xgl_nu_bspline_curve_range (Xgl_nu_bspline_curve* rcvr) {
   return &(rcvr->range);
}
void xgl_nu_bspline_curve_range (Xgl_nu_bspline_curve* rcvr, Xgl_bounds_f1d* range) {
   rcvr->range = *range;
}

void xgl_nu_bspline_curve_set (Xgl_nu_bspline_curve* rcvr,
	Xgl_pt_list* ctrlPts,
	float* knotVector,
	unsigned long numKnots,
	unsigned long order,
	Xgl_bounds_f1d* range,
	bool trimCurveVis) {
  rcvr->ctrl_pts = *ctrlPts;
  rcvr->knot_vector = knotVector;
  rcvr->num_knots = numKnots;
  rcvr->order = order;
  rcvr->range = *range;
  rcvr->trim_curve_vis = trimCurveVis;
}


// for Xgl_nurbs_curve
Xgl_nurbs_curve* xgl_nurbs_curve_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_nurbs_curve, count);
}
void xgl_nurbs_curve_delete (Xgl_nurbs_curve* rcvr) {
  delete [] rcvr;
}

Xgl_nurbs_curve* xgl_nurbs_curve_at (Xgl_nurbs_curve* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_nurbs_curve_at_put (Xgl_nurbs_curve* rcvr, fint which, Xgl_nurbs_curve* nurbsCurve) {
  rcvr[which] = *nurbsCurve;
}

Xgl_pt_list* xgl_nurbs_curve_ctrl_pts (Xgl_nurbs_curve* rcvr) {
   return &(rcvr->ctrl_pts);
}
void xgl_nurbs_curve_ctrl_pts (Xgl_nurbs_curve* rcvr, Xgl_pt_list* ctrlPts) {
   rcvr->ctrl_pts = *ctrlPts;
}

void xgl_nurbs_curve_set (Xgl_nurbs_curve* rcvr,
	Xgl_pt_list* ctrlPts,
	float* knotVector,
	unsigned long numKnots,
	unsigned long order) {
  rcvr->ctrl_pts = *ctrlPts;
  rcvr->knot_vector = knotVector;
  rcvr->num_knots = numKnots;
  rcvr->order = order;
}


// for Xgl_nurbs_surf
Xgl_nurbs_surf* xgl_nurbs_surf_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_nurbs_surf, count);
}
void xgl_nurbs_surf_delete (Xgl_nurbs_surf* rcvr) {
  delete [] rcvr;
}

Xgl_nurbs_surf* xgl_nurbs_surf_at (Xgl_nurbs_surf* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_nurbs_surf_at_put (Xgl_nurbs_surf* rcvr, fint which, Xgl_nurbs_surf* nurbsSurf) {
  rcvr[which] = *nurbsSurf;
}

Xgl_pt_list* xgl_nurbs_surf_ctrl_pts (Xgl_nurbs_surf* rcvr) {
   return &(rcvr->ctrl_pts);
}
void xgl_nurbs_surf_ctrl_pts (Xgl_nurbs_surf* rcvr, Xgl_pt_list* ctrlPts) {
   rcvr->ctrl_pts = *ctrlPts;
}

void xgl_nurbs_surf_set (Xgl_nurbs_surf* rcvr,
	Xgl_pt_list* ctrlPts,
	float* knotVectorU,
	float* knotVectorV,
	unsigned long numKnotsU,
	unsigned long numKnotsV,
	unsigned long orderU,
	unsigned long orderV) {
  rcvr->ctrl_pts = *ctrlPts;
  rcvr->knot_vector_u = knotVectorU;
  rcvr->knot_vector_v = knotVectorV;
  rcvr->num_knots_u = numKnotsU;
  rcvr->num_knots_v = numKnotsV;
  rcvr->order_u = orderU;
  rcvr->order_v = orderV;
}


// for Xgl_nurbs_surf_simple_geom
Xgl_nurbs_surf_simple_geom* xgl_nurbs_surf_simple_geom_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_nurbs_surf_simple_geom, count);
}
void xgl_nurbs_surf_simple_geom_delete (Xgl_nurbs_surf_simple_geom* rcvr) {
  delete [] rcvr;
}

Xgl_nurbs_surf_simple_geom* xgl_nurbs_surf_simple_geom_at (Xgl_nurbs_surf_simple_geom* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_nurbs_surf_simple_geom_at_put (Xgl_nurbs_surf_simple_geom* rcvr, fint which, Xgl_nurbs_surf_simple_geom* nurbsSurfSimpleGeom) {
  rcvr[which] = *nurbsSurfSimpleGeom;
}

Xgl_pt_f3d* xgl_nurbs_surf_simple_geom_geom_desc_conical_apex (Xgl_nurbs_surf_simple_geom* rcvr) {
   return &(rcvr->geom_desc.conical.apex);
}
void xgl_nurbs_surf_simple_geom_geom_desc_conical_apex (Xgl_nurbs_surf_simple_geom* rcvr, Xgl_pt_f3d* apex) {
   rcvr->geom_desc.conical.apex = *apex;
}

Xgl_pt_f3d* xgl_nurbs_surf_simple_geom_geom_desc_conical_axis_dir (Xgl_nurbs_surf_simple_geom* rcvr) {
   return &(rcvr->geom_desc.conical.axis_dir);
}
void xgl_nurbs_surf_simple_geom_geom_desc_conical_axis_dir (Xgl_nurbs_surf_simple_geom* rcvr, Xgl_pt_f3d* axisDir) {
   rcvr->geom_desc.conical.axis_dir = *axisDir;
}

float xgl_nurbs_surf_simple_geom_geom_desc_conical_cone_angle (Xgl_nurbs_surf_simple_geom* rcvr) {
   return rcvr->geom_desc.conical.cone_angle;
}
void xgl_nurbs_surf_simple_geom_geom_desc_conical_cone_angle (Xgl_nurbs_surf_simple_geom* rcvr, float coneAngle) {
   rcvr->geom_desc.conical.cone_angle = coneAngle;
}

bool xgl_nurbs_surf_simple_geom_geom_desc_conical_norm_flag (Xgl_nurbs_surf_simple_geom* rcvr) {
   return rcvr->geom_desc.conical.norm_flag;
}
void xgl_nurbs_surf_simple_geom_geom_desc_conical_norm_flag (Xgl_nurbs_surf_simple_geom* rcvr, bool normFlag) {
   rcvr->geom_desc.conical.norm_flag = normFlag;
}

Xgl_pt_f3d* xgl_nurbs_surf_simple_geom_geom_desc_cylindrical_axial_pt (Xgl_nurbs_surf_simple_geom* rcvr) {
   return &(rcvr->geom_desc.cylindrical.axial_pt);
}
void xgl_nurbs_surf_simple_geom_geom_desc_cylindrical_axial_pt (Xgl_nurbs_surf_simple_geom* rcvr, Xgl_pt_f3d* axialPt) {
   rcvr->geom_desc.cylindrical.axial_pt = *axialPt;
}

Xgl_pt_f3d* xgl_nurbs_surf_simple_geom_geom_desc_cylindrical_axis_dir (Xgl_nurbs_surf_simple_geom* rcvr) {
   return &(rcvr->geom_desc.cylindrical.axis_dir);
}
void xgl_nurbs_surf_simple_geom_geom_desc_cylindrical_axis_dir (Xgl_nurbs_surf_simple_geom* rcvr, Xgl_pt_f3d* axisDir) {
   rcvr->geom_desc.cylindrical.axis_dir = *axisDir;
}

bool xgl_nurbs_surf_simple_geom_geom_desc_cylindrical_norm_flag (Xgl_nurbs_surf_simple_geom* rcvr) {
   return rcvr->geom_desc.cylindrical.norm_flag;
}
void xgl_nurbs_surf_simple_geom_geom_desc_cylindrical_norm_flag (Xgl_nurbs_surf_simple_geom* rcvr, bool normFlag) {
   rcvr->geom_desc.cylindrical.norm_flag = normFlag;
}

float xgl_nurbs_surf_simple_geom_geom_desc_cylindrical_radius (Xgl_nurbs_surf_simple_geom* rcvr) {
   return rcvr->geom_desc.cylindrical.radius;
}
void xgl_nurbs_surf_simple_geom_geom_desc_cylindrical_radius (Xgl_nurbs_surf_simple_geom* rcvr, float radius) {
   rcvr->geom_desc.cylindrical.radius = radius;
}

Xgl_plane* xgl_nurbs_surf_simple_geom_geom_desc_planar (Xgl_nurbs_surf_simple_geom* rcvr) {
   return &(rcvr->geom_desc.planar);
}
void xgl_nurbs_surf_simple_geom_geom_desc_planar (Xgl_nurbs_surf_simple_geom* rcvr, Xgl_plane* planar) {
   rcvr->geom_desc.planar = *planar;
}

Xgl_pt_f3d* xgl_nurbs_surf_simple_geom_geom_desc_spherical_center (Xgl_nurbs_surf_simple_geom* rcvr) {
   return &(rcvr->geom_desc.spherical.center);
}
void xgl_nurbs_surf_simple_geom_geom_desc_spherical_center (Xgl_nurbs_surf_simple_geom* rcvr, Xgl_pt_f3d* center) {
   rcvr->geom_desc.spherical.center = *center;
}

bool xgl_nurbs_surf_simple_geom_geom_desc_spherical_norm_flag (Xgl_nurbs_surf_simple_geom* rcvr) {
   return rcvr->geom_desc.spherical.norm_flag;
}
void xgl_nurbs_surf_simple_geom_geom_desc_spherical_norm_flag (Xgl_nurbs_surf_simple_geom* rcvr, bool normFlag) {
   rcvr->geom_desc.spherical.norm_flag = normFlag;
}

float xgl_nurbs_surf_simple_geom_geom_desc_spherical_radius (Xgl_nurbs_surf_simple_geom* rcvr) {
   return rcvr->geom_desc.spherical.radius;
}
void xgl_nurbs_surf_simple_geom_geom_desc_spherical_radius (Xgl_nurbs_surf_simple_geom* rcvr, float radius) {
   rcvr->geom_desc.spherical.radius = radius;
}

void xgl_nurbs_surf_simple_geom_set (Xgl_nurbs_surf_simple_geom* rcvr,
	Xgl_pt_f3d* conical_apex,
	Xgl_pt_f3d* conical_axisDir,
	float conical_coneAngle,
	bool conical_normFlag,
	Xgl_nurbs_surf_type surfType) {
  rcvr->geom_desc.conical.apex = *conical_apex;
  rcvr->geom_desc.conical.axis_dir = *conical_axisDir;
  rcvr->geom_desc.conical.cone_angle = conical_coneAngle;
  rcvr->geom_desc.conical.norm_flag = conical_normFlag;
  rcvr->surf_type = surfType;
}

void xgl_nurbs_surf_simple_geom_set (Xgl_nurbs_surf_simple_geom* rcvr,
	Xgl_pt_f3d* cylindrical_axialPt,
	Xgl_pt_f3d* cylindrical_axisDir,
	bool cylindrical_normFlag,
	float cylindrical_radius,
	Xgl_nurbs_surf_type surfType) {
  rcvr->geom_desc.cylindrical.axial_pt = *cylindrical_axialPt;
  rcvr->geom_desc.cylindrical.axis_dir = *cylindrical_axisDir;
  rcvr->geom_desc.cylindrical.norm_flag = cylindrical_normFlag;
  rcvr->geom_desc.cylindrical.radius = cylindrical_radius;
  rcvr->surf_type = surfType;
}

void xgl_nurbs_surf_simple_geom_set (Xgl_nurbs_surf_simple_geom* rcvr,
	Xgl_plane* geom_desc_planar,
	Xgl_nurbs_surf_type surfType) {
  rcvr->geom_desc.planar = *geom_desc_planar;
  rcvr->surf_type = surfType;
}

void xgl_nurbs_surf_simple_geom_set (Xgl_nurbs_surf_simple_geom* rcvr,
	Xgl_pt_f3d* spherical_center,
	bool spherical_normFlag,
	float spherical_radius,
	Xgl_nurbs_surf_type surfType) {
  rcvr->geom_desc.spherical.center = *spherical_center;
  rcvr->geom_desc.spherical.norm_flag = spherical_normFlag;
  rcvr->geom_desc.spherical.radius = spherical_radius;
  rcvr->surf_type = surfType;
}


// for Xgl_obj_desc
Xgl_obj_desc* xgl_obj_desc_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_obj_desc, count);
}
void xgl_obj_desc_delete (Xgl_obj_desc* rcvr) {
  delete [] rcvr;
}

Xgl_obj_desc* xgl_obj_desc_at (Xgl_obj_desc* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_obj_desc_at_put (Xgl_obj_desc* rcvr, fint which, Xgl_obj_desc* objDesc) {
  rcvr[which] = *objDesc;
}

Xgl_object_obj* xgl_obj_desc_accum_buf_raster (Xgl_obj_desc* rcvr) {
   return rcvr->accum_buf.raster;
}
void xgl_obj_desc_accum_buf_raster (Xgl_obj_desc* rcvr, Xgl_object_obj* raster) {
   rcvr->accum_buf.raster = raster;
}

void* xgl_obj_desc_stream_desc (Xgl_obj_desc* rcvr) {
   return rcvr->stream.desc;
}
void xgl_obj_desc_stream_desc (Xgl_obj_desc* rcvr, void* desc) {
   rcvr->stream.desc = desc;
}

char* xgl_obj_desc_stream_name (Xgl_obj_desc* rcvr) {
   return rcvr->stream.name;
}
void xgl_obj_desc_stream_name (Xgl_obj_desc* rcvr, char* name) {
   rcvr->stream.name = name;
}

void* xgl_obj_desc_win_ras_desc (Xgl_obj_desc* rcvr) {
   return rcvr->win_ras.desc;
}
void xgl_obj_desc_win_ras_desc (Xgl_obj_desc* rcvr, void* desc) {
   rcvr->win_ras.desc = desc;
}

Xgl_window_type xgl_obj_desc_win_ras_type (Xgl_obj_desc* rcvr) {
   return rcvr->win_ras.type;
}
void xgl_obj_desc_win_ras_type (Xgl_obj_desc* rcvr, Xgl_window_type type) {
   rcvr->win_ras.type = type;
}


// for Xgl_pick_info
Xgl_pick_info* xgl_pick_info_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pick_info, count);
}
void xgl_pick_info_delete (Xgl_pick_info* rcvr) {
  delete [] rcvr;
}

Xgl_pick_info* xgl_pick_info_at (Xgl_pick_info* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pick_info_at_put (Xgl_pick_info* rcvr, fint which, Xgl_pick_info* pickInfo) {
  rcvr[which] = *pickInfo;
}

void xgl_pick_info_set (Xgl_pick_info* rcvr,
	unsigned long id1,
	unsigned long id2,
	unsigned long vertexFlag) {
  rcvr->id1 = id1;
  rcvr->id2 = id2;
  rcvr->vertex_flag = vertexFlag;
}


// for Xgl_plane
Xgl_plane* xgl_plane_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_plane, count);
}
void xgl_plane_delete (Xgl_plane* rcvr) {
  delete [] rcvr;
}

Xgl_plane* xgl_plane_at (Xgl_plane* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_plane_at_put (Xgl_plane* rcvr, fint which, Xgl_plane* plane) {
  rcvr[which] = *plane;
}

Xgl_pt_d3d* xgl_plane_normal (Xgl_plane* rcvr) {
   return &(rcvr->normal);
}
void xgl_plane_normal (Xgl_plane* rcvr, Xgl_pt_d3d* normal) {
   rcvr->normal = *normal;
}

Xgl_pt_d3d* xgl_plane_pt (Xgl_plane* rcvr) {
   return &(rcvr->pt);
}
void xgl_plane_pt (Xgl_plane* rcvr, Xgl_pt_d3d* pt) {
   rcvr->pt = *pt;
}


// for Xgl_plane_list
Xgl_plane_list* xgl_plane_list_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_plane_list, count);
}
void xgl_plane_list_delete (Xgl_plane_list* rcvr) {
  delete [] rcvr;
}

Xgl_plane_list* xgl_plane_list_at (Xgl_plane_list* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_plane_list_at_put (Xgl_plane_list* rcvr, fint which, Xgl_plane_list* planeList) {
  rcvr[which] = *planeList;
}


// for Xgl_pt
Xgl_pt* xgl_pt_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt, count);
}
void xgl_pt_delete (Xgl_pt* rcvr) {
  delete [] rcvr;
}

Xgl_pt* xgl_pt_at (Xgl_pt* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_at_put (Xgl_pt* rcvr, fint which, Xgl_pt* pt) {
  rcvr[which] = *pt;
}

Xgl_pt_d2d* xgl_pt_pt_d2d (Xgl_pt* rcvr) {
   return rcvr->pt.d2d;
}
void xgl_pt_pt_d2d (Xgl_pt* rcvr, Xgl_pt_d2d* d2d) {
   rcvr->pt.d2d = d2d;
}

Xgl_pt_d3d* xgl_pt_pt_d3d (Xgl_pt* rcvr) {
   return rcvr->pt.d3d;
}
void xgl_pt_pt_d3d (Xgl_pt* rcvr, Xgl_pt_d3d* d3d) {
   rcvr->pt.d3d = d3d;
}

Xgl_pt_f2d* xgl_pt_pt_f2d (Xgl_pt* rcvr) {
   return rcvr->pt.f2d;
}
void xgl_pt_pt_f2d (Xgl_pt* rcvr, Xgl_pt_f2d* f2d) {
   rcvr->pt.f2d = f2d;
}

Xgl_pt_f3d* xgl_pt_pt_f3d (Xgl_pt* rcvr) {
   return rcvr->pt.f3d;
}
void xgl_pt_pt_f3d (Xgl_pt* rcvr, Xgl_pt_f3d* f3d) {
   rcvr->pt.f3d = f3d;
}

Xgl_pt_i2d* xgl_pt_pt_i2d (Xgl_pt* rcvr) {
   return rcvr->pt.i2d;
}
void xgl_pt_pt_i2d (Xgl_pt* rcvr, Xgl_pt_i2d* i2d) {
   rcvr->pt.i2d = i2d;
}

void xgl_pt_set (Xgl_pt* rcvr,
	Xgl_pt_d2d* d2d,
	Xgl_pt_type ptType) {
  rcvr->pt.d2d = d2d;
  rcvr->pt_type = ptType;
}

void xgl_pt_set (Xgl_pt* rcvr,
	Xgl_pt_d3d* d3d,
	Xgl_pt_type ptType) {
  rcvr->pt.d3d = d3d;
  rcvr->pt_type = ptType;
}

void xgl_pt_set (Xgl_pt* rcvr,
	Xgl_pt_f2d* f2d,
	Xgl_pt_type ptType) {
  rcvr->pt.f2d = f2d;
  rcvr->pt_type = ptType;
}

void xgl_pt_set (Xgl_pt* rcvr,
	Xgl_pt_f3d* f3d,
	Xgl_pt_type ptType) {
  rcvr->pt.f3d = f3d;
  rcvr->pt_type = ptType;
}

void xgl_pt_set (Xgl_pt* rcvr,
	Xgl_pt_i2d* i2d,
	Xgl_pt_type ptType) {
  rcvr->pt.i2d = i2d;
  rcvr->pt_type = ptType;
}


// for Xgl_pt_color_d2d
Xgl_pt_color_d2d* xgl_pt_color_d2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_color_d2d, count);
}
void xgl_pt_color_d2d_delete (Xgl_pt_color_d2d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_color_d2d* xgl_pt_color_d2d_at (Xgl_pt_color_d2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_color_d2d_at_put (Xgl_pt_color_d2d* rcvr, fint which, Xgl_pt_color_d2d* ptColorD2d) {
  rcvr[which] = *ptColorD2d;
}

float xgl_pt_color_d2d_color_gray (Xgl_pt_color_d2d* rcvr) {
   return rcvr->color.gray;
}
void xgl_pt_color_d2d_color_gray (Xgl_pt_color_d2d* rcvr, float gray) {
   rcvr->color.gray = gray;
}

unsigned long xgl_pt_color_d2d_color_index (Xgl_pt_color_d2d* rcvr) {
   return rcvr->color.index;
}
void xgl_pt_color_d2d_color_index (Xgl_pt_color_d2d* rcvr, unsigned long index) {
   rcvr->color.index = index;
}

Xgl_color_rgb* xgl_pt_color_d2d_color_rgb (Xgl_pt_color_d2d* rcvr) {
   return &(rcvr->color.rgb);
}
void xgl_pt_color_d2d_color_rgb (Xgl_pt_color_d2d* rcvr, Xgl_color_rgb* rgb) {
   rcvr->color.rgb = *rgb;
}

unsigned long xgl_pt_color_d2d_color_z (Xgl_pt_color_d2d* rcvr) {
   return rcvr->color.z;
}
void xgl_pt_color_d2d_color_z (Xgl_pt_color_d2d* rcvr, unsigned long z) {
   rcvr->color.z = z;
}

void xgl_pt_color_d2d_set (Xgl_pt_color_d2d* rcvr,
	float color_gray,
	double x,
	double y) {
  rcvr->color.gray = color_gray;
  rcvr->x = x;
  rcvr->y = y;
}

void xgl_pt_color_d2d_set (Xgl_pt_color_d2d* rcvr,
	unsigned long color_index,
	double x,
	double y) {
  rcvr->color.index = color_index;
  rcvr->x = x;
  rcvr->y = y;
}

void xgl_pt_color_d2d_set (Xgl_pt_color_d2d* rcvr,
	Xgl_color_rgb* color_rgb,
	double x,
	double y) {
  rcvr->color.rgb = *color_rgb;
  rcvr->x = x;
  rcvr->y = y;
}


// for Xgl_pt_color_d3d
Xgl_pt_color_d3d* xgl_pt_color_d3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_color_d3d, count);
}
void xgl_pt_color_d3d_delete (Xgl_pt_color_d3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_color_d3d* xgl_pt_color_d3d_at (Xgl_pt_color_d3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_color_d3d_at_put (Xgl_pt_color_d3d* rcvr, fint which, Xgl_pt_color_d3d* ptColorD3d) {
  rcvr[which] = *ptColorD3d;
}

float xgl_pt_color_d3d_color_gray (Xgl_pt_color_d3d* rcvr) {
   return rcvr->color.gray;
}
void xgl_pt_color_d3d_color_gray (Xgl_pt_color_d3d* rcvr, float gray) {
   rcvr->color.gray = gray;
}

unsigned long xgl_pt_color_d3d_color_index (Xgl_pt_color_d3d* rcvr) {
   return rcvr->color.index;
}
void xgl_pt_color_d3d_color_index (Xgl_pt_color_d3d* rcvr, unsigned long index) {
   rcvr->color.index = index;
}

Xgl_color_rgb* xgl_pt_color_d3d_color_rgb (Xgl_pt_color_d3d* rcvr) {
   return &(rcvr->color.rgb);
}
void xgl_pt_color_d3d_color_rgb (Xgl_pt_color_d3d* rcvr, Xgl_color_rgb* rgb) {
   rcvr->color.rgb = *rgb;
}

unsigned long xgl_pt_color_d3d_color_z (Xgl_pt_color_d3d* rcvr) {
   return rcvr->color.z;
}
void xgl_pt_color_d3d_color_z (Xgl_pt_color_d3d* rcvr, unsigned long z) {
   rcvr->color.z = z;
}

void xgl_pt_color_d3d_set (Xgl_pt_color_d3d* rcvr,
	float color_gray,
	double x,
	double y,
	double z) {
  rcvr->color.gray = color_gray;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_d3d_set (Xgl_pt_color_d3d* rcvr,
	unsigned long color_index,
	double x,
	double y,
	double z) {
  rcvr->color.index = color_index;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_d3d_set (Xgl_pt_color_d3d* rcvr,
	Xgl_color_rgb* color_rgb,
	double x,
	double y,
	double z) {
  rcvr->color.rgb = *color_rgb;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_color_data_f3d
Xgl_pt_color_data_f3d* xgl_pt_color_data_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_color_data_f3d, count);
}
void xgl_pt_color_data_f3d_delete (Xgl_pt_color_data_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_color_data_f3d* xgl_pt_color_data_f3d_at (Xgl_pt_color_data_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_color_data_f3d_at_put (Xgl_pt_color_data_f3d* rcvr, fint which, Xgl_pt_color_data_f3d* ptColorDataF3d) {
  rcvr[which] = *ptColorDataF3d;
}

float xgl_pt_color_data_f3d_color_gray (Xgl_pt_color_data_f3d* rcvr) {
   return rcvr->color.gray;
}
void xgl_pt_color_data_f3d_color_gray (Xgl_pt_color_data_f3d* rcvr, float gray) {
   rcvr->color.gray = gray;
}

unsigned long xgl_pt_color_data_f3d_color_index (Xgl_pt_color_data_f3d* rcvr) {
   return rcvr->color.index;
}
void xgl_pt_color_data_f3d_color_index (Xgl_pt_color_data_f3d* rcvr, unsigned long index) {
   rcvr->color.index = index;
}

Xgl_color_rgb* xgl_pt_color_data_f3d_color_rgb (Xgl_pt_color_data_f3d* rcvr) {
   return &(rcvr->color.rgb);
}
void xgl_pt_color_data_f3d_color_rgb (Xgl_pt_color_data_f3d* rcvr, Xgl_color_rgb* rgb) {
   rcvr->color.rgb = *rgb;
}

unsigned long xgl_pt_color_data_f3d_color_z (Xgl_pt_color_data_f3d* rcvr) {
   return rcvr->color.z;
}
void xgl_pt_color_data_f3d_color_z (Xgl_pt_color_data_f3d* rcvr, unsigned long z) {
   rcvr->color.z = z;
}

float* xgl_pt_color_data_f3d_data (Xgl_pt_color_data_f3d* rcvr) {
   return rcvr->data;
}
void xgl_pt_color_data_f3d_set (Xgl_pt_color_data_f3d* rcvr,
	float color_gray,
	float x,
	float y,
	float z) {
  rcvr->color.gray = color_gray;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_data_f3d_set (Xgl_pt_color_data_f3d* rcvr,
	unsigned long color_index,
	float x,
	float y,
	float z) {
  rcvr->color.index = color_index;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_data_f3d_set (Xgl_pt_color_data_f3d* rcvr,
	Xgl_color_rgb* color_rgb,
	float x,
	float y,
	float z) {
  rcvr->color.rgb = *color_rgb;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_color_f2d
Xgl_pt_color_f2d* xgl_pt_color_f2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_color_f2d, count);
}
void xgl_pt_color_f2d_delete (Xgl_pt_color_f2d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_color_f2d* xgl_pt_color_f2d_at (Xgl_pt_color_f2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_color_f2d_at_put (Xgl_pt_color_f2d* rcvr, fint which, Xgl_pt_color_f2d* ptColorF2d) {
  rcvr[which] = *ptColorF2d;
}

float xgl_pt_color_f2d_color_gray (Xgl_pt_color_f2d* rcvr) {
   return rcvr->color.gray;
}
void xgl_pt_color_f2d_color_gray (Xgl_pt_color_f2d* rcvr, float gray) {
   rcvr->color.gray = gray;
}

unsigned long xgl_pt_color_f2d_color_index (Xgl_pt_color_f2d* rcvr) {
   return rcvr->color.index;
}
void xgl_pt_color_f2d_color_index (Xgl_pt_color_f2d* rcvr, unsigned long index) {
   rcvr->color.index = index;
}

Xgl_color_rgb* xgl_pt_color_f2d_color_rgb (Xgl_pt_color_f2d* rcvr) {
   return &(rcvr->color.rgb);
}
void xgl_pt_color_f2d_color_rgb (Xgl_pt_color_f2d* rcvr, Xgl_color_rgb* rgb) {
   rcvr->color.rgb = *rgb;
}

unsigned long xgl_pt_color_f2d_color_z (Xgl_pt_color_f2d* rcvr) {
   return rcvr->color.z;
}
void xgl_pt_color_f2d_color_z (Xgl_pt_color_f2d* rcvr, unsigned long z) {
   rcvr->color.z = z;
}

void xgl_pt_color_f2d_set (Xgl_pt_color_f2d* rcvr,
	float color_gray,
	float x,
	float y) {
  rcvr->color.gray = color_gray;
  rcvr->x = x;
  rcvr->y = y;
}

void xgl_pt_color_f2d_set (Xgl_pt_color_f2d* rcvr,
	unsigned long color_index,
	float x,
	float y) {
  rcvr->color.index = color_index;
  rcvr->x = x;
  rcvr->y = y;
}

void xgl_pt_color_f2d_set (Xgl_pt_color_f2d* rcvr,
	Xgl_color_rgb* color_rgb,
	float x,
	float y) {
  rcvr->color.rgb = *color_rgb;
  rcvr->x = x;
  rcvr->y = y;
}


// for Xgl_pt_color_f3d
Xgl_pt_color_f3d* xgl_pt_color_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_color_f3d, count);
}
void xgl_pt_color_f3d_delete (Xgl_pt_color_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_color_f3d* xgl_pt_color_f3d_at (Xgl_pt_color_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_color_f3d_at_put (Xgl_pt_color_f3d* rcvr, fint which, Xgl_pt_color_f3d* ptColorF3d) {
  rcvr[which] = *ptColorF3d;
}

float xgl_pt_color_f3d_color_gray (Xgl_pt_color_f3d* rcvr) {
   return rcvr->color.gray;
}
void xgl_pt_color_f3d_color_gray (Xgl_pt_color_f3d* rcvr, float gray) {
   rcvr->color.gray = gray;
}

unsigned long xgl_pt_color_f3d_color_index (Xgl_pt_color_f3d* rcvr) {
   return rcvr->color.index;
}
void xgl_pt_color_f3d_color_index (Xgl_pt_color_f3d* rcvr, unsigned long index) {
   rcvr->color.index = index;
}

Xgl_color_rgb* xgl_pt_color_f3d_color_rgb (Xgl_pt_color_f3d* rcvr) {
   return &(rcvr->color.rgb);
}
void xgl_pt_color_f3d_color_rgb (Xgl_pt_color_f3d* rcvr, Xgl_color_rgb* rgb) {
   rcvr->color.rgb = *rgb;
}

unsigned long xgl_pt_color_f3d_color_z (Xgl_pt_color_f3d* rcvr) {
   return rcvr->color.z;
}
void xgl_pt_color_f3d_color_z (Xgl_pt_color_f3d* rcvr, unsigned long z) {
   rcvr->color.z = z;
}

void xgl_pt_color_f3d_set (Xgl_pt_color_f3d* rcvr,
	float color_gray,
	float x,
	float y,
	float z) {
  rcvr->color.gray = color_gray;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_f3d_set (Xgl_pt_color_f3d* rcvr,
	unsigned long color_index,
	float x,
	float y,
	float z) {
  rcvr->color.index = color_index;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_f3d_set (Xgl_pt_color_f3d* rcvr,
	Xgl_color_rgb* color_rgb,
	float x,
	float y,
	float z) {
  rcvr->color.rgb = *color_rgb;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_color_flag_d3d
Xgl_pt_color_flag_d3d* xgl_pt_color_flag_d3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_color_flag_d3d, count);
}
void xgl_pt_color_flag_d3d_delete (Xgl_pt_color_flag_d3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_color_flag_d3d* xgl_pt_color_flag_d3d_at (Xgl_pt_color_flag_d3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_color_flag_d3d_at_put (Xgl_pt_color_flag_d3d* rcvr, fint which, Xgl_pt_color_flag_d3d* ptColorFlagD3d) {
  rcvr[which] = *ptColorFlagD3d;
}

float xgl_pt_color_flag_d3d_color_gray (Xgl_pt_color_flag_d3d* rcvr) {
   return rcvr->color.gray;
}
void xgl_pt_color_flag_d3d_color_gray (Xgl_pt_color_flag_d3d* rcvr, float gray) {
   rcvr->color.gray = gray;
}

unsigned long xgl_pt_color_flag_d3d_color_index (Xgl_pt_color_flag_d3d* rcvr) {
   return rcvr->color.index;
}
void xgl_pt_color_flag_d3d_color_index (Xgl_pt_color_flag_d3d* rcvr, unsigned long index) {
   rcvr->color.index = index;
}

Xgl_color_rgb* xgl_pt_color_flag_d3d_color_rgb (Xgl_pt_color_flag_d3d* rcvr) {
   return &(rcvr->color.rgb);
}
void xgl_pt_color_flag_d3d_color_rgb (Xgl_pt_color_flag_d3d* rcvr, Xgl_color_rgb* rgb) {
   rcvr->color.rgb = *rgb;
}

unsigned long xgl_pt_color_flag_d3d_color_z (Xgl_pt_color_flag_d3d* rcvr) {
   return rcvr->color.z;
}
void xgl_pt_color_flag_d3d_color_z (Xgl_pt_color_flag_d3d* rcvr, unsigned long z) {
   rcvr->color.z = z;
}

void xgl_pt_color_flag_d3d_set (Xgl_pt_color_flag_d3d* rcvr,
	float color_gray,
	unsigned long flag,
	double x,
	double y,
	double z) {
  rcvr->color.gray = color_gray;
  rcvr->flag = flag;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_flag_d3d_set (Xgl_pt_color_flag_d3d* rcvr,
	unsigned long color_index,
	unsigned long flag,
	double x,
	double y,
	double z) {
  rcvr->color.index = color_index;
  rcvr->flag = flag;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_flag_d3d_set (Xgl_pt_color_flag_d3d* rcvr,
	Xgl_color_rgb* color_rgb,
	unsigned long flag,
	double x,
	double y,
	double z) {
  rcvr->color.rgb = *color_rgb;
  rcvr->flag = flag;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_color_flag_data_f3d
Xgl_pt_color_flag_data_f3d* xgl_pt_color_flag_data_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_color_flag_data_f3d, count);
}
void xgl_pt_color_flag_data_f3d_delete (Xgl_pt_color_flag_data_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_color_flag_data_f3d* xgl_pt_color_flag_data_f3d_at (Xgl_pt_color_flag_data_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_color_flag_data_f3d_at_put (Xgl_pt_color_flag_data_f3d* rcvr, fint which, Xgl_pt_color_flag_data_f3d* ptColorFlagDataF3d) {
  rcvr[which] = *ptColorFlagDataF3d;
}

float xgl_pt_color_flag_data_f3d_color_gray (Xgl_pt_color_flag_data_f3d* rcvr) {
   return rcvr->color.gray;
}
void xgl_pt_color_flag_data_f3d_color_gray (Xgl_pt_color_flag_data_f3d* rcvr, float gray) {
   rcvr->color.gray = gray;
}

unsigned long xgl_pt_color_flag_data_f3d_color_index (Xgl_pt_color_flag_data_f3d* rcvr) {
   return rcvr->color.index;
}
void xgl_pt_color_flag_data_f3d_color_index (Xgl_pt_color_flag_data_f3d* rcvr, unsigned long index) {
   rcvr->color.index = index;
}

Xgl_color_rgb* xgl_pt_color_flag_data_f3d_color_rgb (Xgl_pt_color_flag_data_f3d* rcvr) {
   return &(rcvr->color.rgb);
}
void xgl_pt_color_flag_data_f3d_color_rgb (Xgl_pt_color_flag_data_f3d* rcvr, Xgl_color_rgb* rgb) {
   rcvr->color.rgb = *rgb;
}

unsigned long xgl_pt_color_flag_data_f3d_color_z (Xgl_pt_color_flag_data_f3d* rcvr) {
   return rcvr->color.z;
}
void xgl_pt_color_flag_data_f3d_color_z (Xgl_pt_color_flag_data_f3d* rcvr, unsigned long z) {
   rcvr->color.z = z;
}

float* xgl_pt_color_flag_data_f3d_data (Xgl_pt_color_flag_data_f3d* rcvr) {
   return rcvr->data;
}
void xgl_pt_color_flag_data_f3d_set (Xgl_pt_color_flag_data_f3d* rcvr,
	float color_gray,
	unsigned long flag,
	float x,
	float y,
	float z) {
  rcvr->color.gray = color_gray;
  rcvr->flag = flag;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_flag_data_f3d_set (Xgl_pt_color_flag_data_f3d* rcvr,
	unsigned long color_index,
	unsigned long flag,
	float x,
	float y,
	float z) {
  rcvr->color.index = color_index;
  rcvr->flag = flag;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_flag_data_f3d_set (Xgl_pt_color_flag_data_f3d* rcvr,
	Xgl_color_rgb* color_rgb,
	unsigned long flag,
	float x,
	float y,
	float z) {
  rcvr->color.rgb = *color_rgb;
  rcvr->flag = flag;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_color_flag_f3d
Xgl_pt_color_flag_f3d* xgl_pt_color_flag_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_color_flag_f3d, count);
}
void xgl_pt_color_flag_f3d_delete (Xgl_pt_color_flag_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_color_flag_f3d* xgl_pt_color_flag_f3d_at (Xgl_pt_color_flag_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_color_flag_f3d_at_put (Xgl_pt_color_flag_f3d* rcvr, fint which, Xgl_pt_color_flag_f3d* ptColorFlagF3d) {
  rcvr[which] = *ptColorFlagF3d;
}

float xgl_pt_color_flag_f3d_color_gray (Xgl_pt_color_flag_f3d* rcvr) {
   return rcvr->color.gray;
}
void xgl_pt_color_flag_f3d_color_gray (Xgl_pt_color_flag_f3d* rcvr, float gray) {
   rcvr->color.gray = gray;
}

unsigned long xgl_pt_color_flag_f3d_color_index (Xgl_pt_color_flag_f3d* rcvr) {
   return rcvr->color.index;
}
void xgl_pt_color_flag_f3d_color_index (Xgl_pt_color_flag_f3d* rcvr, unsigned long index) {
   rcvr->color.index = index;
}

Xgl_color_rgb* xgl_pt_color_flag_f3d_color_rgb (Xgl_pt_color_flag_f3d* rcvr) {
   return &(rcvr->color.rgb);
}
void xgl_pt_color_flag_f3d_color_rgb (Xgl_pt_color_flag_f3d* rcvr, Xgl_color_rgb* rgb) {
   rcvr->color.rgb = *rgb;
}

unsigned long xgl_pt_color_flag_f3d_color_z (Xgl_pt_color_flag_f3d* rcvr) {
   return rcvr->color.z;
}
void xgl_pt_color_flag_f3d_color_z (Xgl_pt_color_flag_f3d* rcvr, unsigned long z) {
   rcvr->color.z = z;
}

void xgl_pt_color_flag_f3d_set (Xgl_pt_color_flag_f3d* rcvr,
	float color_gray,
	unsigned long flag,
	float x,
	float y,
	float z) {
  rcvr->color.gray = color_gray;
  rcvr->flag = flag;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_flag_f3d_set (Xgl_pt_color_flag_f3d* rcvr,
	unsigned long color_index,
	unsigned long flag,
	float x,
	float y,
	float z) {
  rcvr->color.index = color_index;
  rcvr->flag = flag;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_flag_f3d_set (Xgl_pt_color_flag_f3d* rcvr,
	Xgl_color_rgb* color_rgb,
	unsigned long flag,
	float x,
	float y,
	float z) {
  rcvr->color.rgb = *color_rgb;
  rcvr->flag = flag;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_color_i2d
Xgl_pt_color_i2d* xgl_pt_color_i2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_color_i2d, count);
}
void xgl_pt_color_i2d_delete (Xgl_pt_color_i2d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_color_i2d* xgl_pt_color_i2d_at (Xgl_pt_color_i2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_color_i2d_at_put (Xgl_pt_color_i2d* rcvr, fint which, Xgl_pt_color_i2d* ptColorI2d) {
  rcvr[which] = *ptColorI2d;
}

float xgl_pt_color_i2d_color_gray (Xgl_pt_color_i2d* rcvr) {
   return rcvr->color.gray;
}
void xgl_pt_color_i2d_color_gray (Xgl_pt_color_i2d* rcvr, float gray) {
   rcvr->color.gray = gray;
}

unsigned long xgl_pt_color_i2d_color_index (Xgl_pt_color_i2d* rcvr) {
   return rcvr->color.index;
}
void xgl_pt_color_i2d_color_index (Xgl_pt_color_i2d* rcvr, unsigned long index) {
   rcvr->color.index = index;
}

Xgl_color_rgb* xgl_pt_color_i2d_color_rgb (Xgl_pt_color_i2d* rcvr) {
   return &(rcvr->color.rgb);
}
void xgl_pt_color_i2d_color_rgb (Xgl_pt_color_i2d* rcvr, Xgl_color_rgb* rgb) {
   rcvr->color.rgb = *rgb;
}

unsigned long xgl_pt_color_i2d_color_z (Xgl_pt_color_i2d* rcvr) {
   return rcvr->color.z;
}
void xgl_pt_color_i2d_color_z (Xgl_pt_color_i2d* rcvr, unsigned long z) {
   rcvr->color.z = z;
}

void xgl_pt_color_i2d_set (Xgl_pt_color_i2d* rcvr,
	float color_gray,
	long x,
	long y) {
  rcvr->color.gray = color_gray;
  rcvr->x = x;
  rcvr->y = y;
}

void xgl_pt_color_i2d_set (Xgl_pt_color_i2d* rcvr,
	unsigned long color_index,
	long x,
	long y) {
  rcvr->color.index = color_index;
  rcvr->x = x;
  rcvr->y = y;
}

void xgl_pt_color_i2d_set (Xgl_pt_color_i2d* rcvr,
	Xgl_color_rgb* color_rgb,
	long x,
	long y) {
  rcvr->color.rgb = *color_rgb;
  rcvr->x = x;
  rcvr->y = y;
}


// for Xgl_pt_color_normal_d3d
Xgl_pt_color_normal_d3d* xgl_pt_color_normal_d3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_color_normal_d3d, count);
}
void xgl_pt_color_normal_d3d_delete (Xgl_pt_color_normal_d3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_color_normal_d3d* xgl_pt_color_normal_d3d_at (Xgl_pt_color_normal_d3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_color_normal_d3d_at_put (Xgl_pt_color_normal_d3d* rcvr, fint which, Xgl_pt_color_normal_d3d* ptColorNormalD3d) {
  rcvr[which] = *ptColorNormalD3d;
}

float xgl_pt_color_normal_d3d_color_gray (Xgl_pt_color_normal_d3d* rcvr) {
   return rcvr->color.gray;
}
void xgl_pt_color_normal_d3d_color_gray (Xgl_pt_color_normal_d3d* rcvr, float gray) {
   rcvr->color.gray = gray;
}

unsigned long xgl_pt_color_normal_d3d_color_index (Xgl_pt_color_normal_d3d* rcvr) {
   return rcvr->color.index;
}
void xgl_pt_color_normal_d3d_color_index (Xgl_pt_color_normal_d3d* rcvr, unsigned long index) {
   rcvr->color.index = index;
}

Xgl_color_rgb* xgl_pt_color_normal_d3d_color_rgb (Xgl_pt_color_normal_d3d* rcvr) {
   return &(rcvr->color.rgb);
}
void xgl_pt_color_normal_d3d_color_rgb (Xgl_pt_color_normal_d3d* rcvr, Xgl_color_rgb* rgb) {
   rcvr->color.rgb = *rgb;
}

unsigned long xgl_pt_color_normal_d3d_color_z (Xgl_pt_color_normal_d3d* rcvr) {
   return rcvr->color.z;
}
void xgl_pt_color_normal_d3d_color_z (Xgl_pt_color_normal_d3d* rcvr, unsigned long z) {
   rcvr->color.z = z;
}

Xgl_pt_f3d* xgl_pt_color_normal_d3d_normal (Xgl_pt_color_normal_d3d* rcvr) {
   return &(rcvr->normal);
}
void xgl_pt_color_normal_d3d_normal (Xgl_pt_color_normal_d3d* rcvr, Xgl_pt_f3d* normal) {
   rcvr->normal = *normal;
}

void xgl_pt_color_normal_d3d_set (Xgl_pt_color_normal_d3d* rcvr,
	float color_gray,
	Xgl_pt_f3d* normal,
	double x,
	double y,
	double z) {
  rcvr->color.gray = color_gray;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_normal_d3d_set (Xgl_pt_color_normal_d3d* rcvr,
	unsigned long color_index,
	Xgl_pt_f3d* normal,
	double x,
	double y,
	double z) {
  rcvr->color.index = color_index;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_normal_d3d_set (Xgl_pt_color_normal_d3d* rcvr,
	Xgl_color_rgb* color_rgb,
	Xgl_pt_f3d* normal,
	double x,
	double y,
	double z) {
  rcvr->color.rgb = *color_rgb;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_color_normal_data_f3d
Xgl_pt_color_normal_data_f3d* xgl_pt_color_normal_data_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_color_normal_data_f3d, count);
}
void xgl_pt_color_normal_data_f3d_delete (Xgl_pt_color_normal_data_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_color_normal_data_f3d* xgl_pt_color_normal_data_f3d_at (Xgl_pt_color_normal_data_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_color_normal_data_f3d_at_put (Xgl_pt_color_normal_data_f3d* rcvr, fint which, Xgl_pt_color_normal_data_f3d* ptColorNormalDataF3d) {
  rcvr[which] = *ptColorNormalDataF3d;
}

float xgl_pt_color_normal_data_f3d_color_gray (Xgl_pt_color_normal_data_f3d* rcvr) {
   return rcvr->color.gray;
}
void xgl_pt_color_normal_data_f3d_color_gray (Xgl_pt_color_normal_data_f3d* rcvr, float gray) {
   rcvr->color.gray = gray;
}

unsigned long xgl_pt_color_normal_data_f3d_color_index (Xgl_pt_color_normal_data_f3d* rcvr) {
   return rcvr->color.index;
}
void xgl_pt_color_normal_data_f3d_color_index (Xgl_pt_color_normal_data_f3d* rcvr, unsigned long index) {
   rcvr->color.index = index;
}

Xgl_color_rgb* xgl_pt_color_normal_data_f3d_color_rgb (Xgl_pt_color_normal_data_f3d* rcvr) {
   return &(rcvr->color.rgb);
}
void xgl_pt_color_normal_data_f3d_color_rgb (Xgl_pt_color_normal_data_f3d* rcvr, Xgl_color_rgb* rgb) {
   rcvr->color.rgb = *rgb;
}

unsigned long xgl_pt_color_normal_data_f3d_color_z (Xgl_pt_color_normal_data_f3d* rcvr) {
   return rcvr->color.z;
}
void xgl_pt_color_normal_data_f3d_color_z (Xgl_pt_color_normal_data_f3d* rcvr, unsigned long z) {
   rcvr->color.z = z;
}

float* xgl_pt_color_normal_data_f3d_data (Xgl_pt_color_normal_data_f3d* rcvr) {
   return rcvr->data;
}
Xgl_pt_f3d* xgl_pt_color_normal_data_f3d_normal (Xgl_pt_color_normal_data_f3d* rcvr) {
   return &(rcvr->normal);
}
void xgl_pt_color_normal_data_f3d_normal (Xgl_pt_color_normal_data_f3d* rcvr, Xgl_pt_f3d* normal) {
   rcvr->normal = *normal;
}

void xgl_pt_color_normal_data_f3d_set (Xgl_pt_color_normal_data_f3d* rcvr,
	float color_gray,
	Xgl_pt_f3d* normal,
	float x,
	float y,
	float z) {
  rcvr->color.gray = color_gray;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_normal_data_f3d_set (Xgl_pt_color_normal_data_f3d* rcvr,
	unsigned long color_index,
	Xgl_pt_f3d* normal,
	float x,
	float y,
	float z) {
  rcvr->color.index = color_index;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_normal_data_f3d_set (Xgl_pt_color_normal_data_f3d* rcvr,
	Xgl_color_rgb* color_rgb,
	Xgl_pt_f3d* normal,
	float x,
	float y,
	float z) {
  rcvr->color.rgb = *color_rgb;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_color_normal_f3d
Xgl_pt_color_normal_f3d* xgl_pt_color_normal_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_color_normal_f3d, count);
}
void xgl_pt_color_normal_f3d_delete (Xgl_pt_color_normal_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_color_normal_f3d* xgl_pt_color_normal_f3d_at (Xgl_pt_color_normal_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_color_normal_f3d_at_put (Xgl_pt_color_normal_f3d* rcvr, fint which, Xgl_pt_color_normal_f3d* ptColorNormalF3d) {
  rcvr[which] = *ptColorNormalF3d;
}

float xgl_pt_color_normal_f3d_color_gray (Xgl_pt_color_normal_f3d* rcvr) {
   return rcvr->color.gray;
}
void xgl_pt_color_normal_f3d_color_gray (Xgl_pt_color_normal_f3d* rcvr, float gray) {
   rcvr->color.gray = gray;
}

unsigned long xgl_pt_color_normal_f3d_color_index (Xgl_pt_color_normal_f3d* rcvr) {
   return rcvr->color.index;
}
void xgl_pt_color_normal_f3d_color_index (Xgl_pt_color_normal_f3d* rcvr, unsigned long index) {
   rcvr->color.index = index;
}

Xgl_color_rgb* xgl_pt_color_normal_f3d_color_rgb (Xgl_pt_color_normal_f3d* rcvr) {
   return &(rcvr->color.rgb);
}
void xgl_pt_color_normal_f3d_color_rgb (Xgl_pt_color_normal_f3d* rcvr, Xgl_color_rgb* rgb) {
   rcvr->color.rgb = *rgb;
}

unsigned long xgl_pt_color_normal_f3d_color_z (Xgl_pt_color_normal_f3d* rcvr) {
   return rcvr->color.z;
}
void xgl_pt_color_normal_f3d_color_z (Xgl_pt_color_normal_f3d* rcvr, unsigned long z) {
   rcvr->color.z = z;
}

Xgl_pt_f3d* xgl_pt_color_normal_f3d_normal (Xgl_pt_color_normal_f3d* rcvr) {
   return &(rcvr->normal);
}
void xgl_pt_color_normal_f3d_normal (Xgl_pt_color_normal_f3d* rcvr, Xgl_pt_f3d* normal) {
   rcvr->normal = *normal;
}

void xgl_pt_color_normal_f3d_set (Xgl_pt_color_normal_f3d* rcvr,
	float color_gray,
	Xgl_pt_f3d* normal,
	float x,
	float y,
	float z) {
  rcvr->color.gray = color_gray;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_normal_f3d_set (Xgl_pt_color_normal_f3d* rcvr,
	unsigned long color_index,
	Xgl_pt_f3d* normal,
	float x,
	float y,
	float z) {
  rcvr->color.index = color_index;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_normal_f3d_set (Xgl_pt_color_normal_f3d* rcvr,
	Xgl_color_rgb* color_rgb,
	Xgl_pt_f3d* normal,
	float x,
	float y,
	float z) {
  rcvr->color.rgb = *color_rgb;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_color_normal_flag_d3d
Xgl_pt_color_normal_flag_d3d* xgl_pt_color_normal_flag_d3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_color_normal_flag_d3d, count);
}
void xgl_pt_color_normal_flag_d3d_delete (Xgl_pt_color_normal_flag_d3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_color_normal_flag_d3d* xgl_pt_color_normal_flag_d3d_at (Xgl_pt_color_normal_flag_d3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_color_normal_flag_d3d_at_put (Xgl_pt_color_normal_flag_d3d* rcvr, fint which, Xgl_pt_color_normal_flag_d3d* ptColorNormalFlagD3d) {
  rcvr[which] = *ptColorNormalFlagD3d;
}

float xgl_pt_color_normal_flag_d3d_color_gray (Xgl_pt_color_normal_flag_d3d* rcvr) {
   return rcvr->color.gray;
}
void xgl_pt_color_normal_flag_d3d_color_gray (Xgl_pt_color_normal_flag_d3d* rcvr, float gray) {
   rcvr->color.gray = gray;
}

unsigned long xgl_pt_color_normal_flag_d3d_color_index (Xgl_pt_color_normal_flag_d3d* rcvr) {
   return rcvr->color.index;
}
void xgl_pt_color_normal_flag_d3d_color_index (Xgl_pt_color_normal_flag_d3d* rcvr, unsigned long index) {
   rcvr->color.index = index;
}

Xgl_color_rgb* xgl_pt_color_normal_flag_d3d_color_rgb (Xgl_pt_color_normal_flag_d3d* rcvr) {
   return &(rcvr->color.rgb);
}
void xgl_pt_color_normal_flag_d3d_color_rgb (Xgl_pt_color_normal_flag_d3d* rcvr, Xgl_color_rgb* rgb) {
   rcvr->color.rgb = *rgb;
}

unsigned long xgl_pt_color_normal_flag_d3d_color_z (Xgl_pt_color_normal_flag_d3d* rcvr) {
   return rcvr->color.z;
}
void xgl_pt_color_normal_flag_d3d_color_z (Xgl_pt_color_normal_flag_d3d* rcvr, unsigned long z) {
   rcvr->color.z = z;
}

Xgl_pt_f3d* xgl_pt_color_normal_flag_d3d_normal (Xgl_pt_color_normal_flag_d3d* rcvr) {
   return &(rcvr->normal);
}
void xgl_pt_color_normal_flag_d3d_normal (Xgl_pt_color_normal_flag_d3d* rcvr, Xgl_pt_f3d* normal) {
   rcvr->normal = *normal;
}

void xgl_pt_color_normal_flag_d3d_set (Xgl_pt_color_normal_flag_d3d* rcvr,
	float color_gray,
	unsigned long flag,
	Xgl_pt_f3d* normal,
	double x,
	double y,
	double z) {
  rcvr->color.gray = color_gray;
  rcvr->flag = flag;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_normal_flag_d3d_set (Xgl_pt_color_normal_flag_d3d* rcvr,
	unsigned long color_index,
	unsigned long flag,
	Xgl_pt_f3d* normal,
	double x,
	double y,
	double z) {
  rcvr->color.index = color_index;
  rcvr->flag = flag;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_normal_flag_d3d_set (Xgl_pt_color_normal_flag_d3d* rcvr,
	Xgl_color_rgb* color_rgb,
	unsigned long flag,
	Xgl_pt_f3d* normal,
	double x,
	double y,
	double z) {
  rcvr->color.rgb = *color_rgb;
  rcvr->flag = flag;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_color_normal_flag_data_f3d
Xgl_pt_color_normal_flag_data_f3d* xgl_pt_color_normal_flag_data_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_color_normal_flag_data_f3d, count);
}
void xgl_pt_color_normal_flag_data_f3d_delete (Xgl_pt_color_normal_flag_data_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_color_normal_flag_data_f3d* xgl_pt_color_normal_flag_data_f3d_at (Xgl_pt_color_normal_flag_data_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_color_normal_flag_data_f3d_at_put (Xgl_pt_color_normal_flag_data_f3d* rcvr, fint which, Xgl_pt_color_normal_flag_data_f3d* ptColorNormalFlagDataF3d) {
  rcvr[which] = *ptColorNormalFlagDataF3d;
}

float xgl_pt_color_normal_flag_data_f3d_color_gray (Xgl_pt_color_normal_flag_data_f3d* rcvr) {
   return rcvr->color.gray;
}
void xgl_pt_color_normal_flag_data_f3d_color_gray (Xgl_pt_color_normal_flag_data_f3d* rcvr, float gray) {
   rcvr->color.gray = gray;
}

unsigned long xgl_pt_color_normal_flag_data_f3d_color_index (Xgl_pt_color_normal_flag_data_f3d* rcvr) {
   return rcvr->color.index;
}
void xgl_pt_color_normal_flag_data_f3d_color_index (Xgl_pt_color_normal_flag_data_f3d* rcvr, unsigned long index) {
   rcvr->color.index = index;
}

Xgl_color_rgb* xgl_pt_color_normal_flag_data_f3d_color_rgb (Xgl_pt_color_normal_flag_data_f3d* rcvr) {
   return &(rcvr->color.rgb);
}
void xgl_pt_color_normal_flag_data_f3d_color_rgb (Xgl_pt_color_normal_flag_data_f3d* rcvr, Xgl_color_rgb* rgb) {
   rcvr->color.rgb = *rgb;
}

unsigned long xgl_pt_color_normal_flag_data_f3d_color_z (Xgl_pt_color_normal_flag_data_f3d* rcvr) {
   return rcvr->color.z;
}
void xgl_pt_color_normal_flag_data_f3d_color_z (Xgl_pt_color_normal_flag_data_f3d* rcvr, unsigned long z) {
   rcvr->color.z = z;
}

float* xgl_pt_color_normal_flag_data_f3d_data (Xgl_pt_color_normal_flag_data_f3d* rcvr) {
   return rcvr->data;
}
Xgl_pt_f3d* xgl_pt_color_normal_flag_data_f3d_normal (Xgl_pt_color_normal_flag_data_f3d* rcvr) {
   return &(rcvr->normal);
}
void xgl_pt_color_normal_flag_data_f3d_normal (Xgl_pt_color_normal_flag_data_f3d* rcvr, Xgl_pt_f3d* normal) {
   rcvr->normal = *normal;
}

void xgl_pt_color_normal_flag_data_f3d_set (Xgl_pt_color_normal_flag_data_f3d* rcvr,
	float color_gray,
	unsigned long flag,
	Xgl_pt_f3d* normal,
	float x,
	float y,
	float z) {
  rcvr->color.gray = color_gray;
  rcvr->flag = flag;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_normal_flag_data_f3d_set (Xgl_pt_color_normal_flag_data_f3d* rcvr,
	unsigned long color_index,
	unsigned long flag,
	Xgl_pt_f3d* normal,
	float x,
	float y,
	float z) {
  rcvr->color.index = color_index;
  rcvr->flag = flag;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_normal_flag_data_f3d_set (Xgl_pt_color_normal_flag_data_f3d* rcvr,
	Xgl_color_rgb* color_rgb,
	unsigned long flag,
	Xgl_pt_f3d* normal,
	float x,
	float y,
	float z) {
  rcvr->color.rgb = *color_rgb;
  rcvr->flag = flag;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_color_normal_flag_f3d
Xgl_pt_color_normal_flag_f3d* xgl_pt_color_normal_flag_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_color_normal_flag_f3d, count);
}
void xgl_pt_color_normal_flag_f3d_delete (Xgl_pt_color_normal_flag_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_color_normal_flag_f3d* xgl_pt_color_normal_flag_f3d_at (Xgl_pt_color_normal_flag_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_color_normal_flag_f3d_at_put (Xgl_pt_color_normal_flag_f3d* rcvr, fint which, Xgl_pt_color_normal_flag_f3d* ptColorNormalFlagF3d) {
  rcvr[which] = *ptColorNormalFlagF3d;
}

float xgl_pt_color_normal_flag_f3d_color_gray (Xgl_pt_color_normal_flag_f3d* rcvr) {
   return rcvr->color.gray;
}
void xgl_pt_color_normal_flag_f3d_color_gray (Xgl_pt_color_normal_flag_f3d* rcvr, float gray) {
   rcvr->color.gray = gray;
}

unsigned long xgl_pt_color_normal_flag_f3d_color_index (Xgl_pt_color_normal_flag_f3d* rcvr) {
   return rcvr->color.index;
}
void xgl_pt_color_normal_flag_f3d_color_index (Xgl_pt_color_normal_flag_f3d* rcvr, unsigned long index) {
   rcvr->color.index = index;
}

Xgl_color_rgb* xgl_pt_color_normal_flag_f3d_color_rgb (Xgl_pt_color_normal_flag_f3d* rcvr) {
   return &(rcvr->color.rgb);
}
void xgl_pt_color_normal_flag_f3d_color_rgb (Xgl_pt_color_normal_flag_f3d* rcvr, Xgl_color_rgb* rgb) {
   rcvr->color.rgb = *rgb;
}

unsigned long xgl_pt_color_normal_flag_f3d_color_z (Xgl_pt_color_normal_flag_f3d* rcvr) {
   return rcvr->color.z;
}
void xgl_pt_color_normal_flag_f3d_color_z (Xgl_pt_color_normal_flag_f3d* rcvr, unsigned long z) {
   rcvr->color.z = z;
}

Xgl_pt_f3d* xgl_pt_color_normal_flag_f3d_normal (Xgl_pt_color_normal_flag_f3d* rcvr) {
   return &(rcvr->normal);
}
void xgl_pt_color_normal_flag_f3d_normal (Xgl_pt_color_normal_flag_f3d* rcvr, Xgl_pt_f3d* normal) {
   rcvr->normal = *normal;
}

void xgl_pt_color_normal_flag_f3d_set (Xgl_pt_color_normal_flag_f3d* rcvr,
	float color_gray,
	unsigned long flag,
	Xgl_pt_f3d* normal,
	float x,
	float y,
	float z) {
  rcvr->color.gray = color_gray;
  rcvr->flag = flag;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_normal_flag_f3d_set (Xgl_pt_color_normal_flag_f3d* rcvr,
	unsigned long color_index,
	unsigned long flag,
	Xgl_pt_f3d* normal,
	float x,
	float y,
	float z) {
  rcvr->color.index = color_index;
  rcvr->flag = flag;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}

void xgl_pt_color_normal_flag_f3d_set (Xgl_pt_color_normal_flag_f3d* rcvr,
	Xgl_color_rgb* color_rgb,
	unsigned long flag,
	Xgl_pt_f3d* normal,
	float x,
	float y,
	float z) {
  rcvr->color.rgb = *color_rgb;
  rcvr->flag = flag;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_d2d
Xgl_pt_d2d* xgl_pt_d2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_d2d, count);
}
void xgl_pt_d2d_delete (Xgl_pt_d2d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_d2d* xgl_pt_d2d_at (Xgl_pt_d2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_d2d_at_put (Xgl_pt_d2d* rcvr, fint which, Xgl_pt_d2d* ptD2d) {
  rcvr[which] = *ptD2d;
}


// for Xgl_pt_d2h
Xgl_pt_d2h* xgl_pt_d2h_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_d2h, count);
}
void xgl_pt_d2h_delete (Xgl_pt_d2h* rcvr) {
  delete [] rcvr;
}

Xgl_pt_d2h* xgl_pt_d2h_at (Xgl_pt_d2h* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_d2h_at_put (Xgl_pt_d2h* rcvr, fint which, Xgl_pt_d2h* ptD2h) {
  rcvr[which] = *ptD2h;
}

void xgl_pt_d2h_set (Xgl_pt_d2h* rcvr,
	double w,
	double x,
	double y) {
  rcvr->w = w;
  rcvr->x = x;
  rcvr->y = y;
}


// for Xgl_pt_d3d
Xgl_pt_d3d* xgl_pt_d3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_d3d, count);
}
void xgl_pt_d3d_delete (Xgl_pt_d3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_d3d* xgl_pt_d3d_at (Xgl_pt_d3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_d3d_at_put (Xgl_pt_d3d* rcvr, fint which, Xgl_pt_d3d* ptD3d) {
  rcvr[which] = *ptD3d;
}

void xgl_pt_d3d_set (Xgl_pt_d3d* rcvr,
	double x,
	double y,
	double z) {
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_d3h
Xgl_pt_d3h* xgl_pt_d3h_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_d3h, count);
}
void xgl_pt_d3h_delete (Xgl_pt_d3h* rcvr) {
  delete [] rcvr;
}

Xgl_pt_d3h* xgl_pt_d3h_at (Xgl_pt_d3h* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_d3h_at_put (Xgl_pt_d3h* rcvr, fint which, Xgl_pt_d3h* ptD3h) {
  rcvr[which] = *ptD3h;
}

void xgl_pt_d3h_set (Xgl_pt_d3h* rcvr,
	double w,
	double x,
	double y,
	double z) {
  rcvr->w = w;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_data_f3d
Xgl_pt_data_f3d* xgl_pt_data_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_data_f3d, count);
}
void xgl_pt_data_f3d_delete (Xgl_pt_data_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_data_f3d* xgl_pt_data_f3d_at (Xgl_pt_data_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_data_f3d_at_put (Xgl_pt_data_f3d* rcvr, fint which, Xgl_pt_data_f3d* ptDataF3d) {
  rcvr[which] = *ptDataF3d;
}

float* xgl_pt_data_f3d_data (Xgl_pt_data_f3d* rcvr) {
   return rcvr->data;
}
void xgl_pt_data_f3d_set (Xgl_pt_data_f3d* rcvr,
	float x,
	float y,
	float z) {
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_f2d
Xgl_pt_f2d* xgl_pt_f2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_f2d, count);
}
void xgl_pt_f2d_delete (Xgl_pt_f2d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_f2d* xgl_pt_f2d_at (Xgl_pt_f2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_f2d_at_put (Xgl_pt_f2d* rcvr, fint which, Xgl_pt_f2d* ptF2d) {
  rcvr[which] = *ptF2d;
}


// for Xgl_pt_f2h
Xgl_pt_f2h* xgl_pt_f2h_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_f2h, count);
}
void xgl_pt_f2h_delete (Xgl_pt_f2h* rcvr) {
  delete [] rcvr;
}

Xgl_pt_f2h* xgl_pt_f2h_at (Xgl_pt_f2h* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_f2h_at_put (Xgl_pt_f2h* rcvr, fint which, Xgl_pt_f2h* ptF2h) {
  rcvr[which] = *ptF2h;
}

void xgl_pt_f2h_set (Xgl_pt_f2h* rcvr,
	float w,
	float x,
	float y) {
  rcvr->w = w;
  rcvr->x = x;
  rcvr->y = y;
}


// for Xgl_pt_f3d
Xgl_pt_f3d* xgl_pt_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_f3d, count);
}
void xgl_pt_f3d_delete (Xgl_pt_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_f3d* xgl_pt_f3d_at (Xgl_pt_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_f3d_at_put (Xgl_pt_f3d* rcvr, fint which, Xgl_pt_f3d* ptF3d) {
  rcvr[which] = *ptF3d;
}

void xgl_pt_f3d_set (Xgl_pt_f3d* rcvr,
	float x,
	float y,
	float z) {
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_f3h
Xgl_pt_f3h* xgl_pt_f3h_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_f3h, count);
}
void xgl_pt_f3h_delete (Xgl_pt_f3h* rcvr) {
  delete [] rcvr;
}

Xgl_pt_f3h* xgl_pt_f3h_at (Xgl_pt_f3h* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_f3h_at_put (Xgl_pt_f3h* rcvr, fint which, Xgl_pt_f3h* ptF3h) {
  rcvr[which] = *ptF3h;
}

void xgl_pt_f3h_set (Xgl_pt_f3h* rcvr,
	float w,
	float x,
	float y,
	float z) {
  rcvr->w = w;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_flag_d2d
Xgl_pt_flag_d2d* xgl_pt_flag_d2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_flag_d2d, count);
}
void xgl_pt_flag_d2d_delete (Xgl_pt_flag_d2d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_flag_d2d* xgl_pt_flag_d2d_at (Xgl_pt_flag_d2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_flag_d2d_at_put (Xgl_pt_flag_d2d* rcvr, fint which, Xgl_pt_flag_d2d* ptFlagD2d) {
  rcvr[which] = *ptFlagD2d;
}

void xgl_pt_flag_d2d_set (Xgl_pt_flag_d2d* rcvr,
	unsigned long flag,
	double x,
	double y) {
  rcvr->flag = flag;
  rcvr->x = x;
  rcvr->y = y;
}


// for Xgl_pt_flag_d3d
Xgl_pt_flag_d3d* xgl_pt_flag_d3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_flag_d3d, count);
}
void xgl_pt_flag_d3d_delete (Xgl_pt_flag_d3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_flag_d3d* xgl_pt_flag_d3d_at (Xgl_pt_flag_d3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_flag_d3d_at_put (Xgl_pt_flag_d3d* rcvr, fint which, Xgl_pt_flag_d3d* ptFlagD3d) {
  rcvr[which] = *ptFlagD3d;
}

void xgl_pt_flag_d3d_set (Xgl_pt_flag_d3d* rcvr,
	unsigned long flag,
	double x,
	double y,
	double z) {
  rcvr->flag = flag;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_flag_data_f3d
Xgl_pt_flag_data_f3d* xgl_pt_flag_data_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_flag_data_f3d, count);
}
void xgl_pt_flag_data_f3d_delete (Xgl_pt_flag_data_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_flag_data_f3d* xgl_pt_flag_data_f3d_at (Xgl_pt_flag_data_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_flag_data_f3d_at_put (Xgl_pt_flag_data_f3d* rcvr, fint which, Xgl_pt_flag_data_f3d* ptFlagDataF3d) {
  rcvr[which] = *ptFlagDataF3d;
}

float* xgl_pt_flag_data_f3d_data (Xgl_pt_flag_data_f3d* rcvr) {
   return rcvr->data;
}
void xgl_pt_flag_data_f3d_set (Xgl_pt_flag_data_f3d* rcvr,
	unsigned long flag,
	float x,
	float y,
	float z) {
  rcvr->flag = flag;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_flag_f2d
Xgl_pt_flag_f2d* xgl_pt_flag_f2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_flag_f2d, count);
}
void xgl_pt_flag_f2d_delete (Xgl_pt_flag_f2d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_flag_f2d* xgl_pt_flag_f2d_at (Xgl_pt_flag_f2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_flag_f2d_at_put (Xgl_pt_flag_f2d* rcvr, fint which, Xgl_pt_flag_f2d* ptFlagF2d) {
  rcvr[which] = *ptFlagF2d;
}

void xgl_pt_flag_f2d_set (Xgl_pt_flag_f2d* rcvr,
	unsigned long flag,
	float x,
	float y) {
  rcvr->flag = flag;
  rcvr->x = x;
  rcvr->y = y;
}


// for Xgl_pt_flag_f3d
Xgl_pt_flag_f3d* xgl_pt_flag_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_flag_f3d, count);
}
void xgl_pt_flag_f3d_delete (Xgl_pt_flag_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_flag_f3d* xgl_pt_flag_f3d_at (Xgl_pt_flag_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_flag_f3d_at_put (Xgl_pt_flag_f3d* rcvr, fint which, Xgl_pt_flag_f3d* ptFlagF3d) {
  rcvr[which] = *ptFlagF3d;
}

void xgl_pt_flag_f3d_set (Xgl_pt_flag_f3d* rcvr,
	unsigned long flag,
	float x,
	float y,
	float z) {
  rcvr->flag = flag;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_flag_i2d
Xgl_pt_flag_i2d* xgl_pt_flag_i2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_flag_i2d, count);
}
void xgl_pt_flag_i2d_delete (Xgl_pt_flag_i2d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_flag_i2d* xgl_pt_flag_i2d_at (Xgl_pt_flag_i2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_flag_i2d_at_put (Xgl_pt_flag_i2d* rcvr, fint which, Xgl_pt_flag_i2d* ptFlagI2d) {
  rcvr[which] = *ptFlagI2d;
}

void xgl_pt_flag_i2d_set (Xgl_pt_flag_i2d* rcvr,
	unsigned long flag,
	long x,
	long y) {
  rcvr->flag = flag;
  rcvr->x = x;
  rcvr->y = y;
}


// for Xgl_pt_i2d
Xgl_pt_i2d* xgl_pt_i2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_i2d, count);
}
void xgl_pt_i2d_delete (Xgl_pt_i2d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_i2d* xgl_pt_i2d_at (Xgl_pt_i2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_i2d_at_put (Xgl_pt_i2d* rcvr, fint which, Xgl_pt_i2d* ptI2d) {
  rcvr[which] = *ptI2d;
}


// for Xgl_pt_i2h
Xgl_pt_i2h* xgl_pt_i2h_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_i2h, count);
}
void xgl_pt_i2h_delete (Xgl_pt_i2h* rcvr) {
  delete [] rcvr;
}

Xgl_pt_i2h* xgl_pt_i2h_at (Xgl_pt_i2h* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_i2h_at_put (Xgl_pt_i2h* rcvr, fint which, Xgl_pt_i2h* ptI2h) {
  rcvr[which] = *ptI2h;
}

void xgl_pt_i2h_set (Xgl_pt_i2h* rcvr,
	long w,
	long x,
	long y) {
  rcvr->w = w;
  rcvr->x = x;
  rcvr->y = y;
}


// for Xgl_pt_list
Xgl_pt_list* xgl_pt_list_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_list, count);
}
void xgl_pt_list_delete (Xgl_pt_list* rcvr) {
  delete [] rcvr;
}

Xgl_pt_list* xgl_pt_list_at (Xgl_pt_list* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_list_at_put (Xgl_pt_list* rcvr, fint which, Xgl_pt_list* ptList) {
  rcvr[which] = *ptList;
}

Xgl_pt_color_d2d* xgl_pt_list_pts_color_d2d (Xgl_pt_list* rcvr) {
   return rcvr->pts.color_d2d;
}
void xgl_pt_list_pts_color_d2d (Xgl_pt_list* rcvr, Xgl_pt_color_d2d* colorD2d) {
   rcvr->pts.color_d2d = colorD2d;
}

Xgl_pt_color_d3d* xgl_pt_list_pts_color_d3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.color_d3d;
}
void xgl_pt_list_pts_color_d3d (Xgl_pt_list* rcvr, Xgl_pt_color_d3d* colorD3d) {
   rcvr->pts.color_d3d = colorD3d;
}

Xgl_pt_color_data_f3d* xgl_pt_list_pts_color_data_f3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.color_data_f3d;
}
void xgl_pt_list_pts_color_data_f3d (Xgl_pt_list* rcvr, Xgl_pt_color_data_f3d* colorDataF3d) {
   rcvr->pts.color_data_f3d = colorDataF3d;
}

Xgl_pt_color_f2d* xgl_pt_list_pts_color_f2d (Xgl_pt_list* rcvr) {
   return rcvr->pts.color_f2d;
}
void xgl_pt_list_pts_color_f2d (Xgl_pt_list* rcvr, Xgl_pt_color_f2d* colorF2d) {
   rcvr->pts.color_f2d = colorF2d;
}

Xgl_pt_color_f3d* xgl_pt_list_pts_color_f3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.color_f3d;
}
void xgl_pt_list_pts_color_f3d (Xgl_pt_list* rcvr, Xgl_pt_color_f3d* colorF3d) {
   rcvr->pts.color_f3d = colorF3d;
}

Xgl_pt_color_flag_d3d* xgl_pt_list_pts_color_flag_d3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.color_flag_d3d;
}
void xgl_pt_list_pts_color_flag_d3d (Xgl_pt_list* rcvr, Xgl_pt_color_flag_d3d* colorFlagD3d) {
   rcvr->pts.color_flag_d3d = colorFlagD3d;
}

Xgl_pt_color_flag_data_f3d* xgl_pt_list_pts_color_flag_data_f3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.color_flag_data_f3d;
}
void xgl_pt_list_pts_color_flag_data_f3d (Xgl_pt_list* rcvr, Xgl_pt_color_flag_data_f3d* colorFlagDataF3d) {
   rcvr->pts.color_flag_data_f3d = colorFlagDataF3d;
}

Xgl_pt_color_flag_f3d* xgl_pt_list_pts_color_flag_f3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.color_flag_f3d;
}
void xgl_pt_list_pts_color_flag_f3d (Xgl_pt_list* rcvr, Xgl_pt_color_flag_f3d* colorFlagF3d) {
   rcvr->pts.color_flag_f3d = colorFlagF3d;
}

Xgl_pt_color_i2d* xgl_pt_list_pts_color_i2d (Xgl_pt_list* rcvr) {
   return rcvr->pts.color_i2d;
}
void xgl_pt_list_pts_color_i2d (Xgl_pt_list* rcvr, Xgl_pt_color_i2d* colorI2d) {
   rcvr->pts.color_i2d = colorI2d;
}

Xgl_pt_color_normal_d3d* xgl_pt_list_pts_color_normal_d3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.color_normal_d3d;
}
void xgl_pt_list_pts_color_normal_d3d (Xgl_pt_list* rcvr, Xgl_pt_color_normal_d3d* colorNormalD3d) {
   rcvr->pts.color_normal_d3d = colorNormalD3d;
}

Xgl_pt_color_normal_data_f3d* xgl_pt_list_pts_color_normal_data_f3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.color_normal_data_f3d;
}
void xgl_pt_list_pts_color_normal_data_f3d (Xgl_pt_list* rcvr, Xgl_pt_color_normal_data_f3d* colorNormalDataF3d) {
   rcvr->pts.color_normal_data_f3d = colorNormalDataF3d;
}

Xgl_pt_color_normal_f3d* xgl_pt_list_pts_color_normal_f3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.color_normal_f3d;
}
void xgl_pt_list_pts_color_normal_f3d (Xgl_pt_list* rcvr, Xgl_pt_color_normal_f3d* colorNormalF3d) {
   rcvr->pts.color_normal_f3d = colorNormalF3d;
}

Xgl_pt_color_normal_flag_d3d* xgl_pt_list_pts_color_normal_flag_d3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.color_normal_flag_d3d;
}
void xgl_pt_list_pts_color_normal_flag_d3d (Xgl_pt_list* rcvr, Xgl_pt_color_normal_flag_d3d* colorNormalFlagD3d) {
   rcvr->pts.color_normal_flag_d3d = colorNormalFlagD3d;
}

Xgl_pt_color_normal_flag_data_f3d* xgl_pt_list_pts_color_normal_flag_data_f3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.color_normal_flag_data_f3d;
}
void xgl_pt_list_pts_color_normal_flag_data_f3d (Xgl_pt_list* rcvr, Xgl_pt_color_normal_flag_data_f3d* colorNormalFlagDataF3d) {
   rcvr->pts.color_normal_flag_data_f3d = colorNormalFlagDataF3d;
}

Xgl_pt_color_normal_flag_f3d* xgl_pt_list_pts_color_normal_flag_f3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.color_normal_flag_f3d;
}
void xgl_pt_list_pts_color_normal_flag_f3d (Xgl_pt_list* rcvr, Xgl_pt_color_normal_flag_f3d* colorNormalFlagF3d) {
   rcvr->pts.color_normal_flag_f3d = colorNormalFlagF3d;
}

Xgl_pt_d2d* xgl_pt_list_pts_d2d (Xgl_pt_list* rcvr) {
   return rcvr->pts.d2d;
}
void xgl_pt_list_pts_d2d (Xgl_pt_list* rcvr, Xgl_pt_d2d* d2d) {
   rcvr->pts.d2d = d2d;
}

Xgl_pt_d2h* xgl_pt_list_pts_d2h (Xgl_pt_list* rcvr) {
   return rcvr->pts.d2h;
}
void xgl_pt_list_pts_d2h (Xgl_pt_list* rcvr, Xgl_pt_d2h* d2h) {
   rcvr->pts.d2h = d2h;
}

Xgl_pt_d3d* xgl_pt_list_pts_d3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.d3d;
}
void xgl_pt_list_pts_d3d (Xgl_pt_list* rcvr, Xgl_pt_d3d* d3d) {
   rcvr->pts.d3d = d3d;
}

Xgl_pt_d3h* xgl_pt_list_pts_d3h (Xgl_pt_list* rcvr) {
   return rcvr->pts.d3h;
}
void xgl_pt_list_pts_d3h (Xgl_pt_list* rcvr, Xgl_pt_d3h* d3h) {
   rcvr->pts.d3h = d3h;
}

Xgl_pt_data_f3d* xgl_pt_list_pts_data_f3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.data_f3d;
}
void xgl_pt_list_pts_data_f3d (Xgl_pt_list* rcvr, Xgl_pt_data_f3d* dataF3d) {
   rcvr->pts.data_f3d = dataF3d;
}

Xgl_pt_f2d* xgl_pt_list_pts_f2d (Xgl_pt_list* rcvr) {
   return rcvr->pts.f2d;
}
void xgl_pt_list_pts_f2d (Xgl_pt_list* rcvr, Xgl_pt_f2d* f2d) {
   rcvr->pts.f2d = f2d;
}

Xgl_pt_f2h* xgl_pt_list_pts_f2h (Xgl_pt_list* rcvr) {
   return rcvr->pts.f2h;
}
void xgl_pt_list_pts_f2h (Xgl_pt_list* rcvr, Xgl_pt_f2h* f2h) {
   rcvr->pts.f2h = f2h;
}

Xgl_pt_f3d* xgl_pt_list_pts_f3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.f3d;
}
void xgl_pt_list_pts_f3d (Xgl_pt_list* rcvr, Xgl_pt_f3d* f3d) {
   rcvr->pts.f3d = f3d;
}

Xgl_pt_f3h* xgl_pt_list_pts_f3h (Xgl_pt_list* rcvr) {
   return rcvr->pts.f3h;
}
void xgl_pt_list_pts_f3h (Xgl_pt_list* rcvr, Xgl_pt_f3h* f3h) {
   rcvr->pts.f3h = f3h;
}

Xgl_pt_flag_d2d* xgl_pt_list_pts_flag_d2d (Xgl_pt_list* rcvr) {
   return rcvr->pts.flag_d2d;
}
void xgl_pt_list_pts_flag_d2d (Xgl_pt_list* rcvr, Xgl_pt_flag_d2d* flagD2d) {
   rcvr->pts.flag_d2d = flagD2d;
}

Xgl_pt_flag_d3d* xgl_pt_list_pts_flag_d3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.flag_d3d;
}
void xgl_pt_list_pts_flag_d3d (Xgl_pt_list* rcvr, Xgl_pt_flag_d3d* flagD3d) {
   rcvr->pts.flag_d3d = flagD3d;
}

Xgl_pt_flag_data_f3d* xgl_pt_list_pts_flag_data_f3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.flag_data_f3d;
}
void xgl_pt_list_pts_flag_data_f3d (Xgl_pt_list* rcvr, Xgl_pt_flag_data_f3d* flagDataF3d) {
   rcvr->pts.flag_data_f3d = flagDataF3d;
}

Xgl_pt_flag_f2d* xgl_pt_list_pts_flag_f2d (Xgl_pt_list* rcvr) {
   return rcvr->pts.flag_f2d;
}
void xgl_pt_list_pts_flag_f2d (Xgl_pt_list* rcvr, Xgl_pt_flag_f2d* flagF2d) {
   rcvr->pts.flag_f2d = flagF2d;
}

Xgl_pt_flag_f3d* xgl_pt_list_pts_flag_f3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.flag_f3d;
}
void xgl_pt_list_pts_flag_f3d (Xgl_pt_list* rcvr, Xgl_pt_flag_f3d* flagF3d) {
   rcvr->pts.flag_f3d = flagF3d;
}

Xgl_pt_flag_i2d* xgl_pt_list_pts_flag_i2d (Xgl_pt_list* rcvr) {
   return rcvr->pts.flag_i2d;
}
void xgl_pt_list_pts_flag_i2d (Xgl_pt_list* rcvr, Xgl_pt_flag_i2d* flagI2d) {
   rcvr->pts.flag_i2d = flagI2d;
}

Xgl_pt_i2d* xgl_pt_list_pts_i2d (Xgl_pt_list* rcvr) {
   return rcvr->pts.i2d;
}
void xgl_pt_list_pts_i2d (Xgl_pt_list* rcvr, Xgl_pt_i2d* i2d) {
   rcvr->pts.i2d = i2d;
}

Xgl_pt_i2h* xgl_pt_list_pts_i2h (Xgl_pt_list* rcvr) {
   return rcvr->pts.i2h;
}
void xgl_pt_list_pts_i2h (Xgl_pt_list* rcvr, Xgl_pt_i2h* i2h) {
   rcvr->pts.i2h = i2h;
}

Xgl_pt_normal_d3d* xgl_pt_list_pts_normal_d3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.normal_d3d;
}
void xgl_pt_list_pts_normal_d3d (Xgl_pt_list* rcvr, Xgl_pt_normal_d3d* normalD3d) {
   rcvr->pts.normal_d3d = normalD3d;
}

Xgl_pt_normal_data_f3d* xgl_pt_list_pts_normal_data_f3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.normal_data_f3d;
}
void xgl_pt_list_pts_normal_data_f3d (Xgl_pt_list* rcvr, Xgl_pt_normal_data_f3d* normalDataF3d) {
   rcvr->pts.normal_data_f3d = normalDataF3d;
}

Xgl_pt_normal_f3d* xgl_pt_list_pts_normal_f3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.normal_f3d;
}
void xgl_pt_list_pts_normal_f3d (Xgl_pt_list* rcvr, Xgl_pt_normal_f3d* normalF3d) {
   rcvr->pts.normal_f3d = normalF3d;
}

Xgl_pt_normal_flag_d3d* xgl_pt_list_pts_normal_flag_d3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.normal_flag_d3d;
}
void xgl_pt_list_pts_normal_flag_d3d (Xgl_pt_list* rcvr, Xgl_pt_normal_flag_d3d* normalFlagD3d) {
   rcvr->pts.normal_flag_d3d = normalFlagD3d;
}

Xgl_pt_normal_flag_data_f3d* xgl_pt_list_pts_normal_flag_data_f3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.normal_flag_data_f3d;
}
void xgl_pt_list_pts_normal_flag_data_f3d (Xgl_pt_list* rcvr, Xgl_pt_normal_flag_data_f3d* normalFlagDataF3d) {
   rcvr->pts.normal_flag_data_f3d = normalFlagDataF3d;
}

Xgl_pt_normal_flag_f3d* xgl_pt_list_pts_normal_flag_f3d (Xgl_pt_list* rcvr) {
   return rcvr->pts.normal_flag_f3d;
}
void xgl_pt_list_pts_normal_flag_f3d (Xgl_pt_list* rcvr, Xgl_pt_normal_flag_f3d* normalFlagF3d) {
   rcvr->pts.normal_flag_f3d = normalFlagF3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_color_d2d* colorD2d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.color_d2d = colorD2d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_color_d3d* colorD3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.color_d3d = colorD3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_color_data_f3d* colorDataF3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.color_data_f3d = colorDataF3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_color_f2d* colorF2d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.color_f2d = colorF2d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_color_f3d* colorF3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.color_f3d = colorF3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_color_flag_d3d* colorFlagD3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.color_flag_d3d = colorFlagD3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_color_flag_data_f3d* colorFlagDataF3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.color_flag_data_f3d = colorFlagDataF3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_color_flag_f3d* colorFlagF3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.color_flag_f3d = colorFlagF3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_color_i2d* colorI2d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.color_i2d = colorI2d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_color_normal_d3d* colorNormalD3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.color_normal_d3d = colorNormalD3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_color_normal_data_f3d* colorNormalDataF3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.color_normal_data_f3d = colorNormalDataF3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_color_normal_f3d* colorNormalF3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.color_normal_f3d = colorNormalF3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_color_normal_flag_d3d* colorNormalFlagD3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.color_normal_flag_d3d = colorNormalFlagD3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_color_normal_flag_data_f3d* colorNormalFlagDataF3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.color_normal_flag_data_f3d = colorNormalFlagDataF3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_color_normal_flag_f3d* colorNormalFlagF3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.color_normal_flag_f3d = colorNormalFlagF3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_d2d* d2d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.d2d = d2d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_d2h* d2h) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.d2h = d2h;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_d3d* d3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.d3d = d3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_d3h* d3h) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.d3h = d3h;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_data_f3d* dataF3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.data_f3d = dataF3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_f2d* f2d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.f2d = f2d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_f2h* f2h) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.f2h = f2h;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_f3d* f3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.f3d = f3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_f3h* f3h) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.f3h = f3h;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_flag_d2d* flagD2d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.flag_d2d = flagD2d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_flag_d3d* flagD3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.flag_d3d = flagD3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_flag_data_f3d* flagDataF3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.flag_data_f3d = flagDataF3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_flag_f2d* flagF2d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.flag_f2d = flagF2d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_flag_f3d* flagF3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.flag_f3d = flagF3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_flag_i2d* flagI2d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.flag_i2d = flagI2d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_i2d* i2d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.i2d = i2d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_i2h* i2h) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.i2h = i2h;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_normal_d3d* normalD3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.normal_d3d = normalD3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_normal_data_f3d* normalDataF3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.normal_data_f3d = normalDataF3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_normal_f3d* normalF3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.normal_f3d = normalF3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_normal_flag_d3d* normalFlagD3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.normal_flag_d3d = normalFlagD3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_normal_flag_data_f3d* normalFlagDataF3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.normal_flag_data_f3d = normalFlagDataF3d;
}

void xgl_pt_list_set (Xgl_pt_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numDataValues,
	unsigned long numPts,
	Xgl_pt_type ptType,
	Xgl_pt_normal_flag_f3d* normalFlagF3d) {
  rcvr->bbox = bbox;
  rcvr->num_data_values = numDataValues;
  rcvr->num_pts = numPts;
  rcvr->pt_type = ptType;
  rcvr->pts.normal_flag_f3d = normalFlagF3d;
}


// for Xgl_pt_list_list
Xgl_pt_list_list* xgl_pt_list_list_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_list_list, count);
}
void xgl_pt_list_list_delete (Xgl_pt_list_list* rcvr) {
  delete [] rcvr;
}

Xgl_pt_list_list* xgl_pt_list_list_at (Xgl_pt_list_list* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_list_list_at_put (Xgl_pt_list_list* rcvr, fint which, Xgl_pt_list_list* ptListList) {
  rcvr[which] = *ptListList;
}

void xgl_pt_list_list_set (Xgl_pt_list_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numPtLists,
	Xgl_pt_list* ptLists) {
  rcvr->bbox = bbox;
  rcvr->num_pt_lists = numPtLists;
  rcvr->pt_lists = ptLists;
}


// for Xgl_pt_normal_d3d
Xgl_pt_normal_d3d* xgl_pt_normal_d3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_normal_d3d, count);
}
void xgl_pt_normal_d3d_delete (Xgl_pt_normal_d3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_normal_d3d* xgl_pt_normal_d3d_at (Xgl_pt_normal_d3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_normal_d3d_at_put (Xgl_pt_normal_d3d* rcvr, fint which, Xgl_pt_normal_d3d* ptNormalD3d) {
  rcvr[which] = *ptNormalD3d;
}

Xgl_pt_f3d* xgl_pt_normal_d3d_normal (Xgl_pt_normal_d3d* rcvr) {
   return &(rcvr->normal);
}
void xgl_pt_normal_d3d_normal (Xgl_pt_normal_d3d* rcvr, Xgl_pt_f3d* normal) {
   rcvr->normal = *normal;
}

void xgl_pt_normal_d3d_set (Xgl_pt_normal_d3d* rcvr,
	Xgl_pt_f3d* normal,
	double x,
	double y,
	double z) {
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_normal_data_f3d
Xgl_pt_normal_data_f3d* xgl_pt_normal_data_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_normal_data_f3d, count);
}
void xgl_pt_normal_data_f3d_delete (Xgl_pt_normal_data_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_normal_data_f3d* xgl_pt_normal_data_f3d_at (Xgl_pt_normal_data_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_normal_data_f3d_at_put (Xgl_pt_normal_data_f3d* rcvr, fint which, Xgl_pt_normal_data_f3d* ptNormalDataF3d) {
  rcvr[which] = *ptNormalDataF3d;
}

float* xgl_pt_normal_data_f3d_data (Xgl_pt_normal_data_f3d* rcvr) {
   return rcvr->data;
}
Xgl_pt_f3d* xgl_pt_normal_data_f3d_normal (Xgl_pt_normal_data_f3d* rcvr) {
   return &(rcvr->normal);
}
void xgl_pt_normal_data_f3d_normal (Xgl_pt_normal_data_f3d* rcvr, Xgl_pt_f3d* normal) {
   rcvr->normal = *normal;
}

void xgl_pt_normal_data_f3d_set (Xgl_pt_normal_data_f3d* rcvr,
	Xgl_pt_f3d* normal,
	float x,
	float y,
	float z) {
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_normal_f3d
Xgl_pt_normal_f3d* xgl_pt_normal_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_normal_f3d, count);
}
void xgl_pt_normal_f3d_delete (Xgl_pt_normal_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_normal_f3d* xgl_pt_normal_f3d_at (Xgl_pt_normal_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_normal_f3d_at_put (Xgl_pt_normal_f3d* rcvr, fint which, Xgl_pt_normal_f3d* ptNormalF3d) {
  rcvr[which] = *ptNormalF3d;
}

Xgl_pt_f3d* xgl_pt_normal_f3d_normal (Xgl_pt_normal_f3d* rcvr) {
   return &(rcvr->normal);
}
void xgl_pt_normal_f3d_normal (Xgl_pt_normal_f3d* rcvr, Xgl_pt_f3d* normal) {
   rcvr->normal = *normal;
}

void xgl_pt_normal_f3d_set (Xgl_pt_normal_f3d* rcvr,
	Xgl_pt_f3d* normal,
	float x,
	float y,
	float z) {
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_normal_flag_d3d
Xgl_pt_normal_flag_d3d* xgl_pt_normal_flag_d3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_normal_flag_d3d, count);
}
void xgl_pt_normal_flag_d3d_delete (Xgl_pt_normal_flag_d3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_normal_flag_d3d* xgl_pt_normal_flag_d3d_at (Xgl_pt_normal_flag_d3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_normal_flag_d3d_at_put (Xgl_pt_normal_flag_d3d* rcvr, fint which, Xgl_pt_normal_flag_d3d* ptNormalFlagD3d) {
  rcvr[which] = *ptNormalFlagD3d;
}

Xgl_pt_f3d* xgl_pt_normal_flag_d3d_normal (Xgl_pt_normal_flag_d3d* rcvr) {
   return &(rcvr->normal);
}
void xgl_pt_normal_flag_d3d_normal (Xgl_pt_normal_flag_d3d* rcvr, Xgl_pt_f3d* normal) {
   rcvr->normal = *normal;
}

void xgl_pt_normal_flag_d3d_set (Xgl_pt_normal_flag_d3d* rcvr,
	unsigned long flag,
	Xgl_pt_f3d* normal,
	double x,
	double y,
	double z) {
  rcvr->flag = flag;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_normal_flag_data_f3d
Xgl_pt_normal_flag_data_f3d* xgl_pt_normal_flag_data_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_normal_flag_data_f3d, count);
}
void xgl_pt_normal_flag_data_f3d_delete (Xgl_pt_normal_flag_data_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_normal_flag_data_f3d* xgl_pt_normal_flag_data_f3d_at (Xgl_pt_normal_flag_data_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_normal_flag_data_f3d_at_put (Xgl_pt_normal_flag_data_f3d* rcvr, fint which, Xgl_pt_normal_flag_data_f3d* ptNormalFlagDataF3d) {
  rcvr[which] = *ptNormalFlagDataF3d;
}

float* xgl_pt_normal_flag_data_f3d_data (Xgl_pt_normal_flag_data_f3d* rcvr) {
   return rcvr->data;
}
Xgl_pt_f3d* xgl_pt_normal_flag_data_f3d_normal (Xgl_pt_normal_flag_data_f3d* rcvr) {
   return &(rcvr->normal);
}
void xgl_pt_normal_flag_data_f3d_normal (Xgl_pt_normal_flag_data_f3d* rcvr, Xgl_pt_f3d* normal) {
   rcvr->normal = *normal;
}

void xgl_pt_normal_flag_data_f3d_set (Xgl_pt_normal_flag_data_f3d* rcvr,
	unsigned long flag,
	Xgl_pt_f3d* normal,
	float x,
	float y,
	float z) {
  rcvr->flag = flag;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_normal_flag_f3d
Xgl_pt_normal_flag_f3d* xgl_pt_normal_flag_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_normal_flag_f3d, count);
}
void xgl_pt_normal_flag_f3d_delete (Xgl_pt_normal_flag_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_pt_normal_flag_f3d* xgl_pt_normal_flag_f3d_at (Xgl_pt_normal_flag_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_normal_flag_f3d_at_put (Xgl_pt_normal_flag_f3d* rcvr, fint which, Xgl_pt_normal_flag_f3d* ptNormalFlagF3d) {
  rcvr[which] = *ptNormalFlagF3d;
}

Xgl_pt_f3d* xgl_pt_normal_flag_f3d_normal (Xgl_pt_normal_flag_f3d* rcvr) {
   return &(rcvr->normal);
}
void xgl_pt_normal_flag_f3d_normal (Xgl_pt_normal_flag_f3d* rcvr, Xgl_pt_f3d* normal) {
   rcvr->normal = *normal;
}

void xgl_pt_normal_flag_f3d_set (Xgl_pt_normal_flag_f3d* rcvr,
	unsigned long flag,
	Xgl_pt_f3d* normal,
	float x,
	float y,
	float z) {
  rcvr->flag = flag;
  rcvr->normal = *normal;
  rcvr->x = x;
  rcvr->y = y;
  rcvr->z = z;
}


// for Xgl_pt_type_supported
Xgl_pt_type_supported* xgl_pt_type_supported_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_pt_type_supported, count);
}
void xgl_pt_type_supported_delete (Xgl_pt_type_supported* rcvr) {
  delete [] rcvr;
}

Xgl_pt_type_supported* xgl_pt_type_supported_at (Xgl_pt_type_supported* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_pt_type_supported_at_put (Xgl_pt_type_supported* rcvr, fint which, Xgl_pt_type_supported* ptTypeSupported) {
  rcvr[which] = *ptTypeSupported;
}

void xgl_pt_type_supported_set (Xgl_pt_type_supported* rcvr,
	unsigned int ptDim2d,
	unsigned int ptDim3d,
	unsigned int ptTypeDouble,
	unsigned int ptTypeFloat,
	unsigned int ptTypeInt) {
  rcvr->pt_dim_2d = ptDim2d;
  rcvr->pt_dim_3d = ptDim3d;
  rcvr->pt_type_double = ptTypeDouble;
  rcvr->pt_type_float = ptTypeFloat;
  rcvr->pt_type_int = ptTypeInt;
}


// for Xgl_rect_ad3d
Xgl_rect_ad3d* xgl_rect_ad3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_rect_ad3d, count);
}
void xgl_rect_ad3d_delete (Xgl_rect_ad3d* rcvr) {
  delete [] rcvr;
}

Xgl_rect_ad3d* xgl_rect_ad3d_at (Xgl_rect_ad3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_rect_ad3d_at_put (Xgl_rect_ad3d* rcvr, fint which, Xgl_rect_ad3d* rectAd3d) {
  rcvr[which] = *rectAd3d;
}

Xgl_pt_d2d* xgl_rect_ad3d_corner_max (Xgl_rect_ad3d* rcvr) {
   return &(rcvr->corner_max);
}
void xgl_rect_ad3d_corner_max (Xgl_rect_ad3d* rcvr, Xgl_pt_d2d* cornerMax) {
   rcvr->corner_max = *cornerMax;
}

Xgl_pt_flag_d3d* xgl_rect_ad3d_corner_min (Xgl_rect_ad3d* rcvr) {
   return &(rcvr->corner_min);
}
void xgl_rect_ad3d_corner_min (Xgl_rect_ad3d* rcvr, Xgl_pt_flag_d3d* cornerMin) {
   rcvr->corner_min = *cornerMin;
}


// for Xgl_rect_af3d
Xgl_rect_af3d* xgl_rect_af3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_rect_af3d, count);
}
void xgl_rect_af3d_delete (Xgl_rect_af3d* rcvr) {
  delete [] rcvr;
}

Xgl_rect_af3d* xgl_rect_af3d_at (Xgl_rect_af3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_rect_af3d_at_put (Xgl_rect_af3d* rcvr, fint which, Xgl_rect_af3d* rectAf3d) {
  rcvr[which] = *rectAf3d;
}

Xgl_pt_f2d* xgl_rect_af3d_corner_max (Xgl_rect_af3d* rcvr) {
   return &(rcvr->corner_max);
}
void xgl_rect_af3d_corner_max (Xgl_rect_af3d* rcvr, Xgl_pt_f2d* cornerMax) {
   rcvr->corner_max = *cornerMax;
}

Xgl_pt_flag_f3d* xgl_rect_af3d_corner_min (Xgl_rect_af3d* rcvr) {
   return &(rcvr->corner_min);
}
void xgl_rect_af3d_corner_min (Xgl_rect_af3d* rcvr, Xgl_pt_flag_f3d* cornerMin) {
   rcvr->corner_min = *cornerMin;
}


// for Xgl_rect_d2d
Xgl_rect_d2d* xgl_rect_d2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_rect_d2d, count);
}
void xgl_rect_d2d_delete (Xgl_rect_d2d* rcvr) {
  delete [] rcvr;
}

Xgl_rect_d2d* xgl_rect_d2d_at (Xgl_rect_d2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_rect_d2d_at_put (Xgl_rect_d2d* rcvr, fint which, Xgl_rect_d2d* rectD2d) {
  rcvr[which] = *rectD2d;
}

Xgl_pt_d2d* xgl_rect_d2d_corner_max (Xgl_rect_d2d* rcvr) {
   return &(rcvr->corner_max);
}
void xgl_rect_d2d_corner_max (Xgl_rect_d2d* rcvr, Xgl_pt_d2d* cornerMax) {
   rcvr->corner_max = *cornerMax;
}

Xgl_pt_flag_d2d* xgl_rect_d2d_corner_min (Xgl_rect_d2d* rcvr) {
   return &(rcvr->corner_min);
}
void xgl_rect_d2d_corner_min (Xgl_rect_d2d* rcvr, Xgl_pt_flag_d2d* cornerMin) {
   rcvr->corner_min = *cornerMin;
}


// for Xgl_rect_d3d
Xgl_rect_d3d* xgl_rect_d3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_rect_d3d, count);
}
void xgl_rect_d3d_delete (Xgl_rect_d3d* rcvr) {
  delete [] rcvr;
}

Xgl_rect_d3d* xgl_rect_d3d_at (Xgl_rect_d3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_rect_d3d_at_put (Xgl_rect_d3d* rcvr, fint which, Xgl_rect_d3d* rectD3d) {
  rcvr[which] = *rectD3d;
}

Xgl_pt_d2d* xgl_rect_d3d_corner_max (Xgl_rect_d3d* rcvr) {
   return &(rcvr->corner_max);
}
void xgl_rect_d3d_corner_max (Xgl_rect_d3d* rcvr, Xgl_pt_d2d* cornerMax) {
   rcvr->corner_max = *cornerMax;
}

Xgl_pt_flag_d3d* xgl_rect_d3d_corner_min (Xgl_rect_d3d* rcvr) {
   return &(rcvr->corner_min);
}
void xgl_rect_d3d_corner_min (Xgl_rect_d3d* rcvr, Xgl_pt_flag_d3d* cornerMin) {
   rcvr->corner_min = *cornerMin;
}

Xgl_pt_d3d* xgl_rect_d3d_dir (Xgl_rect_d3d* rcvr) {
   return rcvr->dir;
}
void xgl_rect_d3d_set (Xgl_rect_d3d* rcvr,
	Xgl_pt_d2d* cornerMax,
	Xgl_pt_flag_d3d* cornerMin,
	bool dirNormal,
	bool dirNormalized) {
  rcvr->corner_max = *cornerMax;
  rcvr->corner_min = *cornerMin;
  rcvr->dir_normal = dirNormal;
  rcvr->dir_normalized = dirNormalized;
}


// for Xgl_rect_f2d
Xgl_rect_f2d* xgl_rect_f2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_rect_f2d, count);
}
void xgl_rect_f2d_delete (Xgl_rect_f2d* rcvr) {
  delete [] rcvr;
}

Xgl_rect_f2d* xgl_rect_f2d_at (Xgl_rect_f2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_rect_f2d_at_put (Xgl_rect_f2d* rcvr, fint which, Xgl_rect_f2d* rectF2d) {
  rcvr[which] = *rectF2d;
}

Xgl_pt_f2d* xgl_rect_f2d_corner_max (Xgl_rect_f2d* rcvr) {
   return &(rcvr->corner_max);
}
void xgl_rect_f2d_corner_max (Xgl_rect_f2d* rcvr, Xgl_pt_f2d* cornerMax) {
   rcvr->corner_max = *cornerMax;
}

Xgl_pt_flag_f2d* xgl_rect_f2d_corner_min (Xgl_rect_f2d* rcvr) {
   return &(rcvr->corner_min);
}
void xgl_rect_f2d_corner_min (Xgl_rect_f2d* rcvr, Xgl_pt_flag_f2d* cornerMin) {
   rcvr->corner_min = *cornerMin;
}


// for Xgl_rect_f3d
Xgl_rect_f3d* xgl_rect_f3d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_rect_f3d, count);
}
void xgl_rect_f3d_delete (Xgl_rect_f3d* rcvr) {
  delete [] rcvr;
}

Xgl_rect_f3d* xgl_rect_f3d_at (Xgl_rect_f3d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_rect_f3d_at_put (Xgl_rect_f3d* rcvr, fint which, Xgl_rect_f3d* rectF3d) {
  rcvr[which] = *rectF3d;
}

Xgl_pt_f2d* xgl_rect_f3d_corner_max (Xgl_rect_f3d* rcvr) {
   return &(rcvr->corner_max);
}
void xgl_rect_f3d_corner_max (Xgl_rect_f3d* rcvr, Xgl_pt_f2d* cornerMax) {
   rcvr->corner_max = *cornerMax;
}

Xgl_pt_flag_f3d* xgl_rect_f3d_corner_min (Xgl_rect_f3d* rcvr) {
   return &(rcvr->corner_min);
}
void xgl_rect_f3d_corner_min (Xgl_rect_f3d* rcvr, Xgl_pt_flag_f3d* cornerMin) {
   rcvr->corner_min = *cornerMin;
}

Xgl_pt_f3d* xgl_rect_f3d_dir (Xgl_rect_f3d* rcvr) {
   return rcvr->dir;
}
void xgl_rect_f3d_set (Xgl_rect_f3d* rcvr,
	Xgl_pt_f2d* cornerMax,
	Xgl_pt_flag_f3d* cornerMin,
	bool dirNormal,
	bool dirNormalized) {
  rcvr->corner_max = *cornerMax;
  rcvr->corner_min = *cornerMin;
  rcvr->dir_normal = dirNormal;
  rcvr->dir_normalized = dirNormalized;
}


// for Xgl_rect_i2d
Xgl_rect_i2d* xgl_rect_i2d_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_rect_i2d, count);
}
void xgl_rect_i2d_delete (Xgl_rect_i2d* rcvr) {
  delete [] rcvr;
}

Xgl_rect_i2d* xgl_rect_i2d_at (Xgl_rect_i2d* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_rect_i2d_at_put (Xgl_rect_i2d* rcvr, fint which, Xgl_rect_i2d* rectI2d) {
  rcvr[which] = *rectI2d;
}

Xgl_pt_i2d* xgl_rect_i2d_corner_max (Xgl_rect_i2d* rcvr) {
   return &(rcvr->corner_max);
}
void xgl_rect_i2d_corner_max (Xgl_rect_i2d* rcvr, Xgl_pt_i2d* cornerMax) {
   rcvr->corner_max = *cornerMax;
}

Xgl_pt_flag_i2d* xgl_rect_i2d_corner_min (Xgl_rect_i2d* rcvr) {
   return &(rcvr->corner_min);
}
void xgl_rect_i2d_corner_min (Xgl_rect_i2d* rcvr, Xgl_pt_flag_i2d* cornerMin) {
   rcvr->corner_min = *cornerMin;
}


// for Xgl_rect_list
Xgl_rect_list* xgl_rect_list_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_rect_list, count);
}
void xgl_rect_list_delete (Xgl_rect_list* rcvr) {
  delete [] rcvr;
}

Xgl_rect_list* xgl_rect_list_at (Xgl_rect_list* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_rect_list_at_put (Xgl_rect_list* rcvr, fint which, Xgl_rect_list* rectList) {
  rcvr[which] = *rectList;
}

Xgl_rect_ad3d* xgl_rect_list_rects_ad3d (Xgl_rect_list* rcvr) {
   return rcvr->rects.ad3d;
}
void xgl_rect_list_rects_ad3d (Xgl_rect_list* rcvr, Xgl_rect_ad3d* ad3d) {
   rcvr->rects.ad3d = ad3d;
}

Xgl_rect_af3d* xgl_rect_list_rects_af3d (Xgl_rect_list* rcvr) {
   return rcvr->rects.af3d;
}
void xgl_rect_list_rects_af3d (Xgl_rect_list* rcvr, Xgl_rect_af3d* af3d) {
   rcvr->rects.af3d = af3d;
}

Xgl_rect_d2d* xgl_rect_list_rects_d2d (Xgl_rect_list* rcvr) {
   return rcvr->rects.d2d;
}
void xgl_rect_list_rects_d2d (Xgl_rect_list* rcvr, Xgl_rect_d2d* d2d) {
   rcvr->rects.d2d = d2d;
}

Xgl_rect_d3d* xgl_rect_list_rects_d3d (Xgl_rect_list* rcvr) {
   return rcvr->rects.d3d;
}
void xgl_rect_list_rects_d3d (Xgl_rect_list* rcvr, Xgl_rect_d3d* d3d) {
   rcvr->rects.d3d = d3d;
}

Xgl_rect_f2d* xgl_rect_list_rects_f2d (Xgl_rect_list* rcvr) {
   return rcvr->rects.f2d;
}
void xgl_rect_list_rects_f2d (Xgl_rect_list* rcvr, Xgl_rect_f2d* f2d) {
   rcvr->rects.f2d = f2d;
}

Xgl_rect_f3d* xgl_rect_list_rects_f3d (Xgl_rect_list* rcvr) {
   return rcvr->rects.f3d;
}
void xgl_rect_list_rects_f3d (Xgl_rect_list* rcvr, Xgl_rect_f3d* f3d) {
   rcvr->rects.f3d = f3d;
}

Xgl_rect_i2d* xgl_rect_list_rects_i2d (Xgl_rect_list* rcvr) {
   return rcvr->rects.i2d;
}
void xgl_rect_list_rects_i2d (Xgl_rect_list* rcvr, Xgl_rect_i2d* i2d) {
   rcvr->rects.i2d = i2d;
}

void xgl_rect_list_set (Xgl_rect_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numRects,
	Xgl_multirect_type rectType,
	Xgl_rect_ad3d* ad3d) {
  rcvr->bbox = bbox;
  rcvr->num_rects = numRects;
  rcvr->rect_type = rectType;
  rcvr->rects.ad3d = ad3d;
}

void xgl_rect_list_set (Xgl_rect_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numRects,
	Xgl_multirect_type rectType,
	Xgl_rect_af3d* af3d) {
  rcvr->bbox = bbox;
  rcvr->num_rects = numRects;
  rcvr->rect_type = rectType;
  rcvr->rects.af3d = af3d;
}

void xgl_rect_list_set (Xgl_rect_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numRects,
	Xgl_multirect_type rectType,
	Xgl_rect_d2d* d2d) {
  rcvr->bbox = bbox;
  rcvr->num_rects = numRects;
  rcvr->rect_type = rectType;
  rcvr->rects.d2d = d2d;
}

void xgl_rect_list_set (Xgl_rect_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numRects,
	Xgl_multirect_type rectType,
	Xgl_rect_d3d* d3d) {
  rcvr->bbox = bbox;
  rcvr->num_rects = numRects;
  rcvr->rect_type = rectType;
  rcvr->rects.d3d = d3d;
}

void xgl_rect_list_set (Xgl_rect_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numRects,
	Xgl_multirect_type rectType,
	Xgl_rect_f2d* f2d) {
  rcvr->bbox = bbox;
  rcvr->num_rects = numRects;
  rcvr->rect_type = rectType;
  rcvr->rects.f2d = f2d;
}

void xgl_rect_list_set (Xgl_rect_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numRects,
	Xgl_multirect_type rectType,
	Xgl_rect_f3d* f3d) {
  rcvr->bbox = bbox;
  rcvr->num_rects = numRects;
  rcvr->rect_type = rectType;
  rcvr->rects.f3d = f3d;
}

void xgl_rect_list_set (Xgl_rect_list* rcvr,
	Xgl_bbox* bbox,
	unsigned long numRects,
	Xgl_multirect_type rectType,
	Xgl_rect_i2d* i2d) {
  rcvr->bbox = bbox;
  rcvr->num_rects = numRects;
  rcvr->rect_type = rectType;
  rcvr->rects.i2d = i2d;
}


// for Xgl_render_component_desc
Xgl_render_component_desc* xgl_render_component_desc_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_render_component_desc, count);
}
void xgl_render_component_desc_delete (Xgl_render_component_desc* rcvr) {
  delete [] rcvr;
}

Xgl_render_component_desc* xgl_render_component_desc_at (Xgl_render_component_desc* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_render_component_desc_at_put (Xgl_render_component_desc* rcvr, fint which, Xgl_render_component_desc* renderComponentDesc) {
  rcvr[which] = *renderComponentDesc;
}

Xgl_texture_blend_rgb* xgl_render_component_desc_op_blend_rgb (Xgl_render_component_desc* rcvr) {
   return &(rcvr->op.blend.rgb);
}
void xgl_render_component_desc_op_blend_rgb (Xgl_render_component_desc* rcvr, Xgl_texture_blend_rgb* rgb) {
   rcvr->op.blend.rgb = *rgb;
}

Xgl_texture_decal_rgb* xgl_render_component_desc_op_decal_rgb (Xgl_render_component_desc* rcvr) {
   return &(rcvr->op.decal.rgb);
}
void xgl_render_component_desc_op_decal_rgb (Xgl_render_component_desc* rcvr, Xgl_texture_decal_rgb* rgb) {
   rcvr->op.decal.rgb = *rgb;
}

void xgl_render_component_desc_set (Xgl_render_component_desc* rcvr,
	Xgl_render_component comp,
	Xgl_texture_blend_rgb* blend_rgb,
	Xgl_texture_op textureOp) {
  rcvr->comp = comp;
  rcvr->op.blend.rgb = *blend_rgb;
  rcvr->texture_op = textureOp;
}

void xgl_render_component_desc_set (Xgl_render_component_desc* rcvr,
	Xgl_render_component comp,
	Xgl_texture_decal_rgb* decal_rgb,
	Xgl_texture_op textureOp) {
  rcvr->comp = comp;
  rcvr->op.decal.rgb = *decal_rgb;
  rcvr->texture_op = textureOp;
}


// for Xgl_segment
Xgl_segment* xgl_segment_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_segment, count);
}
void xgl_segment_delete (Xgl_segment* rcvr) {
  delete [] rcvr;
}

Xgl_segment* xgl_segment_at (Xgl_segment* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_segment_at_put (Xgl_segment* rcvr, fint which, Xgl_segment* segment) {
  rcvr[which] = *segment;
}


// for Xgl_spline_data
Xgl_spline_data* xgl_spline_data_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_spline_data, count);
}
void xgl_spline_data_delete (Xgl_spline_data* rcvr) {
  delete [] rcvr;
}

Xgl_spline_data* xgl_spline_data_at (Xgl_spline_data* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_spline_data_at_put (Xgl_spline_data* rcvr, fint which, Xgl_spline_data* splineData) {
  rcvr[which] = *splineData;
}

float* xgl_spline_data_data (Xgl_spline_data* rcvr) {
   return rcvr->data;
}

// for Xgl_surf_color_spline
Xgl_surf_color_spline* xgl_surf_color_spline_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_surf_color_spline, count);
}
void xgl_surf_color_spline_delete (Xgl_surf_color_spline* rcvr) {
  delete [] rcvr;
}

Xgl_surf_color_spline* xgl_surf_color_spline_at (Xgl_surf_color_spline* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_surf_color_spline_at_put (Xgl_surf_color_spline* rcvr, fint which, Xgl_surf_color_spline* surfColorSpline) {
  rcvr[which] = *surfColorSpline;
}

void xgl_surf_color_spline_set (Xgl_surf_color_spline* rcvr,
	Xgl_color_homogeneous* colors,
	float* knotVectorU,
	float* knotVectorV,
	unsigned long numKnotsU,
	unsigned long numKnotsV,
	unsigned long orderU,
	unsigned long orderV) {
  rcvr->colors = colors;
  rcvr->knot_vector_u = knotVectorU;
  rcvr->knot_vector_v = knotVectorV;
  rcvr->num_knots_u = numKnotsU;
  rcvr->num_knots_v = numKnotsV;
  rcvr->order_u = orderU;
  rcvr->order_v = orderV;
}


// for Xgl_surf_data_spline
Xgl_surf_data_spline* xgl_surf_data_spline_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_surf_data_spline, count);
}
void xgl_surf_data_spline_delete (Xgl_surf_data_spline* rcvr) {
  delete [] rcvr;
}

Xgl_surf_data_spline* xgl_surf_data_spline_at (Xgl_surf_data_spline* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_surf_data_spline_at_put (Xgl_surf_data_spline* rcvr, fint which, Xgl_surf_data_spline* surfDataSpline) {
  rcvr[which] = *surfDataSpline;
}

void xgl_surf_data_spline_set (Xgl_surf_data_spline* rcvr,
	Xgl_spline_data* data,
	float* knotVectorU,
	float* knotVectorV,
	unsigned long numKnotsU,
	unsigned long numKnotsV,
	unsigned long orderU,
	unsigned long orderV) {
  rcvr->data = data;
  rcvr->knot_vector_u = knotVectorU;
  rcvr->knot_vector_v = knotVectorV;
  rcvr->num_knots_u = numKnotsU;
  rcvr->num_knots_v = numKnotsV;
  rcvr->order_u = orderU;
  rcvr->order_v = orderV;
}


// for Xgl_surf_data_spline_list
Xgl_surf_data_spline_list* xgl_surf_data_spline_list_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_surf_data_spline_list, count);
}
void xgl_surf_data_spline_list_delete (Xgl_surf_data_spline_list* rcvr) {
  delete [] rcvr;
}

Xgl_surf_data_spline_list* xgl_surf_data_spline_list_at (Xgl_surf_data_spline_list* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_surf_data_spline_list_at_put (Xgl_surf_data_spline_list* rcvr, fint which, Xgl_surf_data_spline_list* surfDataSplineList) {
  rcvr[which] = *surfDataSplineList;
}


// for Xgl_texture_blend_rgb
Xgl_texture_blend_rgb* xgl_texture_blend_rgb_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_texture_blend_rgb, count);
}
void xgl_texture_blend_rgb_delete (Xgl_texture_blend_rgb* rcvr) {
  delete [] rcvr;
}

Xgl_texture_blend_rgb* xgl_texture_blend_rgb_at (Xgl_texture_blend_rgb* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_texture_blend_rgb_at_put (Xgl_texture_blend_rgb* rcvr, fint which, Xgl_texture_blend_rgb* textureBlendRgb) {
  rcvr[which] = *textureBlendRgb;
}

Xgl_color_rgb* xgl_texture_blend_rgb_c1 (Xgl_texture_blend_rgb* rcvr) {
   return &(rcvr->c1);
}
void xgl_texture_blend_rgb_c1 (Xgl_texture_blend_rgb* rcvr, Xgl_color_rgb* c1) {
   rcvr->c1 = *c1;
}

Xgl_color_rgb* xgl_texture_blend_rgb_c2 (Xgl_texture_blend_rgb* rcvr) {
   return &(rcvr->c2);
}
void xgl_texture_blend_rgb_c2 (Xgl_texture_blend_rgb* rcvr, Xgl_color_rgb* c2) {
   rcvr->c2 = *c2;
}


// for Xgl_texture_color_comp_info
Xgl_texture_color_comp_info* xgl_texture_color_comp_info_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_texture_color_comp_info, count);
}
void xgl_texture_color_comp_info_delete (Xgl_texture_color_comp_info* rcvr) {
  delete [] rcvr;
}

Xgl_texture_color_comp_info* xgl_texture_color_comp_info_at (Xgl_texture_color_comp_info* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_texture_color_comp_info_at_put (Xgl_texture_color_comp_info* rcvr, fint which, Xgl_texture_color_comp_info* textureColorCompInfo) {
  rcvr[which] = *textureColorCompInfo;
}

Xgl_render_component_desc* xgl_texture_color_comp_info_render_component_desc (Xgl_texture_color_comp_info* rcvr) {
   return rcvr->render_component_desc;
}

// for Xgl_texture_decal_rgb
Xgl_texture_decal_rgb* xgl_texture_decal_rgb_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_texture_decal_rgb, count);
}
void xgl_texture_decal_rgb_delete (Xgl_texture_decal_rgb* rcvr) {
  delete [] rcvr;
}

Xgl_texture_decal_rgb* xgl_texture_decal_rgb_at (Xgl_texture_decal_rgb* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_texture_decal_rgb_at_put (Xgl_texture_decal_rgb* rcvr, fint which, Xgl_texture_decal_rgb* textureDecalRgb) {
  rcvr[which] = *textureDecalRgb;
}

Xgl_color_rgb* xgl_texture_decal_rgb_c (Xgl_texture_decal_rgb* rcvr) {
   return &(rcvr->c);
}
void xgl_texture_decal_rgb_c (Xgl_texture_decal_rgb* rcvr, Xgl_color_rgb* c) {
   rcvr->c = *c;
}


// for Xgl_texture_desc
Xgl_texture_desc* xgl_texture_desc_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_texture_desc, count);
}
void xgl_texture_desc_delete (Xgl_texture_desc* rcvr) {
  delete [] rcvr;
}

Xgl_texture_desc* xgl_texture_desc_at (Xgl_texture_desc* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_texture_desc_at_put (Xgl_texture_desc* rcvr, fint which, Xgl_texture_desc* textureDesc) {
  rcvr[which] = *textureDesc;
}

Xgl_texture_color_comp_info* xgl_texture_desc_comp_info (Xgl_texture_desc* rcvr) {
   return &(rcvr->comp_info);
}
void xgl_texture_desc_comp_info (Xgl_texture_desc* rcvr, Xgl_texture_color_comp_info* compInfo) {
   rcvr->comp_info = *compInfo;
}

Xgl_texture_mipmap_desc* xgl_texture_desc_info_mipmap (Xgl_texture_desc* rcvr) {
   return &(rcvr->info.mipmap);
}
void xgl_texture_desc_info_mipmap (Xgl_texture_desc* rcvr, Xgl_texture_mipmap_desc* mipmap) {
   rcvr->info.mipmap = *mipmap;
}

Xgl_texture_interp_info* xgl_texture_desc_interp_info (Xgl_texture_desc* rcvr) {
   return &(rcvr->interp_info);
}
void xgl_texture_desc_interp_info (Xgl_texture_desc* rcvr, Xgl_texture_interp_info* interpInfo) {
   rcvr->interp_info = *interpInfo;
}

void xgl_texture_desc_set (Xgl_texture_desc* rcvr,
	Xgl_texture_color_comp_info* compInfo,
	Xgl_texture_mipmap_desc* info_mipmap,
	Xgl_texture_interp_info* interpInfo,
	Xgl_texture_type textureType) {
  rcvr->comp_info = *compInfo;
  rcvr->info.mipmap = *info_mipmap;
  rcvr->interp_info = *interpInfo;
  rcvr->texture_type = textureType;
}


// for Xgl_texture_interp_info
Xgl_texture_interp_info* xgl_texture_interp_info_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_texture_interp_info, count);
}
void xgl_texture_interp_info_delete (Xgl_texture_interp_info* rcvr) {
  delete [] rcvr;
}

Xgl_texture_interp_info* xgl_texture_interp_info_at (Xgl_texture_interp_info* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_texture_interp_info_at_put (Xgl_texture_interp_info* rcvr, fint which, Xgl_texture_interp_info* textureInterpInfo) {
  rcvr[which] = *textureInterpInfo;
}

void xgl_texture_interp_info_set (Xgl_texture_interp_info* rcvr,
	Xgl_texture_interp_method filter1,
	Xgl_texture_interp_method filter2) {
  rcvr->filter1 = filter1;
  rcvr->filter2 = filter2;
}


// for Xgl_texture_mipmap_desc
Xgl_texture_mipmap_desc* xgl_texture_mipmap_desc_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_texture_mipmap_desc, count);
}
void xgl_texture_mipmap_desc_delete (Xgl_texture_mipmap_desc* rcvr) {
  delete [] rcvr;
}

Xgl_texture_mipmap_desc* xgl_texture_mipmap_desc_at (Xgl_texture_mipmap_desc* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_texture_mipmap_desc_at_put (Xgl_texture_mipmap_desc* rcvr, fint which, Xgl_texture_mipmap_desc* textureMipmapDesc) {
  rcvr[which] = *textureMipmapDesc;
}

unsigned char* xgl_texture_mipmap_desc_boundary_values (Xgl_texture_mipmap_desc* rcvr) {
   return rcvr->boundary_values;
}
void xgl_texture_mipmap_desc_set (Xgl_texture_mipmap_desc* rcvr,
	float depthInterpFactor,
	float maxUFreq,
	float maxVFreq,
	Xgl_object_obj* textureMap,
	Xgl_texture_boundary uBoundary,
	Xgl_texture_boundary vBoundary) {
  rcvr->depth_interp_factor = depthInterpFactor;
  rcvr->max_u_freq = maxUFreq;
  rcvr->max_v_freq = maxVFreq;
  rcvr->texture_map = textureMap;
  rcvr->u_boundary = uBoundary;
  rcvr->v_boundary = vBoundary;
}


// for Xgl_threshold
Xgl_threshold* xgl_threshold_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_threshold, count);
}
void xgl_threshold_delete (Xgl_threshold* rcvr) {
  delete [] rcvr;
}

Xgl_threshold* xgl_threshold_at (Xgl_threshold* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_threshold_at_put (Xgl_threshold* rcvr, fint which, Xgl_threshold* threshold) {
  rcvr[which] = *threshold;
}

void xgl_threshold_set (Xgl_threshold* rcvr,
	unsigned long circles,
	unsigned long polygons,
	unsigned long vectors) {
  rcvr->circles = circles;
  rcvr->polygons = polygons;
  rcvr->vectors = vectors;
}


// for Xgl_trim_curve
Xgl_trim_curve* xgl_trim_curve_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_trim_curve, count);
}
void xgl_trim_curve_delete (Xgl_trim_curve* rcvr) {
  delete [] rcvr;
}

Xgl_trim_curve* xgl_trim_curve_at (Xgl_trim_curve* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_trim_curve_at_put (Xgl_trim_curve* rcvr, fint which, Xgl_trim_curve* trimCurve) {
  rcvr[which] = *trimCurve;
}

Xgl_pt_list* xgl_trim_curve_ctrl_pts (Xgl_trim_curve* rcvr) {
   return &(rcvr->ctrl_pts);
}
void xgl_trim_curve_ctrl_pts (Xgl_trim_curve* rcvr, Xgl_pt_list* ctrlPts) {
   rcvr->ctrl_pts = *ctrlPts;
}

Xgl_bounds_f1d* xgl_trim_curve_range (Xgl_trim_curve* rcvr) {
   return &(rcvr->range);
}
void xgl_trim_curve_range (Xgl_trim_curve* rcvr, Xgl_bounds_f1d* range) {
   rcvr->range = *range;
}


// for Xgl_trim_loop
Xgl_trim_loop* xgl_trim_loop_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_trim_loop, count);
}
void xgl_trim_loop_delete (Xgl_trim_loop* rcvr) {
  delete [] rcvr;
}

Xgl_trim_loop* xgl_trim_loop_at (Xgl_trim_loop* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_trim_loop_at_put (Xgl_trim_loop* rcvr, fint which, Xgl_trim_loop* trimLoop) {
  rcvr[which] = *trimLoop;
}


// for Xgl_trim_loop_list
Xgl_trim_loop_list* xgl_trim_loop_list_new (fint count) {
  return NEW_C_HEAP_ARRAY(Xgl_trim_loop_list, count);
}
void xgl_trim_loop_list_delete (Xgl_trim_loop_list* rcvr) {
  delete [] rcvr;
}

Xgl_trim_loop_list* xgl_trim_loop_list_at (Xgl_trim_loop_list* rcvr, fint which) {
  return &(rcvr[which]);
}
void xgl_trim_loop_list_at_put (Xgl_trim_loop_list* rcvr, fint which, Xgl_trim_loop_list* trimLoopList) {
  rcvr[which] = *trimLoopList;
}


// accessors for c-style vector proxies
// for Int_vec_proxy
int* int_vec_proxy_new (fint count) {
  return new int[count];
}
void int_vec_proxy_delete (int* intVec) {
  delete [] intVec;
}

int int_vec_proxy_at (int* intVec, fint which) {
  return intVec[which];
}
void int_vec_proxy_at_put (int* intVec, fint which, int data) {	
    intVec[which] = data;
}


// for Long_vec_proxy
long* long_vec_proxy_new (fint count) {
  return new long[count];
}
void long_vec_proxy_delete (long* longVec) {
  delete [] longVec;
}

long long_vec_proxy_at (long* longVec, fint which) {
  return longVec[which];
}
void long_vec_proxy_at_put (long* longVec, fint which, long data) {	
    longVec[which] = data;
}


// for Float_vec_proxy
float* float_vec_proxy_new (fint count) {
  return new float[count];
}
void float_vec_proxy_delete (float* floatVec) {
  delete [] floatVec;
}

float float_vec_proxy_at (float* floatVec, fint which) {
  return floatVec[which];
}
void float_vec_proxy_at_put (float* floatVec, fint which, float data) {	
    floatVec[which] = data;
}


// for Double_vec_proxy
double* double_vec_proxy_new (fint count) {
  return new double[count];
}
void double_vec_proxy_delete (double* doubleVec) {
  delete [] doubleVec;
}

double double_vec_proxy_at (double* doubleVec, fint which) {
  return doubleVec[which];
}
void double_vec_proxy_at_put (double* doubleVec, fint which, double data) {	
    doubleVec[which] = data;
}


// for Unsigned_char_vec_proxy
unsigned char* unsigned_char_vec_proxy_new (fint count) {
  return new unsigned char[count];
}
void unsigned_char_vec_proxy_delete (unsigned char* unsignedCharVec) {
  delete [] unsignedCharVec;
}

unsigned char unsigned_char_vec_proxy_at (unsigned char* unsignedCharVec, fint which) {
  return unsignedCharVec[which];
}
void unsigned_char_vec_proxy_at_put (unsigned char* unsignedCharVec, fint which, unsigned char data) {	
    unsignedCharVec[which] = data;
}


// for Xgl_objects
Xgl_object* xgl_object_new (fint count) {
  return new Xgl_object[count];
}
void xgl_object_delete (Xgl_object* objectVec, fint count) {
  for (int i = 0; i < count; i++) xgl_object_destroy(objectVec[i]);
}

Xgl_object xgl_object_at (Xgl_object* objectVec, fint which) {
  return objectVec[which];
}
void xgl_object_at_put (Xgl_object* objectVec, fint which, Xgl_object object) {	
    objectVec[which] = object;
}


// This is a silly wrapper - but I hate having to pass a trailing 0.
Xgl_sys_state xgl_open_no_args () { return xgl_open(XGL_UNUSED); }


#define WHAT_GLUE FUNCTIONS
   xgl_glue
#undef WHAT_GLUE
