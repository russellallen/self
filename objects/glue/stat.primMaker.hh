/* This information was generated by the primitive maker (primitiveMaker.self).
Please do not change it manually. -- dmu 12/91  */\
\
# ifdef INTERFACE_PRAGMAS
# pragma interface
# endif
/* Copyright 1992-2012 AUTHORS.  */\
\
/* See the LICENSE file for license information.  */\
\
# define stat_entries \
\
{ "stat_type_deletedelete", \
fntype(&stat_type_delete_Delete_glue), \
ExternalPrimitive, \
UnknownPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_type_st_devst_dev", \
fntype(&stat_type_st_dev_St_dev_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_type_st_inost_ino", \
fntype(&stat_type_st_ino_St_ino_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_type_st_modest_mode", \
fntype(&stat_type_st_mode_St_mode_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_type_st_nlinkst_nlink", \
fntype(&stat_type_st_nlink_St_nlink_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_type_st_uidst_uid", \
fntype(&stat_type_st_uid_St_uid_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_type_st_gidst_gid", \
fntype(&stat_type_st_gid_St_gid_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_type_st_rdevst_rdev", \
fntype(&stat_type_st_rdev_St_rdev_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_type_st_sizest_size", \
fntype(&stat_type_st_size_St_size_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_type_st_blksizest_blksize", \
fntype(&stat_type_st_blksize_St_blksize_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_type_st_blocksst_blocks", \
fntype(&stat_type_st_blocks_St_blocks_glue), \
ExternalPrimitive, \
IntegerPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "s_isdir_wrappers_isdir", \
fntype(&s_isdir_wrapper_S_isdir_glue), \
ExternalPrimitive, \
BooleanPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "s_ischr_wrappers_ischr", \
fntype(&s_ischr_wrapper_S_ischr_glue), \
ExternalPrimitive, \
BooleanPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "s_isblk_wrappers_isblk", \
fntype(&s_isblk_wrapper_S_isblk_glue), \
ExternalPrimitive, \
BooleanPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "s_isreg_wrappers_isreg", \
fntype(&s_isreg_wrapper_S_isreg_glue), \
ExternalPrimitive, \
BooleanPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "s_islnk_wrappers_islnk", \
fntype(&s_islnk_wrapper_S_islnk_glue), \
ExternalPrimitive, \
BooleanPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "s_issock_wrappers_issock", \
fntype(&s_issock_wrapper_S_issock_glue), \
ExternalPrimitive, \
BooleanPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "s_isfifo_wrappers_isfifo", \
fntype(&s_isfifo_wrapper_S_isfifo_glue), \
ExternalPrimitive, \
BooleanPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_st_atime_wrapperst_atime", \
fntype(&stat_st_atime_wrapper_St_atime_glue), \
ExternalPrimitive, \
UnknownPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_st_mtime_wrapperst_mtime", \
fntype(&stat_st_mtime_wrapper_St_mtime_glue), \
ExternalPrimitive, \
UnknownPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_st_ctime_wrapperst_ctime", \
fntype(&stat_st_ctime_wrapper_St_ctime_glue), \
ExternalPrimitive, \
UnknownPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "stat_wrapperstatResultProxy:", \
fntype(&stat_wrapper_Stat__glue), \
ExternalPrimitive, \
UnknownPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "lstat_wrapperlstatResultProxy:", \
fntype(&lstat_wrapper_Lstat__glue), \
ExternalPrimitive, \
UnknownPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \
{ "fstat_wrapperfstatResultProxy:", \
fntype(&fstat_wrapper_Fstat_glue), \
ExternalPrimitive, \
UnknownPrimType, \
true, /* can fail               */ \
false, /* can scavenge           */ \
false, /* can be constant folded */ \
true, /* cannot be moved or cut */ \
false, /* can walk stack         */ \
false, /* can abort process      */ \
"Generated by the primitive maker" },\
 \


/* This information was generated by the primitive maker (primitiveMaker.self).
Please do not change it manually. -- dmu 12/91  */\
\
# ifdef INTERFACE_PRAGMAS
# pragma interface
# endif
/* Copyright 1992-2012 AUTHORS.  */\
\
/* See the LICENSE file for license information.  */\
\
# define stat_glue    \
\
 CC_delete( proxy,(stat_type*,stat_type_seal), stat_type_delete_Delete_glue) \
 C_get_comp( short,, proxy,(stat_type*,stat_type_seal), .st_dev, stat_type_st_dev_St_dev_glue) \
 C_get_comp( unsigned_long,, proxy,(stat_type*,stat_type_seal), .st_ino, stat_type_st_ino_St_ino_glue) \
 C_get_comp( unsigned_short,, proxy,(stat_type*,stat_type_seal), .st_mode, stat_type_st_mode_St_mode_glue) \
 C_get_comp( short,, proxy,(stat_type*,stat_type_seal), .st_nlink, stat_type_st_nlink_St_nlink_glue) \
 C_get_comp( unsigned_short,, proxy,(stat_type*,stat_type_seal), .st_uid, stat_type_st_uid_St_uid_glue) \
 C_get_comp( unsigned_short,, proxy,(stat_type*,stat_type_seal), .st_gid, stat_type_st_gid_St_gid_glue) \
 C_get_comp( short,, proxy,(stat_type*,stat_type_seal), .st_rdev, stat_type_st_rdev_St_rdev_glue) \
 C_get_comp( long,, proxy,(stat_type*,stat_type_seal), .st_size, stat_type_st_size_St_size_glue) \
 C_get_comp( long,, proxy,(stat_type*,stat_type_seal), .st_blksize, stat_type_st_blksize_St_blksize_glue) \
 C_get_comp( long,, proxy,(stat_type*,stat_type_seal), .st_blocks, stat_type_st_blocks_St_blocks_glue) \
 C_func_1( bool,, s_isdir_wrapper, s_isdir_wrapper_S_isdir_glue, , proxy,(stat_type*,stat_type_seal)) \
 C_func_1( bool,, s_ischr_wrapper, s_ischr_wrapper_S_ischr_glue, , proxy,(stat_type*,stat_type_seal)) \
 C_func_1( bool,, s_isblk_wrapper, s_isblk_wrapper_S_isblk_glue, , proxy,(stat_type*,stat_type_seal)) \
 C_func_1( bool,, s_isreg_wrapper, s_isreg_wrapper_S_isreg_glue, , proxy,(stat_type*,stat_type_seal)) \
 C_func_1( bool,, s_islnk_wrapper, s_islnk_wrapper_S_islnk_glue, , proxy,(stat_type*,stat_type_seal)) \
 C_func_1( bool,, s_issock_wrapper, s_issock_wrapper_S_issock_glue, , proxy,(stat_type*,stat_type_seal)) \
 C_func_1( bool,, s_isfifo_wrapper, s_isfifo_wrapper_S_isfifo_glue, , proxy,(stat_type*,stat_type_seal)) \
 C_func_1( oop,, stat_st_atime_wrapper, stat_st_atime_wrapper_St_atime_glue, , proxy,(stat_type*,stat_type_seal)) \
 C_func_1( oop,, stat_st_mtime_wrapper, stat_st_mtime_wrapper_St_mtime_glue, , proxy,(stat_type*,stat_type_seal)) \
 C_func_1( oop,, stat_st_ctime_wrapper, stat_st_ctime_wrapper_St_ctime_glue, , proxy,(stat_type*,stat_type_seal)) \
 C_func_1( proxy,(stat_type*,stat_type_seal), stat_wrapper, stat_wrapper_Stat__glue, fail, string,) \
 C_func_1( proxy,(stat_type*,stat_type_seal), lstat_wrapper, lstat_wrapper_Lstat__glue, fail, string,) \
 C_func_1( proxy,(stat_type*,stat_type_seal), fstat_wrapper, fstat_wrapper_Fstat_glue, fail, proxy_null,(int,UnixFile_seal)) \


