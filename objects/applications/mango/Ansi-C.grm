(* Sun-$Revision: 30.6 $ *)
 
(* Copyright 1992-2012 AUTHORS.
   See the LICENSE file for license information. *)
 


(* This structured grammar has been obtained by "structuring" the grammar in
   the book "The C Programming Language" by Kernighan/Ritchie (ANSI version).

   The terminal and nonterminal names used in this grammar are the same as
   in the book, except for the following abbreviations:

      decl  for  declaration
      exp   for  expression
      def   for  definition

   (and perhaps a few other abbreviations that I have forgotten right now).

   The major change in the grammar, apart from using structured productions,
   is a refactoring of the type_specifier/type_qualifier/storage_class
   related productions. The refactoring expresses that there can only be
   one type name in a declaration (e.g. the ANSI grammar derives float int x;).
   The refactoring also helps control ambiguities even though some 
   occurrences of {identifier} have been replaced with 
   <identifier_or_typedef_name>.

   The only other thing in this grammar that is not explained in the book 
   is the typedef hack. So what is this about typedef?

   The C grammar contains an ambiguity (sigh!) which can be resolved by
   providing context dependent information. The context dependent information
   is obtained by splitting the token kind 'identifier' into two: 'identifier'
   and 'typedef_name'. Next a filter is inserted between the lexer and parser.
   The filter looks at the tokens produced by the lexer. The default behavior
   is to pass the token onto the parser unchanged. However, if the token has
   kind 'identifier', and the particular instance has a name that matches a
   name that has previously been typedeffed, the kind of the token is changed 
   from 'identifier' to 'typedef_name'.

   The filter, which we call typedefFilter, contains a set of names that
   have been typedeffed. Since C allows typedeffed names to be redeclared
   as non-typedef things in inner scopes the typedef filter must be informed
   whenever a scope is entered or left.

   The bad side of all this is that the typedefFilter relies heavily on
   side effects that must take place during parsing. We perform these
   side effects as a part of initializing the nodes in the parse trees.
   This means that the order that certain nodes are constructed in
   is critical. Inlining of productions changes this order so we need
   a mechanism for controlling (preventing) inlining. This is the
   'dontInline:' transformation.

   Expect 4 s/r conflicts, 4 r/r conflicts. 
   Since there are r/r conflicts in this grammar, it is important that
   productions are not arbitrarily moved around (the default resolution
   rule for reduce/reduce conflicts is to reduce with the production
   occurring earlier in the grammar). 
*)

Name:     'Ansi-C'
Behavior: 'Ansi-C.behavior.self'
Options:  'typedefKludge';

Syntax: LALR(1)
Transformations: 'dontInline: start_scope',
                 'dontInline: end_scope',
                 'dontInline: core_decl',
                 'elimEpsilons', 
                 'elimSingletons',
                 'flatten: real',     'inline: real',
                 'flatten: integral', 'inline: integral' ;

<translation_unit> ::+ <external_decl> ;

<external_decl> ::| <function_def> <decl> ;

<function_def> ::= <decl_specifiers_opt>
                   <declarator>
                   <decl_list_opt>
                   <compound_stmt> ;

<decl_list> ::+ <decl> ;

<decl>      ::= <core_decl> ';' ;
<core_decl> ::= <decl_specifiers> <init_declarator_list> ;

<decl_specifiers> ::| <no_sc_decl_specifiers> 
                         <sc_decl_specifiers> ;

<no_sc_decl_specifiers> ::| <decl_specifiers1>
                            <decl_specifiers2>
                            <decl_specifiers3> ;

<sc_decl_specifiers>    ::| <decl_specifiers4>
                            <decl_specifiers5>
                            <decl_specifiers6>
                            <decl_specifiers7> ;

<decl_specifiers1> ::=                                   <type_specifier> ;
<decl_specifiers2> ::=                 <type_qualifier>                   ;
<decl_specifiers3> ::=                 <type_qualifier>  <type_specifier> ;
<decl_specifiers4> ::= <storage_class>                                    ;
<decl_specifiers5> ::= <storage_class>                   <type_specifier> ;
<decl_specifiers6> ::= <storage_class> <type_qualifier>                   ;
<decl_specifiers7> ::= <storage_class> <type_qualifier>  <type_specifier> ;

<storage_class>    ::| 'auto'
                       'register'
                       'static'
                       'extern'
                       'typedef' ;

<type_specifier>   ::| 'void'
                       <real>
                       <integral>
                       <struct_or_union_specifier>
                       <enum_specifier>
                       {typedef_name} ;
                          
<real>             ::| <float_specifier>
                       <double_specifier> 
                       <long_double_specifier> ;

(* Disallows "long long double". *)
<float_specifier>       ::= 'float'  ;
<double_specifier>      ::= 'double' ;
<long_double_specifier> ::= 'long' 'double' ;

<sign_size>  ::| <sign_size1> <sign_size2> ;
<sign_size1> ::= <sign> <size_opt> ;
<sign_size2> ::= <size> <sign_opt> ;
<size>       ::| <short_size> <long_size> ;
<sign>       ::| 'signed'  'unsigned' ;

<short_size> ::= 'short' ;  (* To avoid MI. *)
<short_type> ::= 'short' ;
<long_size>  ::= 'long'  ;
<long_type>  ::= 'long'  ;

(* Disallows "long long int". *)
<integral>  ::| <integral1> <integral2> <integral3> <integral4> <integral5> ;
<integral1> ::= 'int' ;
<integral2> ::= <sign_size> 'int' ;
<integral3> ::= <int_opt> <sign_size> ;
<integral4> ::= <sign_opt> <nonsizable_integral> ;
<integral5> ::= <nonsizable_integral> <sign_opt> ;

<nonsizable_integral> ::| 'char' <short_type> <long_type> ;

<type_qualifier> ::| 'const'  'volatile' ;

<struct_or_union_specifier> ::| <su_def> <su_decl> ;

<su_def>  ::= <struct_or_union> 
              <identifier_or_typedef_name_opt> 
              '{' <struct_decl_list> '}' ;

<identifier_or_typedef_name> ::| <identifier2> <typedef_name2> ; 

<typedef_name2> ::= {name:typedef_name} ;  (* To avoid MI. *)
<identifier2>   ::= {name:identifier} ;

<su_decl>          ::= <struct_or_union> <identifier_or_typedef_name> ;
<struct_or_union>  ::| 'struct'  'union' ;
<struct_decl_list> ::+ <struct_decl> ;

<int_opt>                        ::? 'int'                        ;
<sign_opt>                       ::? <sign>                       ;
<size_opt>                       ::? <size>                       ;
<decl_specifiers_opt>            ::? <decl_specifiers>            ;
<parameter_type_list_opt>        ::? <parameter_type_list>        ;
<declarator_opt>                 ::? <declarator>                 ;
<constant_exp_opt>               ::? <constant_exp>               ;
<exp_opt>                        ::? <exp>                        ;
<ellipsis_opt>                   ::? <ellipsis>                   ;
<abstract_declarator_opt>        ::? <abstract_declarator>        ;
<comma_opt>                      ::? ','                          ;
<pointer_opt>                    ::? <pointer>                    ;
<direct_abstract_declarator_opt> ::? <direct_abstract_declarator> ;
<decl_list_opt>                  ::? <decl_list>                  ;
<enum_initializer_opt>           ::? <enum_initializer>           ;
<identifier_or_typedef_name_opt> ::? <identifier_or_typedef_name> ;

<init_declarator_list> ::* <init_declarator> ',' ;

<init_declarator> ::| <i_declarator> <declarator_and_initializer> ;

<i_declarator> ::= <declarator> ;  (* To avoid MI in grammar. *)

<declarator_and_initializer> ::=  <declarator> '=' <initializer> ;

<struct_decl> ::= <no_sc_decl_specifiers> <struct_declarator_list> ';' ;

<struct_declarator_list> ::+ <struct_declarator> ',' ;

<struct_declarator> ::| <s_declarator> <field> ;

<s_declarator> ::= <declarator> ; (* To avoid MI in grammar. *)

<field> ::= <declarator_opt> ':' <constant_exp> ;

<enum_specifier>   ::| <enum_def> <enum_decl> ;

<enum_decl>        ::= 'enum' <identifier_or_typedef_name> ;
<enum_def>         ::= 'enum' <identifier_or_typedef_name_opt>
                       '{' <enumerator_list> <comma_opt> '}' ;
(* Is <identifier_or_typedef_name> really the right thing to use above,
   or should it just be {identifier}? gcc can't really make up it's mind. *) 

<enumerator_list>  ::+ <enumerator> ',' ;
<enumerator>       ::= {identifier} <enum_initializer_opt> ;
<enum_initializer> ::= '=' <constant_exp> ;

<declarator>       ::= <pointer_opt> <direct_declarator> ;

<direct_declarator> ::= <direct_declarator_part1> <direct_declarator_part2> ;

<direct_declarator_part1> ::| <declarator_identifier> <paren_declarator> ;

<declarator_identifier> ::= <id:identifier_or_typedef_name> ;

<paren_declarator> ::= '(' <declarator> ')' ;

<direct_declarator_part2> ::* <a_or_f_declarator> ;

<a_or_f_declarator> ::| <array_declarator>
                        <fct_argtype_declarator>
                        <fct_argname_declarator>  ;

<array_declarator>       ::= '[' <constant_exp_opt>    ']' ;
<fct_argtype_declarator> ::= '(' <parameter_type_list> ')' ;
<fct_argname_declarator> ::= '(' <identifier_list>     ')' ;

<pointer> ::+ <star_type_qualifier_list> ;

<star_type_qualifier_list> ::= '*' <type_qualifier_list> ;

<type_qualifier_list> ::* <type_qualifier> ;

<parameter_type_list> ::= <parameter_list>  <ellipsis_opt> ;

<ellipsis> ::= ','  '...' ;

<parameter_list> ::+ <parameter_decl> ',' ;

<parameter_decl> ::= <decl_specifiers> <abstract_or_concrete_pd> ;

<abstract_or_concrete_pd> ::| <abstract_pd> <concrete_pd> ;

<concrete_pd> ::= <declarator> ;

<abstract_pd> ::= <abstract_declarator_opt> ;

<identifier_list> ::* {identifier} ',' ;

<initializer> ::| <simple_initializer> <compound_initializer> ;

<simple_initializer> ::= <assignment_exp> ;

<compound_initializer> ::= '{' <initializer_list> <comma_opt> '}' ;

<initializer_list> ::+ <initializer> ',' ;

<type_name> ::= <no_sc_decl_specifiers> <abstract_declarator_opt> ;

<abstract_declarator> ::| <pointer_only>
                          <pointer_opt_direct_abstract_declarator> ;

<pointer_only> ::= <pointer> ;

<pointer_opt_direct_abstract_declarator> ::= <pointer_opt>
                                             <direct_abstract_declarator> ;

<direct_abstract_declarator> ::| <paren_abstract_declarator>
                                 <other_abstract_declarator> ;

<paren_abstract_declarator> ::= '(' <abstract_declarator> ')' ;

<other_abstract_declarator> ::= <direct_abstract_declarator_opt>
                                <array_or_fct_ad> ;

<array_or_fct_ad> ::| <array_ad> <fct_ad> ;

<array_ad> ::= '[' <constant_exp_opt>        ']' ;
<fct_ad>   ::= '(' <parameter_type_list_opt> ')' ;

(* <typedef_name> ::= {identifier} ;    (* THE BAD ONE! *) *)

<stmt> ::| <labeled_stmt> 
           <exp_stmt> 
           <compound_stmt> 
           <selection_stmt> 
           <iteration_stmt> 
           <jump_stmt>    ;

<labeled_stmt> ::= <label> ':' <stmt> ;

<label> ::| <ident_label> <case_label> ;

<ident_label> ::= <identifier_or_typedef_name> ;

<case_label> ::| <case_exp_label>  'default' ;

<case_exp_label> ::= 'case' <constant_exp> ;

<exp_stmt> ::= <exp_opt> ';' ;

<compound_stmt> ::= <start_scope> <decl_list_opt> <stmt_list> <end_scope> ;

<start_scope> ::= '{' ;    (* Necessary for typedef. *)
<end_scope>   ::= '}' ;    (* Necessary for typedef. *)

<stmt_list> ::* <stmt> ;

<selection_stmt> ::| <if_stmt> <if_else_stmt> <switch_stmt> ;

<if_stmt>      ::= 'if'  '(' <exp> ')' <thenpart:stmt> ;
<if_else_stmt> ::= 'if'  '(' <exp> ')' <thenpart:stmt> 'else' <elsepart:stmt> ;
<switch_stmt>  ::= 'switch' '(' <exp> ')' <stmt> ;

<iteration_stmt> ::| <while_stmt> <do_stmt> <for_stmt> ;
<while_stmt>     ::= 'while' '('  <exp> ')' <stmt> ;
<do_stmt>        ::= 'do' <stmt> 'while' '('  <exp> ')' ';' ;

<for_stmt>   ::= 'for' '(' <init:exp_opt> ';'
                           <step:exp_opt> ';'
                           <test:exp_opt>  ')' <stmt> ;

<jump_stmt>  ::| <goto_stmt> <continue_stmt> <break_stmt> <return_stmt> ;

<goto_stmt>     ::= 'goto' <identifier_or_typedef_name> ';' ;
<continue_stmt> ::= 'continue'                          ';' ;
<break_stmt>    ::= 'break'                             ';' ;
<return_stmt>   ::= 'return' <exp_opt>                  ';' ;

<exp> ::+ <assignment_exp> ',' ;

<assignment_exp> ::= <assignment_list> <conditional_exp> ;

<assignment_list> ::* <assign> ;

<assign> ::= <unary_exp> <assignment_operator> ;

<assignment_operator> ::| '='
                          '*='
                          '/='
                          '%='
                          '+='
                          '-='
                          '<<='
                          '>>='
                          '&='
                          '^='
                          '|=' ;

<conditional_exp> ::= <cond_stuff_list> <logical_OR_exp> ;

<cond_stuff_list> ::* <cond_stuff> ;

<cond_stuff> ::= <logical_OR_exp> '?' <exp> ':' ;

<constant_exp> ::= <conditional_exp> ;

<logical_OR_exp>     ::+ <logical_AND_exp>    '||' ;
<logical_AND_exp>    ::+ <inclusive_OR_exp>   '&&' ;
<inclusive_OR_exp>   ::+ <exclusive_OR_exp>   '|'  ;
<exclusive_OR_exp>   ::+ <AND_exp>            '^'  ;
<AND_exp>            ::+ <equality_exp>       '&'  ;
<equality_exp>       ::+ <relational_exp>     <eq_op>    ;
<relational_exp>     ::+ <shift_exp>          <rel_op>   ;
<shift_exp>          ::+ <additive_exp>       <shift_op> ;
<additive_exp>       ::+ <multiplicative_exp> <add_op>   ;
<multiplicative_exp> ::+ <cast_exp>           <mul_op>   ;

<eq_op>    ::| '=='  '!='             ;
<rel_op>   ::| '<'   '>'   '<='  '>=' ;
<shift_op> ::| '<<'  '>>'             ;
<add_op>   ::| '+'   '-'              ;
<mul_op>   ::| '*'   '/'   '%'        ;

<cast_exp>  ::= <cast_list> <unary_exp>  ;
<cast_list> ::* <cast>                   ;
<cast>      ::= '(' <type_name> ')'      ;

(* Could perhaps be structured more. But beware of possible conflict 
   introduced by two uses of sizeof. *)
<unary_exp> ::| <postfix_exp>   
                <preinc_unary_exp>
                <predec_unary_exp>
                <sizeof_unary_exp>
                <sizeof_type_name>
                <unary_operator_cast_exp> ;

<preinc_unary_exp>        ::= '++' <unary_exp> ;
<predec_unary_exp>        ::= '--' <unary_exp> ;
<sizeof_unary_exp>        ::= 'sizeof' <unary_exp> ;
<sizeof_type_name>        ::= 'sizeof' '(' <type_name> ')' ;
<unary_operator_cast_exp> ::= <unary_operator> <cast_exp> ;

<unary_operator> ::| <deref>
                     <addr_of>
                     <unary_plus>
                     <unary_minus>
                     <bit_complement>
                     <negation>   ;

<deref>          ::=  '*' ;
<addr_of>        ::=  '&' ;
<unary_plus>     ::=  '+' ;
<unary_minus>    ::=  '-' ;
<bit_complement> ::=  '~' ;
<negation>       ::=  '!' ;

<postfix_exp> ::= <primary_exp> <postfix_op_list> ;
<postfix_op_list> ::* <postfix_op> ;

<postfix_op> ::| <indexing> <fct_call> <dot> <arrow> <postinc> <postdec> ;

<indexing> ::= '[' <exp> ']' ;
<fct_call> ::= '(' <argument_exp_list> ')' ;
<dot>      ::= '.'  <identifier_or_typedef_name> ;
<arrow>    ::= '->' <identifier_or_typedef_name> ;
<postinc>  ::= '++' ;
<postdec>  ::= '--' ;

<primary_exp> ::| <identifier_exp> <constant> <string_list> <paren_exp> ;

<string_list>    ::+ {string} ;
<identifier_exp> ::= {identifier} ;
<paren_exp>      ::= '(' <exp> ')' ;

<argument_exp_list> ::* <assignment_exp> ',' ;

<constant> ::| {integer_constant} {character_constant} {floating_constant} ;

(******************************* Lex part ************************************)

Lex:  SLR(1)
Transformations: 'elimEpsilons', 
                 'elimSingletons',
                 'useCharClasses' ;

(* output tokens *)

  {identifier}         -> ('_' | {letter}) ({letter} | {digit} | '_')* ;
  {string}             -> '"'  {stringChar}*  '"'  ;
  {character_constant} -> '\'' {charChar}*    '\'' ;
  {integer_constant}   -> {basicInteger}   {intSuffix} ;
  {floating_constant}  -> {basicFloat}   {floatSuffix} ;
  {whitespace}         -> [ \t\v\f\n]+ ;

(* string productions *)

  {stringChar}          = '\'' | {stringOrCharChar} ;
  {charChar}            = '"'  | {stringOrCharChar} ;
  {stringOrCharChar}    =  [^\\"'] | '\\' {escape} ;

  {escape}          =  {nlEsc} | {tabEsc} | {vtEsc}  | {bspEsc} | {crEsc}
                    |  {ffEsc} | {belEsc} | {bslEsc} | {qmEsc}  | {apEsc}
                    |  {dqEsc} | {octEsc} | 'x' {hexEsc}
                    |  {redundantEsc} ;
                       (* Apparently Ansi C is inconsistent: it disallows 'X'
                          as a hex specifier in hex escapes, but allows it in
                          hex integers. *)

  {bslEsc}          =  '\\';
  {qmEsc}           =  '?' ;
  {apEsc}           =  '\'';
  {dqEsc}           =  '"' ;
  {belEsc}          =  'a' ;
  {bspEsc}          =  'b' ;
  {ffEsc}           =  'f' ;
  {nlEsc}           =  'n' ;
  {crEsc}           =  'r' ;
  {tabEsc}          =  't' ;
  {vtEsc}           =  'v' ;

  {octEsc}          =  {octalDigit} |
                       {octalDigit} {octalDigit} |
                       {octalDigit} {octalDigit} {octalDigit} ;

  {hexEsc}          =  {hexDigit}   |
                       {hexDigit}   {hexDigit}   |
                       {hexDigit}   {hexDigit}   {hexDigit} ;
                       (* Ansi C allows three hex digits. *)

  {redundantEsc}    =  [^\\?'"0-7abfnrtvx] ;

(* integers *)

  {basicInteger}    =  {octalInteger} | {hexInteger} | {decimalInteger} ;
  {octalInteger}    =  '0'      {octalDigit}* ;
  {hexInteger}      =  '0' [xX] {hexDigit}+   ;
  {decimalInteger}  =  [1-9]    {digit}*      ;
  {intSuffix}       =  {signedInt}   | {signedLong}
                    |  {unsignedInt} | {unsignedLong} ;
  {signedInt}       = ;
  {unsignedInt}     = [uU];
  {signedLong}      = [lL];
  {unsignedLong}    = 'ul' | 'lu' | 'Ul' | 'lU' | 'uL' | 'Lu' | 'UL' | 'LU' ;

(* floats *)

  {basicFloat}      =  {floatWithInt} | {floatNoInt} ;

  {floatWithInt}    =  {integralPart} ({fract0} | {exp} | {fract0} {exp}) ;
  {floatNoInt}      =  {fract1} {exp}? ;
  {integralPart}    =  '0' | {decimalInteger} ;
                       (* Note: defining {integralPart} to be {digit}+
                          results in reduce/reduce conflicts since the
                          parser is forced to decide early on whether it
                          is seeing an integer or a float. The present
                          solution is not quite right:  03.4 is not
                          recognized as a float. *)

  {fract0}          =  '.' {digit}* ;
  {fract1}          =  '.' {digit}+ ;
  {exp}             =  [eE] [+-]? {digit}+ ;

  {floatSuffix}     =  {singleFloat} | {doubleFloat} | {longFloat} ;
  {singleFloat}     =  [fF] ;
  {doubleFloat}     =      ;
  {longFloat}       =  [lL] ;

(* character classes *)

  {octalDigit}      =  [0-7] ;
  {digit}           =  [0-9] ;
  {hexDigit}        =  [0-9a-fA-F] ;
  {letter}          =  [a-zA-Z] ;
