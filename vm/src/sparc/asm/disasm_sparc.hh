/* Sun-$Revision: 30.7 $ */

/* Copyright 1992-2012 AUTHORS.
   See the LICENSE file for license information. */

# if  defined(FAST_COMPILER) || defined(SIC_COMPILER)

# pragma interface

// Sparc disassembler for code generated by Self compilers
// Extends GNU disassembler with Self-specific features
// Urs 12/92

  // "compatibility" stuff for gdb code
# define CORE_ADDR          char*
# define fputs_filtered     fputs
# define fprintf_filtered   fprintf
# define printf_filtered    printf
# define target_read_memory read_memory
  
  inline fint read_memory (CORE_ADDR memaddr, char *insn, fint size) {
    assert(size == sizeof(int32), "one word expected");
    *(int32*)insn = *(int32*)memaddr;
    return 0;
  }
  
  char* reg_names(fint reg);
  char* freg_names(fint reg);
  void print_address(CORE_ADDR memaddr);
  int print_insn(CORE_ADDR memaddr, FILE *stream= stdout);
  void print_stack_temp_name(fint sp_offset);

  // function for printing annotated code
  void print_code(nmethod* nm, CORE_ADDR start, CORE_ADDR end);


# endif // defined(FAST_COMPILER) || defined(SIC_COMPILER)
